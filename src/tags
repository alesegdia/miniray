!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
APIENTRY	glcorearb.h	47;"	d
APIENTRYP	glcorearb.h	50;"	d
ASSERT_CANVAS	texgen.cpp	44;"	d	file:
ActiveTexture	context.h	/^  PFNGLACTIVETEXTUREPROC ActiveTexture;$/;"	m	class:Render::Context	access:public
Add	canvas.h	/^	void Add( Canvas& other )$/;"	f	class:Canvas	access:public	signature:( Canvas& other )
Add	dynamicarray.h	/^	void Add( T item )$/;"	f	class:DynamicArray	access:public	signature:( T item )
AddCubeBody	physics.h	/^	void AddCubeBody( float x, float y )$/;"	f	class:Physics	access:public	signature:( float x, float y )
Alloc	matriz.h	/^	void Alloc( int rows, int cols )$/;"	f	class:Matrix2D	access:public	signature:( int rows, int cols )
Alloc	mesh.h	/^	void Alloc( int num )$/;"	f	class:Mesh	access:protected	signature:( int num )
App	app.cpp	/^App::App() :$/;"	f	class:App	signature:()
App	app.h	/^	App();$/;"	p	class:App	access:public	signature:()
App	app.h	/^class App : public SDLGLApp$/;"	c	inherits:SDLGLApp
App::App	app.cpp	/^App::App() :$/;"	f	class:App	signature:()
App::App	app.h	/^	App();$/;"	p	class:App	access:public	signature:()
App::Cleanup	app.cpp	/^void App::Cleanup()$/;"	f	class:App	signature:()
App::Cleanup	app.h	/^	void Cleanup();$/;"	p	class:App	access:private	signature:()
App::GenThat	app.h	/^	void GenThat();$/;"	p	class:App	access:private	signature:()
App::HandleCamInput	app.cpp	/^void App::HandleCamInput()$/;"	f	class:App	signature:()
App::HandleCamInput	app.h	/^	void HandleCamInput();$/;"	p	class:App	access:private	signature:()
App::HandleEvent	app.cpp	/^void App::HandleEvent(SDL_Event& event)$/;"	f	class:App	signature:(SDL_Event& event)
App::HandleEvent	app.h	/^	void HandleEvent(SDL_Event& event);$/;"	p	class:App	access:private	signature:(SDL_Event& event)
App::Input	app.h	/^	struct Input$/;"	s	class:App	access:private
App::Input::Input	app.h	/^		Input() { left = right = forward = back = false; }$/;"	f	struct:App::Input	access:public	signature:()
App::Input::back	app.h	/^		bool left, right, forward, back;$/;"	m	struct:App::Input	access:public
App::Input::forward	app.h	/^		bool left, right, forward, back;$/;"	m	struct:App::Input	access:public
App::Input::left	app.h	/^		bool left, right, forward, back;$/;"	m	struct:App::Input	access:public
App::Input::right	app.h	/^		bool left, right, forward, back;$/;"	m	struct:App::Input	access:public
App::Input::shift	app.h	/^		bool shift;$/;"	m	struct:App::Input	access:public
App::Input::xaxis	app.h	/^		int xaxis, yaxis;$/;"	m	struct:App::Input	access:public
App::Input::yaxis	app.h	/^		int xaxis, yaxis;$/;"	m	struct:App::Input	access:public
App::Render	app.cpp	/^void App::Render()$/;"	f	class:App	signature:()
App::Render	app.h	/^	void Render();$/;"	p	class:App	access:private	signature:()
App::Setup	app.cpp	/^void App::Setup(int argc, char** argv)$/;"	f	class:App	signature:(int argc, char** argv)
App::Setup	app.h	/^	void Setup(int argc, char** argv);$/;"	p	class:App	access:private	signature:(int argc, char** argv)
App::Update	app.cpp	/^void App::Update(uint32_t delta)$/;"	f	class:App	signature:(uint32_t delta)
App::Update	app.h	/^	void Update(uint32_t delta);$/;"	p	class:App	access:private	signature:(uint32_t delta)
App::bichoentity	app.h	/^	Entity bichoentity;$/;"	m	class:App	access:private
App::bichosprite	app.h	/^	Sprite3D bichosprite;$/;"	m	class:App	access:private
App::cam	app.h	/^	Camera cam;$/;"	m	class:App	access:private
App::caminput	app.h	/^	} caminput;$/;"	m	class:App	typeref:struct:App::Input	access:private
App::canvas	app.h	/^	Canvas* canvas;$/;"	m	class:App	access:private
App::coord	app.h	/^	float coord;$/;"	m	class:App	access:private
App::dmouse_x	app.h	/^	int dmouse_x, dmouse_y;$/;"	m	class:App	access:private
App::dmouse_y	app.h	/^	int dmouse_x, dmouse_y;$/;"	m	class:App	access:private
App::entities	app.h	/^	DynamicArray<Entity*> entities;$/;"	m	class:App	access:private
App::map	app.h	/^	Map map;$/;"	m	class:App	access:private
App::pbmp	app.h	/^	tdogl::Bitmap* pbmp;$/;"	m	class:App	access:private
App::persotex	app.h	/^	tdogl::Texture* persotex;$/;"	m	class:App	access:private
App::physics	app.h	/^	Physics physics;$/;"	m	class:App	access:private
App::plane	app.h	/^	Plane plane;$/;"	m	class:App	access:private
App::playerBody	app.h	/^	b2Body* playerBody;$/;"	m	class:App	access:private
App::renderer	app.h	/^	Renderer renderer;$/;"	m	class:App	access:private
App::rng	app.h	/^	RNG rng;$/;"	m	class:App	access:private
App::suelotex	app.h	/^	tdogl::Texture* suelotex;$/;"	m	class:App	access:private
App::techotex	app.h	/^	tdogl::Texture* techotex;$/;"	m	class:App	access:private
App::tex1	app.h	/^	tdogl::Texture* tex1;$/;"	m	class:App	access:private
App::tex2	app.h	/^	tdogl::Texture* tex2;$/;"	m	class:App	access:private
App::tex3	app.h	/^	tdogl::Texture* tex3;$/;"	m	class:App	access:private
App::timer	app.h	/^	uint32_t timer;$/;"	m	class:App	access:private
AttachShader	context.h	/^  PFNGLATTACHSHADERPROC AttachShader;$/;"	m	class:Render::Context	access:public
AttribConfig	mesh.h	/^	enum class AttribConfig$/;"	c	class:Mesh	access:public
AverageRGB	Bitmap.cpp	/^inline unsigned char AverageRGB(unsigned char rgb[3]) {$/;"	f	signature:(unsigned char rgb[3])
BLOCK_FREE	map.h	/^	static const int BLOCK_FREE = 0;$/;"	m	class:Map	access:public
BLOCK_SOLID	map.h	/^	static const int BLOCK_SOLID = 1;$/;"	m	class:Map	access:public
Back	dynamicarray.h	/^	T& Back()$/;"	f	class:DynamicArray	access:public	signature:()
BatchSprite3D	renderer.h	/^	void BatchSprite3D()$/;"	f	class:Renderer	access:public	signature:()
BeginContact	physics.h	/^	void BeginContact( b2Contact* contact )$/;"	f	class:ContactListener	access:private	signature:( b2Contact* contact )
BindAttribLocation	context.h	/^  PFNGLBINDATTRIBLOCATIONPROC BindAttribLocation;$/;"	m	class:Render::Context	access:public
BindAttribLocation	program.h	/^	void BindAttribLocation( Render::Context* gl, GLuint loc, const char* shadervar )$/;"	f	class:Program	access:public	signature:( Render::Context* gl, GLuint loc, const char* shadervar )
BindBuffer	context.h	/^  PFNGLBINDBUFFERPROC BindBuffer;$/;"	m	class:Render::Context	access:public
BindTexture	context.h	/^  PFNGLBINDTEXTUREPROC BindTexture;$/;"	m	class:Render::Context	access:public
BindVP	renderer.h	/^	inline void BindVP( GLuint shaderprogram )$/;"	f	class:Renderer	access:public	signature:( GLuint shaderprogram )
BindVertexArray	context.h	/^  PFNGLBINDVERTEXARRAYPROC BindVertexArray;$/;"	m	class:Render::Context	access:public
BindVisionRange	renderer.h	/^	inline void BindVisionRange( GLuint shaderprogram )$/;"	f	class:Renderer	access:public	signature:( GLuint shaderprogram )
Bitmap	Bitmap.cpp	/^Bitmap::Bitmap(const Bitmap& other) :$/;"	f	class:Bitmap	signature:(const Bitmap& other)
Bitmap	Bitmap.cpp	/^Bitmap::Bitmap(unsigned width, $/;"	f	class:Bitmap	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels)
Bitmap	Bitmap.h	/^        Bitmap(const Bitmap& other);$/;"	p	class:tdogl::Bitmap	access:public	signature:(const Bitmap& other)
Bitmap	Bitmap.h	/^        Bitmap(unsigned width, $/;"	p	class:tdogl::Bitmap	access:public	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels = NULL)
Bitmap	Bitmap.h	/^    class Bitmap {$/;"	c	namespace:tdogl
Bitmap::Bitmap	Bitmap.cpp	/^Bitmap::Bitmap(const Bitmap& other) :$/;"	f	class:Bitmap	signature:(const Bitmap& other)
Bitmap::Bitmap	Bitmap.cpp	/^Bitmap::Bitmap(unsigned width, $/;"	f	class:Bitmap	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels)
Bitmap::_set	Bitmap.cpp	/^void Bitmap::_set(unsigned width, $/;"	f	class:Bitmap	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels)
Bitmap::bitmapFromFile	Bitmap.cpp	/^Bitmap Bitmap::bitmapFromFile(std::string filePath) {$/;"	f	class:Bitmap	signature:(std::string filePath)
Bitmap::copyRectFromBitmap	Bitmap.cpp	/^void Bitmap::copyRectFromBitmap(const Bitmap& src, $/;"	f	class:Bitmap	signature:(const Bitmap& src, unsigned srcCol, unsigned srcRow, unsigned destCol, unsigned destRow, unsigned width, unsigned height)
Bitmap::flipVertically	Bitmap.cpp	/^void Bitmap::flipVertically() {$/;"	f	class:Bitmap	signature:()
Bitmap::format	Bitmap.cpp	/^Bitmap::Format Bitmap::format() const {$/;"	f	class:Bitmap	signature:() const
Bitmap::getPixel	Bitmap.cpp	/^unsigned char* Bitmap::getPixel(unsigned int column, unsigned int row) const {$/;"	f	class:Bitmap	signature:(unsigned int column, unsigned int row) const
Bitmap::height	Bitmap.cpp	/^unsigned int Bitmap::height() const {$/;"	f	class:Bitmap	signature:() const
Bitmap::operator =	Bitmap.cpp	/^Bitmap& Bitmap::operator = (const Bitmap& other) {$/;"	f	class:Bitmap	signature:(const Bitmap& other)
Bitmap::pixelBuffer	Bitmap.cpp	/^unsigned char* Bitmap::pixelBuffer() const {$/;"	f	class:Bitmap	signature:() const
Bitmap::rotate90CounterClockwise	Bitmap.cpp	/^void Bitmap::rotate90CounterClockwise() {$/;"	f	class:Bitmap	signature:()
Bitmap::setPixel	Bitmap.cpp	/^void Bitmap::setPixel(unsigned int column, unsigned int row, const unsigned char* pixel) {$/;"	f	class:Bitmap	signature:(unsigned int column, unsigned int row, const unsigned char* pixel)
Bitmap::width	Bitmap.cpp	/^unsigned int Bitmap::width() const {$/;"	f	class:Bitmap	signature:() const
Bitmap::~Bitmap	Bitmap.cpp	/^Bitmap::~Bitmap() {$/;"	f	class:Bitmap	signature:()
BlendFunc	context.h	/^  PFNGLBLENDFUNCPROC BlendFunc;$/;"	m	class:Render::Context	access:public
Block	block.h	/^	Block() :$/;"	f	class:Block	access:public	signature:()
Block	block.h	/^class Block : public Mesh$/;"	c	inherits:Mesh
Block::Block	block.h	/^	Block() :$/;"	f	class:Block	access:public	signature:()
Block::Prepare	block.h	/^	void Prepare( Render::Context* gl )$/;"	f	class:Block	access:public	signature:( Render::Context* gl )
Block::colors	block.h	/^	static const GLfloat colors[];$/;"	m	class:Block	access:public
Block::norm	block.h	/^	static const GLfloat norm[];$/;"	m	class:Block	access:public
Block::vert	block.h	/^	static const GLfloat vert[];$/;"	m	class:Block	access:public
BlockData	map.h	/^	struct BlockData$/;"	s	class:Map	access:private
BlockType	map.h	/^	typedef int BlockType;$/;"	t	class:Map	access:public
BufferData	context.h	/^  PFNGLBUFFERDATAPROC BufferData;$/;"	m	class:Render::Context	access:public
CASE	stb_image.h	2521;"	d
CASE	stb_image.h	2534;"	d
CASE	stb_image.h	2537;"	d
CASE	stb_image.h	2550;"	d
CASE	stb_image.h	891;"	d
CASE	stb_image.h	909;"	d
COMBO	stb_image.h	890;"	d
Camera	camera.cpp	/^Camera::Camera() :$/;"	f	class:Camera	signature:()
Camera	camera.h	/^	Camera();$/;"	p	class:Camera	access:public	signature:()
Camera	camera.h	/^class Camera {$/;"	c
Camera::Camera	camera.cpp	/^Camera::Camera() :$/;"	f	class:Camera	signature:()
Camera::Camera	camera.h	/^	Camera();$/;"	p	class:Camera	access:public	signature:()
Camera::ComputeProjection	camera.cpp	/^void Camera::ComputeProjection()$/;"	f	class:Camera	signature:()
Camera::ComputeProjection	camera.h	/^	void ComputeProjection();$/;"	p	class:Camera	access:private	signature:()
Camera::ComputeView	camera.cpp	/^void Camera::ComputeView()$/;"	f	class:Camera	signature:()
Camera::ComputeView	camera.h	/^	void ComputeView();$/;"	p	class:Camera	access:private	signature:()
Camera::Forward	camera.cpp	/^cml::vector3f Camera::Forward() const$/;"	f	class:Camera	signature:() const
Camera::Forward	camera.h	/^	cml::vector3f Forward() const;$/;"	p	class:Camera	access:public	signature:() const
Camera::GetHorizontalAngle	camera.cpp	/^float Camera::GetHorizontalAngle() const$/;"	f	class:Camera	signature:() const
Camera::GetHorizontalAngle	camera.h	/^	float GetHorizontalAngle() const;$/;"	p	class:Camera	access:public	signature:() const
Camera::GetPosition	camera.cpp	/^const cml::vector3f& Camera::GetPosition() const$/;"	f	class:Camera	signature:() const
Camera::GetPosition	camera.h	/^	const cml::vector3f& GetPosition() const;$/;"	p	class:Camera	access:public	signature:() const
Camera::GetProjection	camera.cpp	/^const cml::matrix44f_c& Camera::GetProjection()$/;"	f	class:Camera	signature:()
Camera::GetProjection	camera.h	/^	const cml::matrix44f_c& GetProjection();$/;"	p	class:Camera	access:public	signature:()
Camera::GetVerticalAngle	camera.cpp	/^float Camera::GetVerticalAngle() const$/;"	f	class:Camera	signature:() const
Camera::GetVerticalAngle	camera.h	/^	float GetVerticalAngle() const;$/;"	p	class:Camera	access:public	signature:() const
Camera::GetView	camera.cpp	/^const cml::matrix44f_c& Camera::GetView()$/;"	f	class:Camera	signature:()
Camera::GetView	camera.h	/^	const cml::matrix44f_c& GetView();$/;"	p	class:Camera	access:public	signature:()
Camera::Matrix	camera.cpp	/^cml::matrix44f_c Camera::Matrix()$/;"	f	class:Camera	signature:()
Camera::Matrix	camera.h	/^	cml::matrix44f_c Matrix();$/;"	p	class:Camera	access:public	signature:()
Camera::OffsetAngle	camera.cpp	/^void Camera::OffsetAngle( float hor, float ver )$/;"	f	class:Camera	signature:( float hor, float ver )
Camera::OffsetAngle	camera.h	/^	void OffsetAngle( float hor, float ver );$/;"	p	class:Camera	access:public	signature:( float hor, float ver )
Camera::OffsetPosition	camera.cpp	/^void Camera::OffsetPosition( const cml::vector3f& offsetPosition )$/;"	f	class:Camera	signature:( const cml::vector3f& offsetPosition )
Camera::OffsetPosition	camera.h	/^	void OffsetPosition( const cml::vector3f& offsetPosition );$/;"	p	class:Camera	access:public	signature:( const cml::vector3f& offsetPosition )
Camera::Right	camera.cpp	/^cml::vector3f Camera::Right() const$/;"	f	class:Camera	signature:() const
Camera::Right	camera.h	/^	cml::vector3f Right() const;$/;"	p	class:Camera	access:public	signature:() const
Camera::SetAspect	camera.cpp	/^void Camera::SetAspect( float a )$/;"	f	class:Camera	signature:( float a )
Camera::SetAspect	camera.h	/^	void SetAspect( float a );$/;"	p	class:Camera	access:public	signature:( float a )
Camera::SetHorizontalAngle	camera.h	/^	void SetHorizontalAngle( float angle )$/;"	f	class:Camera	access:public	signature:( float angle )
Camera::SetPosition	camera.cpp	/^void Camera::SetPosition( const cml::vector3f& pos )$/;"	f	class:Camera	signature:( const cml::vector3f& pos )
Camera::SetPosition	camera.h	/^	void SetPosition( const cml::vector3f& pos );$/;"	p	class:Camera	access:public	signature:( const cml::vector3f& pos )
Camera::Up	camera.cpp	/^cml::vector3f Camera::Up() const$/;"	f	class:Camera	signature:() const
Camera::Up	camera.h	/^	cml::vector3f Up() const;$/;"	p	class:Camera	access:public	signature:() const
Camera::aspect	camera.h	/^	float aspect;	\/\/ aspect Ratio$/;"	m	class:Camera	access:private
Camera::farClip	camera.h	/^	float farClip;	\/\/ Far clipping plane distance$/;"	m	class:Camera	access:private
Camera::fieldOfView	camera.h	/^	float fieldOfView;		\/\/ Field of View Angle$/;"	m	class:Camera	access:private
Camera::horizontalAngle	camera.h	/^	float horizontalAngle;$/;"	m	class:Camera	access:private
Camera::nearClip	camera.h	/^	float nearClip;	\/\/ Near clipping plane distance$/;"	m	class:Camera	access:private
Camera::position	camera.h	/^	cml::vector3f position;$/;"	m	class:Camera	access:private
Camera::projection	camera.h	/^	cml::matrix44f_c view, projection;$/;"	m	class:Camera	access:private
Camera::verticalAngle	camera.h	/^	float verticalAngle;$/;"	m	class:Camera	access:private
Camera::view	camera.h	/^	cml::matrix44f_c view, projection;$/;"	m	class:Camera	access:private
CanMove	map.h	/^	bool CanMove( float x, float y, float blocksize = 2.f )$/;"	f	class:Map	access:public	signature:( float x, float y, float blocksize = 2.f )
Canvas	canvas.cpp	/^Canvas::Canvas( int w, int h )$/;"	f	class:Canvas	signature:( int w, int h )
Canvas	canvas.h	/^	Canvas( int w, int h );$/;"	p	class:Canvas	access:public	signature:( int w, int h )
Canvas	canvas.h	/^class Canvas$/;"	c
Canvas::Add	canvas.h	/^	void Add( Canvas& other )$/;"	f	class:Canvas	access:public	signature:( Canvas& other )
Canvas::Canvas	canvas.cpp	/^Canvas::Canvas( int w, int h )$/;"	f	class:Canvas	signature:( int w, int h )
Canvas::Canvas	canvas.h	/^	Canvas( int w, int h );$/;"	p	class:Canvas	access:public	signature:( int w, int h )
Canvas::Fill	canvas.cpp	/^void Canvas::Fill( Color c )$/;"	f	class:Canvas	signature:( Color c )
Canvas::Fill	canvas.h	/^	void Fill( Color c );$/;"	p	class:Canvas	access:public	signature:( Color c )
Canvas::GenClouds	canvas.h	/^	void GenClouds( RNG& rng, double Ldiv = 3, double zoom = 64, uint8_t H = 169, uint8_t S = 255, int base = 192 )$/;"	f	class:Canvas	access:public	signature:( RNG& rng, double Ldiv = 3, double zoom = 64, uint8_t H = 169, uint8_t S = 255, int base = 192 )
Canvas::GenPixelTurbulence	canvas.h	/^	void GenPixelTurbulence( RNG& rng, int light = 64, int rel = 32 )$/;"	f	class:Canvas	access:public	signature:( RNG& rng, int light = 64, int rel = 32 )
Canvas::GenTurbulence	canvas.h	/^	void GenTurbulence( RNG& rng, double zoom = 64, double base = 128, bool smooth = true )$/;"	f	class:Canvas	access:public	signature:( RNG& rng, double zoom = 64, double base = 128, bool smooth = true )
Canvas::Get	canvas.h	/^	Color Get( int x, int y )$/;"	f	class:Canvas	access:public	signature:( int x, int y )
Canvas::Height	canvas.h	/^	int Height()$/;"	f	class:Canvas	access:public	signature:()
Canvas::MakeNoise	canvas.h	/^	void MakeNoise( Matrix2D<float>& noise, RNG& rng, int w, int h )$/;"	f	class:Canvas	access:public	signature:( Matrix2D<float>& noise, RNG& rng, int w, int h )
Canvas::Plot	canvas.cpp	/^void Canvas::Plot( int x, int y, Color c )$/;"	f	class:Canvas	signature:( int x, int y, Color c )
Canvas::Plot	canvas.h	/^	void Plot( int x, int y, Color c );$/;"	p	class:Canvas	access:public	signature:( int x, int y, Color c )
Canvas::Raw	canvas.cpp	/^const void* Canvas::Raw()$/;"	f	class:Canvas	signature:()
Canvas::Raw	canvas.h	/^	const void* Raw();$/;"	p	class:Canvas	access:public	signature:()
Canvas::SmoothNoise	canvas.h	/^	double SmoothNoise( Matrix2D<float>& noise, double x, double y )$/;"	f	class:Canvas	access:public	signature:( Matrix2D<float>& noise, double x, double y )
Canvas::ToBitmap	canvas.h	/^	void ToBitmap( tdogl::Bitmap& bmp )$/;"	f	class:Canvas	access:public	signature:( tdogl::Bitmap& bmp )
Canvas::Turbulence	canvas.h	/^	double Turbulence( Matrix2D<float>& noise, double x, double y, double size, bool bifilter = true, double base = 128.0 )$/;"	f	class:Canvas	access:public	signature:( Matrix2D<float>& noise, double x, double y, double size, bool bifilter = true, double base = 128.0 )
Canvas::Width	canvas.h	/^	int Width()$/;"	f	class:Canvas	access:public	signature:()
Canvas::data	canvas.h	/^	Matrix2D<Color> data;$/;"	m	class:Canvas	access:private
Canvas::operator =	canvas.h	/^	Canvas& operator=( const Canvas& other )$/;"	f	class:Canvas	access:public	signature:( const Canvas& other )
CheckExtension	context.h	/^  virtual bool CheckExtension(const char*name) = 0;$/;"	p	class:Render::Context	access:protected	signature:(const char*name)
CheckExtension	sdlcontext.cpp	/^bool Context::CheckExtension(const char*name)$/;"	f	class:Render::SDL::Context	signature:(const char*name)
CheckExtension	sdlcontext.h	/^  bool CheckExtension(const char*name);$/;"	p	class:Render::SDL::Context	access:public	signature:(const char*name)
Cleanup	app.cpp	/^void App::Cleanup()$/;"	f	class:App	signature:()
Cleanup	app.h	/^	void Cleanup();$/;"	p	class:App	access:private	signature:()
Cleanup	entity.h	/^	void Cleanup()$/;"	f	class:Entity	access:public	signature:()
Cleanup	physics.h	/^	void Cleanup()$/;"	f	class:Physics	access:public	signature:()
Cleanup	sdlcontext.h	/^  void Cleanup()$/;"	f	class:Render::SDL::Context	access:public	signature:()
Cleanup	sdlglapp.cpp	/^void SDLGLApp::Cleanup()$/;"	f	class:SDLGLApp	signature:()
Cleanup	sdlglapp.h	/^	virtual void Cleanup();$/;"	p	class:SDLGLApp	access:protected	signature:()
Clear	context.h	/^  PFNGLCLEARPROC Clear;$/;"	m	class:Render::Context	access:public
Clear	dynamicarray.h	/^	void Clear()$/;"	f	class:DynamicArray	access:public	signature:()
ClearColor	context.h	/^  PFNGLCLEARCOLORPROC ClearColor;$/;"	m	class:Render::Context	access:public
CollisionEnter	entity.h	/^	void CollisionEnter( Entity* other )$/;"	f	class:Entity	access:public	signature:( Entity* other )
CollisionExit	entity.h	/^	void CollisionExit( Entity* other )$/;"	f	class:Entity	access:public	signature:( Entity* other )
Color	color.h	/^	Color( uint8_t r=0, uint8_t g=0, uint8_t b=0, uint8_t a = 255 )$/;"	f	class:Color	access:public	signature:( uint8_t r=0, uint8_t g=0, uint8_t b=0, uint8_t a = 255 )
Color	color.h	/^class Color$/;"	c
Color::Color	color.h	/^	Color( uint8_t r=0, uint8_t g=0, uint8_t b=0, uint8_t a = 255 )$/;"	f	class:Color	access:public	signature:( uint8_t r=0, uint8_t g=0, uint8_t b=0, uint8_t a = 255 )
Color::data	color.h	/^	uint8_t data[4];$/;"	m	class:Color	access:private
Color::operator +	color.h	/^	Color operator+( Color& other )$/;"	f	class:Color	access:public	signature:( Color& other )
Color::operator []	color.h	/^	uint8_t& operator[](size_t index)$/;"	f	class:Color	access:public	signature:(size_t index)
Cols	matriz.h	/^	int Cols() { return cols; }$/;"	f	class:Matrix2D	access:public	signature:()
Compile	program.h	/^	void Compile( Render::Context* gl )$/;"	f	class:Program	access:public	signature:( Render::Context* gl )
CompileShader	context.h	/^  PFNGLCOMPILESHADERPROC CompileShader;$/;"	m	class:Render::Context	access:public
ComputeProjection	camera.cpp	/^void Camera::ComputeProjection()$/;"	f	class:Camera	signature:()
ComputeProjection	camera.h	/^	void ComputeProjection();$/;"	p	class:Camera	access:private	signature:()
ComputeView	camera.cpp	/^void Camera::ComputeView()$/;"	f	class:Camera	signature:()
ComputeView	camera.h	/^	void ComputeView();$/;"	p	class:Camera	access:private	signature:()
Config	mapgen.h	/^	Config() :$/;"	f	struct:mapgen::Config	access:public	signature:()
Config	mapgen.h	/^struct Config$/;"	s	namespace:mapgen
ConfigAttrib	mesh.h	/^	void ConfigAttrib( Render::Context* gl, GLuint location, size_t num_floats, size_t stride = 0, size_t offset = 0, int attrdivisor = 0 \/* 0 => NO INSTANCING *\/ )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl, GLuint location, size_t num_floats, size_t stride = 0, size_t offset = 0, int attrdivisor = 0 )
ConfigAttrib4fv	mesh.h	/^	void ConfigAttrib4fv( Render::Context* gl, GLuint location, int attrdivisor = 0 )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl, GLuint location, int attrdivisor = 0 )
ConfigXYZUV_INST	mesh.h	/^	void ConfigXYZUV_INST( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
ConfigXY_UV	mesh.h	/^	void ConfigXY_UV( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
ContactListener	physics.h	/^class ContactListener : public b2ContactListener$/;"	c	inherits:b2ContactListener
ContactListener::BeginContact	physics.h	/^	void BeginContact( b2Contact* contact )$/;"	f	class:ContactListener	access:private	signature:( b2Contact* contact )
ContactListener::EndContact	physics.h	/^	void EndContact( b2Contact* contact )$/;"	f	class:ContactListener	access:private	signature:( b2Contact* contact )
Context	Texture.h	/^    	typedef Render::Context Context;$/;"	t	class:tdogl::Texture	access:private
Context	context.h	/^  Context( Render::Context::Profile prof )$/;"	f	class:Render::Context	access:public	signature:( Render::Context::Profile prof )
Context	context.h	/^class Context {$/;"	c	namespace:Render
Context	sdlcontext.h	/^  Context( SDL_GLContext c, Render::Context::Profile prof ) :$/;"	f	class:Render::SDL::Context	access:public	signature:( SDL_GLContext c, Render::Context::Profile prof )
Context	sdlcontext.h	/^class Context : public Render::Context {$/;"	c	namespace:Render::SDL	inherits:Render::Context
ConverterFuncForFormats	Bitmap.cpp	/^static FormatConverterFunc ConverterFuncForFormats(Bitmap::Format srcFormat, Bitmap::Format destFormat){$/;"	f	file:	signature:(Bitmap::Format srcFormat, Bitmap::Format destFormat)
Core	context.h	/^    Core,$/;"	m	class:Render::Context::Profile	access:private
CreateBulletBody	physics.h	/^	b2Body* CreateBulletBody( float x, float y )$/;"	f	class:Physics	access:public	signature:( float x, float y )
CreateProgram	context.h	/^  PFNGLCREATEPROGRAMPROC CreateProgram;$/;"	m	class:Render::Context	access:public
CreateShader	context.h	/^  PFNGLCREATESHADERPROC CreateShader;$/;"	m	class:Render::Context	access:public
CreateSphereBody	physics.h	/^	b2Body* CreateSphereBody( float x, float y )$/;"	f	class:Physics	access:public	signature:( float x, float y )
CullFace	context.h	/^  PFNGLCULLFACEPROC CullFace;$/;"	m	class:Render::Context	access:public
CurrentFrame	sprite3d.h	/^	const cml::vector2f& CurrentFrame()$/;"	f	class:Sprite3D	access:public	signature:()
Debug	map.h	/^	void Debug()$/;"	f	class:Map	access:public	signature:()
Debug	matriz.h	/^	void Debug()$/;"	f	class:Matrix2D	access:public	signature:()
Decorate	mapgen.cpp	/^Map Decorate( Map map )$/;"	f	namespace:mapgen	signature:( Map map )
Decorate	mapgen.h	/^Map Decorate( Map map );$/;"	p	namespace:mapgen	signature:( Map map )
DeleteBuffers	context.h	/^  PFNGLDELETEBUFFERSPROC DeleteBuffers;$/;"	m	class:Render::Context	access:public
DeleteProgram	context.h	/^  PFNGLDELETEPROGRAMPROC DeleteProgram;$/;"	m	class:Render::Context	access:public
DeleteShader	context.h	/^  PFNGLDELETESHADERPROC DeleteShader;$/;"	m	class:Render::Context	access:public
DeleteTextures	context.h	/^  PFNGLDELETETEXTURESPROC DeleteTextures;$/;"	m	class:Render::Context	access:public
DeleteVertexArrays	context.h	/^  PFNGLDELETEVERTEXARRAYSPROC DeleteVertexArrays;$/;"	m	class:Render::Context	access:public
DepthFunc	context.h	/^  PFNGLDEPTHFUNCPROC DepthFunc;$/;"	m	class:Render::Context	access:public
DetachShader	context.h	/^  PFNGLDETACHSHADERPROC DetachShader;$/;"	m	class:Render::Context	access:public
DisableVertexAttribArray	context.h	/^  PFNGLDISABLEVERTEXATTRIBARRAYPROC DisableVertexAttribArray;$/;"	m	class:Render::Context	access:public
Dispose	mesh.h	/^	void Dispose( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
Dispose	program.h	/^	void Dispose( Render::Context* gl )$/;"	f	class:Program	access:public	signature:( Render::Context* gl )
Dispose	renderer.h	/^	void Dispose()$/;"	f	class:Renderer	access:public	signature:()
Dispose	sprite3d.h	/^	void Dispose( Render::Context* gl )$/;"	f	class:Sprite3D	access:public	signature:( Render::Context* gl )
DrawArrays	context.h	/^  PFNGLDRAWARRAYSPROC DrawArrays;$/;"	m	class:Render::Context	access:public
DrawArraysInstanced	context.h	/^  PFNGLDRAWARRAYSINSTANCEDPROC DrawArraysInstanced;$/;"	m	class:Render::Context	access:public
DynamicArray	dynamicarray.h	/^	DynamicArray( size_t initial_size = INITIAL_SIZE )$/;"	f	class:DynamicArray	access:public	signature:( size_t initial_size = INITIAL_SIZE )
DynamicArray	dynamicarray.h	/^class DynamicArray$/;"	c
DynamicArray::Add	dynamicarray.h	/^	void Add( T item )$/;"	f	class:DynamicArray	access:public	signature:( T item )
DynamicArray::Back	dynamicarray.h	/^	T& Back()$/;"	f	class:DynamicArray	access:public	signature:()
DynamicArray::Clear	dynamicarray.h	/^	void Clear()$/;"	f	class:DynamicArray	access:public	signature:()
DynamicArray::DynamicArray	dynamicarray.h	/^	DynamicArray( size_t initial_size = INITIAL_SIZE )$/;"	f	class:DynamicArray	access:public	signature:( size_t initial_size = INITIAL_SIZE )
DynamicArray::GetRawData	dynamicarray.h	/^	T* GetRawData()$/;"	f	class:DynamicArray	access:public	signature:()
DynamicArray::INITIAL_SIZE	dynamicarray.h	/^	static const size_t INITIAL_SIZE = 20;$/;"	m	class:DynamicArray	access:private
DynamicArray::IsEmpty	dynamicarray.h	/^	bool IsEmpty()$/;"	f	class:DynamicArray	access:public	signature:()
DynamicArray::REALLOC_STEP	dynamicarray.h	/^	static const size_t REALLOC_STEP = 5;$/;"	m	class:DynamicArray	access:private
DynamicArray::Realloc	dynamicarray.h	/^	void Realloc( size_t realloc_step = REALLOC_STEP )$/;"	f	class:DynamicArray	access:private	signature:( size_t realloc_step = REALLOC_STEP )
DynamicArray::Size	dynamicarray.h	/^	size_t Size()$/;"	f	class:DynamicArray	access:public	signature:()
DynamicArray::capacity	dynamicarray.h	/^	size_t capacity;$/;"	m	class:DynamicArray	access:private
DynamicArray::data	dynamicarray.h	/^	T* data;$/;"	m	class:DynamicArray	access:private
DynamicArray::operator []	dynamicarray.h	/^	T& operator[]( size_t index )$/;"	f	class:DynamicArray	access:public	signature:( size_t index )
DynamicArray::size	dynamicarray.h	/^	size_t size = 0;$/;"	m	class:DynamicArray	access:private
DynamicArray::~DynamicArray	dynamicarray.h	/^	~DynamicArray( )$/;"	f	class:DynamicArray	access:public	signature:( )
Enable	context.h	/^  PFNGLENABLEPROC Enable;$/;"	m	class:Render::Context	access:public
EnableVertexAttribArray	context.h	/^  PFNGLENABLEVERTEXATTRIBARRAYPROC EnableVertexAttribArray;$/;"	m	class:Render::Context	access:public
EndContact	physics.h	/^	void EndContact( b2Contact* contact )$/;"	f	class:ContactListener	access:private	signature:( b2Contact* contact )
Entity	entity.h	/^	Entity()$/;"	f	class:Entity	access:public	signature:()
Entity	entity.h	/^class Entity$/;"	c
Entity::Cleanup	entity.h	/^	void Cleanup()$/;"	f	class:Entity	access:public	signature:()
Entity::CollisionEnter	entity.h	/^	void CollisionEnter( Entity* other )$/;"	f	class:Entity	access:public	signature:( Entity* other )
Entity::CollisionExit	entity.h	/^	void CollisionExit( Entity* other )$/;"	f	class:Entity	access:public	signature:( Entity* other )
Entity::Entity	entity.h	/^	Entity()$/;"	f	class:Entity	access:public	signature:()
Entity::GetSprite	entity.h	/^	Sprite3D* GetSprite()$/;"	f	class:Entity	access:public	signature:()
Entity::GetTransform	entity.h	/^	Transform& GetTransform()$/;"	f	class:Entity	access:public	signature:()
Entity::Model	entity.h	/^	cml::matrix44f_c Model()$/;"	f	class:Entity	access:public	signature:()
Entity::PhysicStep	entity.h	/^	void PhysicStep()$/;"	f	class:Entity	access:public	signature:()
Entity::Prepare	entity.h	/^	void Prepare( Sprite3D* sprite )$/;"	f	class:Entity	access:public	signature:( Sprite3D* sprite )
Entity::SetAngleY	entity.h	/^	void SetAngleY( float angle )$/;"	f	class:Entity	access:public	signature:( float angle )
Entity::SetPhysicBody	entity.h	/^	void SetPhysicBody( b2Body* body )$/;"	f	class:Entity	access:public	signature:( b2Body* body )
Entity::SetSprite	entity.h	/^	void SetSprite( Sprite3D* sprite )$/;"	f	class:Entity	access:public	signature:( Sprite3D* sprite )
Entity::body	entity.h	/^	b2Body* body;$/;"	m	class:Entity	access:private
Entity::sprite	entity.h	/^	Sprite3D* sprite;$/;"	m	class:Entity	access:private
Entity::transform	entity.h	/^	Transform transform;$/;"	m	class:Entity	access:private
Exec	sdlglapp.cpp	/^int SDLGLApp::Exec(int argc, char** argv)$/;"	f	class:SDLGLApp	signature:(int argc, char** argv)
Exec	sdlglapp.h	/^	int Exec(int argc, char** argv);$/;"	p	class:SDLGLApp	access:public	signature:(int argc, char** argv)
FAST_BITS	stb_image.h	989;"	d
FPS	fpscounter.h	/^	int FPS;$/;"	m	class:FPSCounter	access:private
FPSCounter	fpscounter.h	/^	FPSCounter()$/;"	f	class:FPSCounter	access:public	signature:()
FPSCounter	fpscounter.h	/^class FPSCounter$/;"	c
FPSCounter::FPS	fpscounter.h	/^	int FPS;$/;"	m	class:FPSCounter	access:private
FPSCounter::FPSCounter	fpscounter.h	/^	FPSCounter()$/;"	f	class:FPSCounter	access:public	signature:()
FPSCounter::GetFPS	fpscounter.h	/^	int GetFPS()$/;"	f	class:FPSCounter	access:public	signature:()
FPSCounter::Tick	fpscounter.h	/^	void Tick( T time )$/;"	f	class:FPSCounter	access:public	signature:( T time )
FPSCounter::frames	fpscounter.h	/^	int frames;$/;"	m	class:FPSCounter	access:private
FPSCounter::milis	fpscounter.h	/^	T milis;$/;"	m	class:FPSCounter	access:private
FRAGMENT	shader.h	/^	const static int FRAGMENT = 1;$/;"	m	class:Shader	access:public
Fill	canvas.cpp	/^void Canvas::Fill( Color c )$/;"	f	class:Canvas	signature:( Color c )
Fill	canvas.h	/^	void Fill( Color c );$/;"	p	class:Canvas	access:public	signature:( Color c )
Fill	mapgen.cpp	/^void Fill( Map& map, Map::BlockType block )$/;"	f	namespace:mapgen	signature:( Map& map, Map::BlockType block )
Fill	mapgen.h	/^void Fill( Map& map );$/;"	p	namespace:mapgen	signature:( Map& map )
Flatten	mapgen.cpp	/^Map Flatten( Map map )$/;"	f	namespace:mapgen	signature:( Map map )
Flatten	mapgen.h	/^Map Flatten( Map map );$/;"	p	namespace:mapgen	signature:( Map map )
Format	Bitmap.h	/^        enum Format {$/;"	g	class:tdogl::Bitmap	access:public
FormatConverterFunc	Bitmap.cpp	/^typedef void(*FormatConverterFunc)(unsigned char*, unsigned char*);$/;"	t	file:
Format_Grayscale	Bitmap.h	/^            Format_Grayscale = 1, \/**< one channel: grayscale *\/$/;"	e	enum:tdogl::Bitmap::Format
Format_GrayscaleAlpha	Bitmap.h	/^            Format_GrayscaleAlpha = 2, \/**< two channels: grayscale and alpha *\/$/;"	e	enum:tdogl::Bitmap::Format
Format_RGB	Bitmap.h	/^            Format_RGB = 3, \/**< three channels: red, green, blue *\/$/;"	e	enum:tdogl::Bitmap::Format
Format_RGBA	Bitmap.h	/^            Format_RGBA = 4 \/**< four channels: red, green, blue, alpha *\/$/;"	e	enum:tdogl::Bitmap::Format
Forward	camera.cpp	/^cml::vector3f Camera::Forward() const$/;"	f	class:Camera	signature:() const
Forward	camera.h	/^	cml::vector3f Forward() const;$/;"	p	class:Camera	access:public	signature:() const
FrameSize	sprite3d.h	/^	const cml::vector2f& FrameSize()$/;"	f	class:Sprite3D	access:public	signature:()
FrontFace	context.h	/^  PFNGLFRONTFACEPROC FrontFace;$/;"	m	class:Render::Context	access:public
GEOMETRY	shader.h	/^	const static int GEOMETRY = 2;$/;"	m	class:Shader	access:public
GLAPI	glcorearb.h	53;"	d
GLDEBUGPROC	glcorearb.h	/^typedef void (APIENTRY  *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);$/;"	t
GLDEBUGPROCARB	glcorearb.h	/^typedef void (APIENTRY  *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);$/;"	t
GLEXT_64_TYPES_DEFINED	glcorearb.h	1482;"	d
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS	glcorearb.h	2133;"	d
GL_ACTIVE_ATTRIBUTES	glcorearb.h	764;"	d
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	glcorearb.h	765;"	d
GL_ACTIVE_PROGRAM	glcorearb.h	1907;"	d
GL_ACTIVE_RESOURCES	glcorearb.h	2432;"	d
GL_ACTIVE_SUBROUTINES	glcorearb.h	1736;"	d
GL_ACTIVE_SUBROUTINE_MAX_LENGTH	glcorearb.h	1739;"	d
GL_ACTIVE_SUBROUTINE_UNIFORMS	glcorearb.h	1737;"	d
GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS	glcorearb.h	1738;"	d
GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH	glcorearb.h	1740;"	d
GL_ACTIVE_TEXTURE	glcorearb.h	516;"	d
GL_ACTIVE_UNIFORMS	glcorearb.h	761;"	d
GL_ACTIVE_UNIFORM_BLOCKS	glcorearb.h	1432;"	d
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH	glcorearb.h	1431;"	d
GL_ACTIVE_UNIFORM_MAX_LENGTH	glcorearb.h	762;"	d
GL_ACTIVE_VARIABLES	glcorearb.h	2448;"	d
GL_ALIASED_LINE_WIDTH_RANGE	glcorearb.h	469;"	d
GL_ALL_BARRIER_BITS	glcorearb.h	2148;"	d
GL_ALL_SHADER_BITS	glcorearb.h	1905;"	d
GL_ALPHA	glcorearb.h	358;"	d
GL_ALREADY_SIGNALED	glcorearb.h	1556;"	d
GL_ALWAYS	glcorearb.h	216;"	d
GL_AND	glcorearb.h	334;"	d
GL_AND_INVERTED	glcorearb.h	337;"	d
GL_AND_REVERSE	glcorearb.h	335;"	d
GL_ANY_SAMPLES_PASSED	glcorearb.h	1632;"	d
GL_ANY_SAMPLES_PASSED_CONSERVATIVE	glcorearb.h	2249;"	d
GL_ARB_ES2_compatibility	glcorearb.h	2627;"	d
GL_ARB_ES3_compatibility	glcorearb.h	2631;"	d
GL_ARB_arrays_of_arrays	glcorearb.h	2635;"	d
GL_ARB_base_instance	glcorearb.h	2639;"	d
GL_ARB_bindless_texture	glcorearb.h	2643;"	d
GL_ARB_blend_func_extended	glcorearb.h	2683;"	d
GL_ARB_buffer_storage	glcorearb.h	2687;"	d
GL_ARB_cl_event	glcorearb.h	2691;"	d
GL_ARB_clear_buffer_object	glcorearb.h	2703;"	d
GL_ARB_clear_texture	glcorearb.h	2707;"	d
GL_ARB_compressed_texture_pixel_storage	glcorearb.h	2711;"	d
GL_ARB_compute_shader	glcorearb.h	2715;"	d
GL_ARB_compute_variable_group_size	glcorearb.h	2720;"	d
GL_ARB_conservative_depth	glcorearb.h	2732;"	d
GL_ARB_copy_buffer	glcorearb.h	2736;"	d
GL_ARB_copy_image	glcorearb.h	2742;"	d
GL_ARB_debug_output	glcorearb.h	2746;"	d
GL_ARB_depth_buffer_float	glcorearb.h	2783;"	d
GL_ARB_depth_clamp	glcorearb.h	2787;"	d
GL_ARB_draw_buffers_blend	glcorearb.h	2791;"	d
GL_ARB_draw_elements_base_vertex	glcorearb.h	2805;"	d
GL_ARB_draw_indirect	glcorearb.h	2809;"	d
GL_ARB_enhanced_layouts	glcorearb.h	2813;"	d
GL_ARB_explicit_attrib_location	glcorearb.h	2817;"	d
GL_ARB_explicit_uniform_location	glcorearb.h	2821;"	d
GL_ARB_fragment_coord_conventions	glcorearb.h	2825;"	d
GL_ARB_fragment_layer_viewport	glcorearb.h	2829;"	d
GL_ARB_framebuffer_no_attachments	glcorearb.h	2833;"	d
GL_ARB_framebuffer_object	glcorearb.h	2837;"	d
GL_ARB_framebuffer_sRGB	glcorearb.h	2841;"	d
GL_ARB_get_program_binary	glcorearb.h	2845;"	d
GL_ARB_gpu_shader5	glcorearb.h	2849;"	d
GL_ARB_gpu_shader_fp64	glcorearb.h	2853;"	d
GL_ARB_half_float_vertex	glcorearb.h	2857;"	d
GL_ARB_imaging	glcorearb.h	2861;"	d
GL_ARB_indirect_parameters	glcorearb.h	2867;"	d
GL_ARB_internalformat_query	glcorearb.h	2879;"	d
GL_ARB_internalformat_query2	glcorearb.h	2883;"	d
GL_ARB_invalidate_subdata	glcorearb.h	2888;"	d
GL_ARB_map_buffer_alignment	glcorearb.h	2892;"	d
GL_ARB_map_buffer_range	glcorearb.h	2896;"	d
GL_ARB_multi_bind	glcorearb.h	2900;"	d
GL_ARB_multi_draw_indirect	glcorearb.h	2904;"	d
GL_ARB_occlusion_query2	glcorearb.h	2908;"	d
GL_ARB_program_interface_query	glcorearb.h	2912;"	d
GL_ARB_provoking_vertex	glcorearb.h	2916;"	d
GL_ARB_query_buffer_object	glcorearb.h	2920;"	d
GL_ARB_robust_buffer_access_behavior	glcorearb.h	2924;"	d
GL_ARB_robustness	glcorearb.h	2928;"	d
GL_ARB_robustness_isolation	glcorearb.h	2957;"	d
GL_ARB_sample_shading	glcorearb.h	2961;"	d
GL_ARB_sampler_objects	glcorearb.h	2971;"	d
GL_ARB_seamless_cube_map	glcorearb.h	2975;"	d
GL_ARB_seamless_cubemap_per_texture	glcorearb.h	2979;"	d
GL_ARB_separate_shader_objects	glcorearb.h	2983;"	d
GL_ARB_shader_atomic_counters	glcorearb.h	2987;"	d
GL_ARB_shader_bit_encoding	glcorearb.h	2991;"	d
GL_ARB_shader_draw_parameters	glcorearb.h	2995;"	d
GL_ARB_shader_group_vote	glcorearb.h	2999;"	d
GL_ARB_shader_image_load_store	glcorearb.h	3003;"	d
GL_ARB_shader_image_size	glcorearb.h	3007;"	d
GL_ARB_shader_precision	glcorearb.h	3011;"	d
GL_ARB_shader_stencil_export	glcorearb.h	3015;"	d
GL_ARB_shader_storage_buffer_object	glcorearb.h	3019;"	d
GL_ARB_shader_subroutine	glcorearb.h	3023;"	d
GL_ARB_shading_language_420pack	glcorearb.h	3027;"	d
GL_ARB_shading_language_include	glcorearb.h	3031;"	d
GL_ARB_shading_language_packing	glcorearb.h	3052;"	d
GL_ARB_sparse_texture	glcorearb.h	3056;"	d
GL_ARB_stencil_texturing	glcorearb.h	3075;"	d
GL_ARB_sync	glcorearb.h	3079;"	d
GL_ARB_tessellation_shader	glcorearb.h	3083;"	d
GL_ARB_texture_buffer_object_rgb32	glcorearb.h	3087;"	d
GL_ARB_texture_buffer_range	glcorearb.h	3091;"	d
GL_ARB_texture_compression_bptc	glcorearb.h	3095;"	d
GL_ARB_texture_compression_rgtc	glcorearb.h	3103;"	d
GL_ARB_texture_cube_map_array	glcorearb.h	3107;"	d
GL_ARB_texture_gather	glcorearb.h	3118;"	d
GL_ARB_texture_mirror_clamp_to_edge	glcorearb.h	3125;"	d
GL_ARB_texture_multisample	glcorearb.h	3129;"	d
GL_ARB_texture_query_levels	glcorearb.h	3133;"	d
GL_ARB_texture_query_lod	glcorearb.h	3137;"	d
GL_ARB_texture_rg	glcorearb.h	3141;"	d
GL_ARB_texture_rgb10_a2ui	glcorearb.h	3145;"	d
GL_ARB_texture_stencil8	glcorearb.h	3149;"	d
GL_ARB_texture_storage	glcorearb.h	3153;"	d
GL_ARB_texture_storage_multisample	glcorearb.h	3157;"	d
GL_ARB_texture_swizzle	glcorearb.h	3161;"	d
GL_ARB_texture_view	glcorearb.h	3165;"	d
GL_ARB_timer_query	glcorearb.h	3169;"	d
GL_ARB_transform_feedback2	glcorearb.h	3173;"	d
GL_ARB_transform_feedback3	glcorearb.h	3179;"	d
GL_ARB_transform_feedback_instanced	glcorearb.h	3183;"	d
GL_ARB_uniform_buffer_object	glcorearb.h	3187;"	d
GL_ARB_vertex_array_bgra	glcorearb.h	3194;"	d
GL_ARB_vertex_array_object	glcorearb.h	3198;"	d
GL_ARB_vertex_attrib_64bit	glcorearb.h	3202;"	d
GL_ARB_vertex_attrib_binding	glcorearb.h	3206;"	d
GL_ARB_vertex_type_10f_11f_11f_rev	glcorearb.h	3210;"	d
GL_ARB_vertex_type_2_10_10_10_rev	glcorearb.h	3214;"	d
GL_ARB_viewport_array	glcorearb.h	3218;"	d
GL_ARRAY_BUFFER	glcorearb.h	625;"	d
GL_ARRAY_BUFFER_BINDING	glcorearb.h	627;"	d
GL_ARRAY_SIZE	glcorearb.h	2438;"	d
GL_ARRAY_STRIDE	glcorearb.h	2441;"	d
GL_ATOMIC_COUNTER_BARRIER_BIT	glcorearb.h	2147;"	d
GL_ATOMIC_COUNTER_BUFFER	glcorearb.h	2107;"	d
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS	glcorearb.h	2112;"	d
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES	glcorearb.h	2113;"	d
GL_ATOMIC_COUNTER_BUFFER_BINDING	glcorearb.h	2108;"	d
GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE	glcorearb.h	2111;"	d
GL_ATOMIC_COUNTER_BUFFER_INDEX	glcorearb.h	2444;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER	glcorearb.h	2265;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER	glcorearb.h	2118;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER	glcorearb.h	2117;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER	glcorearb.h	2115;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER	glcorearb.h	2116;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER	glcorearb.h	2114;"	d
GL_ATOMIC_COUNTER_BUFFER_SIZE	glcorearb.h	2110;"	d
GL_ATOMIC_COUNTER_BUFFER_START	glcorearb.h	2109;"	d
GL_ATTACHED_SHADERS	glcorearb.h	760;"	d
GL_AUTO_GENERATE_MIPMAP	glcorearb.h	2353;"	d
GL_BACK	glcorearb.h	234;"	d
GL_BACK_LEFT	glcorearb.h	231;"	d
GL_BACK_RIGHT	glcorearb.h	232;"	d
GL_BGR	glcorearb.h	456;"	d
GL_BGRA	glcorearb.h	457;"	d
GL_BGRA_INTEGER	glcorearb.h	1074;"	d
GL_BGR_INTEGER	glcorearb.h	1073;"	d
GL_BLEND	glcorearb.h	275;"	d
GL_BLEND_COLOR	glcorearb.h	2862;"	d
GL_BLEND_DST	glcorearb.h	273;"	d
GL_BLEND_DST_ALPHA	glcorearb.h	569;"	d
GL_BLEND_DST_RGB	glcorearb.h	567;"	d
GL_BLEND_EQUATION	glcorearb.h	2863;"	d
GL_BLEND_EQUATION_ALPHA	glcorearb.h	724;"	d
GL_BLEND_EQUATION_RGB	glcorearb.h	695;"	d
GL_BLEND_SRC	glcorearb.h	274;"	d
GL_BLEND_SRC_ALPHA	glcorearb.h	570;"	d
GL_BLEND_SRC_RGB	glcorearb.h	568;"	d
GL_BLOCK_INDEX	glcorearb.h	2440;"	d
GL_BLUE	glcorearb.h	357;"	d
GL_BLUE_INTEGER	glcorearb.h	1070;"	d
GL_BOOL	glcorearb.h	742;"	d
GL_BOOL_VEC2	glcorearb.h	743;"	d
GL_BOOL_VEC3	glcorearb.h	744;"	d
GL_BOOL_VEC4	glcorearb.h	745;"	d
GL_BUFFER	glcorearb.h	2296;"	d
GL_BUFFER_ACCESS	glcorearb.h	633;"	d
GL_BUFFER_ACCESS_FLAGS	glcorearb.h	1099;"	d
GL_BUFFER_BINDING	glcorearb.h	2445;"	d
GL_BUFFER_DATA_SIZE	glcorearb.h	2446;"	d
GL_BUFFER_IMMUTABLE_STORAGE	glcorearb.h	2593;"	d
GL_BUFFER_MAPPED	glcorearb.h	634;"	d
GL_BUFFER_MAP_LENGTH	glcorearb.h	1100;"	d
GL_BUFFER_MAP_OFFSET	glcorearb.h	1101;"	d
GL_BUFFER_MAP_POINTER	glcorearb.h	635;"	d
GL_BUFFER_SIZE	glcorearb.h	619;"	d
GL_BUFFER_STORAGE_FLAGS	glcorearb.h	2594;"	d
GL_BUFFER_UPDATE_BARRIER_BIT	glcorearb.h	2144;"	d
GL_BUFFER_USAGE	glcorearb.h	620;"	d
GL_BUFFER_VARIABLE	glcorearb.h	2417;"	d
GL_BYTE	glcorearb.h	323;"	d
GL_CAVEAT_SUPPORT	glcorearb.h	2385;"	d
GL_CCW	glcorearb.h	244;"	d
GL_CLAMP_READ_COLOR	glcorearb.h	1027;"	d
GL_CLAMP_TO_BORDER	glcorearb.h	542;"	d
GL_CLAMP_TO_EDGE	glcorearb.h	460;"	d
GL_CLEAR	glcorearb.h	333;"	d
GL_CLEAR_BUFFER	glcorearb.h	2381;"	d
GL_CLEAR_TEXTURE	glcorearb.h	2595;"	d
GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT	glcorearb.h	2592;"	d
GL_CLIENT_STORAGE_BIT	glcorearb.h	2591;"	d
GL_CLIP_DISTANCE0	glcorearb.h	1003;"	d
GL_CLIP_DISTANCE1	glcorearb.h	1004;"	d
GL_CLIP_DISTANCE2	glcorearb.h	1005;"	d
GL_CLIP_DISTANCE3	glcorearb.h	1006;"	d
GL_CLIP_DISTANCE4	glcorearb.h	1007;"	d
GL_CLIP_DISTANCE5	glcorearb.h	1008;"	d
GL_CLIP_DISTANCE6	glcorearb.h	1009;"	d
GL_CLIP_DISTANCE7	glcorearb.h	1010;"	d
GL_COLOR	glcorearb.h	350;"	d
GL_COLOR_ATTACHMENT0	glcorearb.h	1147;"	d
GL_COLOR_ATTACHMENT1	glcorearb.h	1148;"	d
GL_COLOR_ATTACHMENT10	glcorearb.h	1157;"	d
GL_COLOR_ATTACHMENT11	glcorearb.h	1158;"	d
GL_COLOR_ATTACHMENT12	glcorearb.h	1159;"	d
GL_COLOR_ATTACHMENT13	glcorearb.h	1160;"	d
GL_COLOR_ATTACHMENT14	glcorearb.h	1161;"	d
GL_COLOR_ATTACHMENT15	glcorearb.h	1162;"	d
GL_COLOR_ATTACHMENT2	glcorearb.h	1149;"	d
GL_COLOR_ATTACHMENT3	glcorearb.h	1150;"	d
GL_COLOR_ATTACHMENT4	glcorearb.h	1151;"	d
GL_COLOR_ATTACHMENT5	glcorearb.h	1152;"	d
GL_COLOR_ATTACHMENT6	glcorearb.h	1153;"	d
GL_COLOR_ATTACHMENT7	glcorearb.h	1154;"	d
GL_COLOR_ATTACHMENT8	glcorearb.h	1155;"	d
GL_COLOR_ATTACHMENT9	glcorearb.h	1156;"	d
GL_COLOR_BUFFER_BIT	glcorearb.h	198;"	d
GL_COLOR_CLEAR_VALUE	glcorearb.h	282;"	d
GL_COLOR_COMPONENTS	glcorearb.h	2335;"	d
GL_COLOR_ENCODING	glcorearb.h	2354;"	d
GL_COLOR_LOGIC_OP	glcorearb.h	277;"	d
GL_COLOR_RENDERABLE	glcorearb.h	2338;"	d
GL_COLOR_WRITEMASK	glcorearb.h	283;"	d
GL_COMMAND_BARRIER_BIT	glcorearb.h	2141;"	d
GL_COMPARE_REF_TO_TEXTURE	glcorearb.h	1002;"	d
GL_COMPATIBLE_SUBROUTINES	glcorearb.h	1744;"	d
GL_COMPILE_STATUS	glcorearb.h	756;"	d
GL_COMPRESSED_R11_EAC	glcorearb.h	2244;"	d
GL_COMPRESSED_RED	glcorearb.h	1016;"	d
GL_COMPRESSED_RED_RGTC1	glcorearb.h	1190;"	d
GL_COMPRESSED_RG	glcorearb.h	1017;"	d
GL_COMPRESSED_RG11_EAC	glcorearb.h	2246;"	d
GL_COMPRESSED_RGB	glcorearb.h	535;"	d
GL_COMPRESSED_RGB8_ETC2	glcorearb.h	2238;"	d
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2	glcorearb.h	2240;"	d
GL_COMPRESSED_RGBA	glcorearb.h	536;"	d
GL_COMPRESSED_RGBA8_ETC2_EAC	glcorearb.h	2242;"	d
GL_COMPRESSED_RGBA_ASTC_10x10_KHR	glcorearb.h	3238;"	d
GL_COMPRESSED_RGBA_ASTC_10x5_KHR	glcorearb.h	3235;"	d
GL_COMPRESSED_RGBA_ASTC_10x6_KHR	glcorearb.h	3236;"	d
GL_COMPRESSED_RGBA_ASTC_10x8_KHR	glcorearb.h	3237;"	d
GL_COMPRESSED_RGBA_ASTC_12x10_KHR	glcorearb.h	3239;"	d
GL_COMPRESSED_RGBA_ASTC_12x12_KHR	glcorearb.h	3240;"	d
GL_COMPRESSED_RGBA_ASTC_4x4_KHR	glcorearb.h	3227;"	d
GL_COMPRESSED_RGBA_ASTC_5x4_KHR	glcorearb.h	3228;"	d
GL_COMPRESSED_RGBA_ASTC_5x5_KHR	glcorearb.h	3229;"	d
GL_COMPRESSED_RGBA_ASTC_6x5_KHR	glcorearb.h	3230;"	d
GL_COMPRESSED_RGBA_ASTC_6x6_KHR	glcorearb.h	3231;"	d
GL_COMPRESSED_RGBA_ASTC_8x5_KHR	glcorearb.h	3232;"	d
GL_COMPRESSED_RGBA_ASTC_8x6_KHR	glcorearb.h	3233;"	d
GL_COMPRESSED_RGBA_ASTC_8x8_KHR	glcorearb.h	3234;"	d
GL_COMPRESSED_RGBA_BPTC_UNORM	glcorearb.h	2200;"	d
GL_COMPRESSED_RGBA_BPTC_UNORM_ARB	glcorearb.h	3096;"	d
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT	glcorearb.h	2202;"	d
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB	glcorearb.h	3098;"	d
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT	glcorearb.h	2203;"	d
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB	glcorearb.h	3099;"	d
GL_COMPRESSED_RG_RGTC2	glcorearb.h	1192;"	d
GL_COMPRESSED_SIGNED_R11_EAC	glcorearb.h	2245;"	d
GL_COMPRESSED_SIGNED_RED_RGTC1	glcorearb.h	1191;"	d
GL_COMPRESSED_SIGNED_RG11_EAC	glcorearb.h	2247;"	d
GL_COMPRESSED_SIGNED_RG_RGTC2	glcorearb.h	1193;"	d
GL_COMPRESSED_SRGB	glcorearb.h	981;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR	glcorearb.h	3252;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR	glcorearb.h	3249;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR	glcorearb.h	3250;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR	glcorearb.h	3251;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR	glcorearb.h	3253;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR	glcorearb.h	3254;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR	glcorearb.h	3241;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR	glcorearb.h	3242;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR	glcorearb.h	3243;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR	glcorearb.h	3244;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR	glcorearb.h	3245;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR	glcorearb.h	3246;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR	glcorearb.h	3247;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR	glcorearb.h	3248;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC	glcorearb.h	2243;"	d
GL_COMPRESSED_SRGB8_ETC2	glcorearb.h	2239;"	d
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2	glcorearb.h	2241;"	d
GL_COMPRESSED_SRGB_ALPHA	glcorearb.h	982;"	d
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM	glcorearb.h	2201;"	d
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB	glcorearb.h	3097;"	d
GL_COMPRESSED_TEXTURE_FORMATS	glcorearb.h	541;"	d
GL_COMPUTE_SHADER	glcorearb.h	2251;"	d
GL_COMPUTE_SHADER_BIT	glcorearb.h	2716;"	d
GL_COMPUTE_SUBROUTINE	glcorearb.h	2424;"	d
GL_COMPUTE_SUBROUTINE_UNIFORM	glcorearb.h	2430;"	d
GL_COMPUTE_TEXTURE	glcorearb.h	2363;"	d
GL_COMPUTE_WORK_GROUP_SIZE	glcorearb.h	2263;"	d
GL_CONDITION_SATISFIED	glcorearb.h	1558;"	d
GL_CONSTANT_ALPHA	glcorearb.h	590;"	d
GL_CONSTANT_COLOR	glcorearb.h	588;"	d
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT	glcorearb.h	1520;"	d
GL_CONTEXT_CORE_PROFILE_BIT	glcorearb.h	1519;"	d
GL_CONTEXT_FLAGS	glcorearb.h	1015;"	d
GL_CONTEXT_FLAG_DEBUG_BIT	glcorearb.h	2304;"	d
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT	glcorearb.h	1018;"	d
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB	glcorearb.h	2929;"	d
GL_CONTEXT_PROFILE_MASK	glcorearb.h	1540;"	d
GL_COPY	glcorearb.h	336;"	d
GL_COPY_INVERTED	glcorearb.h	345;"	d
GL_COPY_READ_BUFFER	glcorearb.h	1417;"	d
GL_COPY_READ_BUFFER_BINDING	glcorearb.h	2737;"	d
GL_COPY_WRITE_BUFFER	glcorearb.h	1418;"	d
GL_COPY_WRITE_BUFFER_BINDING	glcorearb.h	2738;"	d
GL_CULL_FACE	glcorearb.h	254;"	d
GL_CULL_FACE_MODE	glcorearb.h	255;"	d
GL_CURRENT_PROGRAM	glcorearb.h	768;"	d
GL_CURRENT_QUERY	glcorearb.h	622;"	d
GL_CURRENT_VERTEX_ATTRIB	glcorearb.h	700;"	d
GL_CW	glcorearb.h	243;"	d
GL_DEBUG_CALLBACK_FUNCTION	glcorearb.h	2270;"	d
GL_DEBUG_CALLBACK_FUNCTION_ARB	glcorearb.h	2750;"	d
GL_DEBUG_CALLBACK_USER_PARAM	glcorearb.h	2271;"	d
GL_DEBUG_CALLBACK_USER_PARAM_ARB	glcorearb.h	2751;"	d
GL_DEBUG_GROUP_STACK_DEPTH	glcorearb.h	2295;"	d
GL_DEBUG_LOGGED_MESSAGES	glcorearb.h	2286;"	d
GL_DEBUG_LOGGED_MESSAGES_ARB	glcorearb.h	2766;"	d
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH	glcorearb.h	2269;"	d
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB	glcorearb.h	2749;"	d
GL_DEBUG_OUTPUT	glcorearb.h	2303;"	d
GL_DEBUG_OUTPUT_SYNCHRONOUS	glcorearb.h	2268;"	d
GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB	glcorearb.h	2748;"	d
GL_DEBUG_SEVERITY_HIGH	glcorearb.h	2287;"	d
GL_DEBUG_SEVERITY_HIGH_ARB	glcorearb.h	2767;"	d
GL_DEBUG_SEVERITY_LOW	glcorearb.h	2289;"	d
GL_DEBUG_SEVERITY_LOW_ARB	glcorearb.h	2769;"	d
GL_DEBUG_SEVERITY_MEDIUM	glcorearb.h	2288;"	d
GL_DEBUG_SEVERITY_MEDIUM_ARB	glcorearb.h	2768;"	d
GL_DEBUG_SEVERITY_NOTIFICATION	glcorearb.h	2293;"	d
GL_DEBUG_SOURCE_API	glcorearb.h	2272;"	d
GL_DEBUG_SOURCE_API_ARB	glcorearb.h	2752;"	d
GL_DEBUG_SOURCE_APPLICATION	glcorearb.h	2276;"	d
GL_DEBUG_SOURCE_APPLICATION_ARB	glcorearb.h	2756;"	d
GL_DEBUG_SOURCE_OTHER	glcorearb.h	2277;"	d
GL_DEBUG_SOURCE_OTHER_ARB	glcorearb.h	2757;"	d
GL_DEBUG_SOURCE_SHADER_COMPILER	glcorearb.h	2274;"	d
GL_DEBUG_SOURCE_SHADER_COMPILER_ARB	glcorearb.h	2754;"	d
GL_DEBUG_SOURCE_THIRD_PARTY	glcorearb.h	2275;"	d
GL_DEBUG_SOURCE_THIRD_PARTY_ARB	glcorearb.h	2755;"	d
GL_DEBUG_SOURCE_WINDOW_SYSTEM	glcorearb.h	2273;"	d
GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB	glcorearb.h	2753;"	d
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR	glcorearb.h	2279;"	d
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB	glcorearb.h	2759;"	d
GL_DEBUG_TYPE_ERROR	glcorearb.h	2278;"	d
GL_DEBUG_TYPE_ERROR_ARB	glcorearb.h	2758;"	d
GL_DEBUG_TYPE_MARKER	glcorearb.h	2290;"	d
GL_DEBUG_TYPE_OTHER	glcorearb.h	2283;"	d
GL_DEBUG_TYPE_OTHER_ARB	glcorearb.h	2763;"	d
GL_DEBUG_TYPE_PERFORMANCE	glcorearb.h	2282;"	d
GL_DEBUG_TYPE_PERFORMANCE_ARB	glcorearb.h	2762;"	d
GL_DEBUG_TYPE_POP_GROUP	glcorearb.h	2292;"	d
GL_DEBUG_TYPE_PORTABILITY	glcorearb.h	2281;"	d
GL_DEBUG_TYPE_PORTABILITY_ARB	glcorearb.h	2761;"	d
GL_DEBUG_TYPE_PUSH_GROUP	glcorearb.h	2291;"	d
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR	glcorearb.h	2280;"	d
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB	glcorearb.h	2760;"	d
GL_DECR	glcorearb.h	367;"	d
GL_DECR_WRAP	glcorearb.h	579;"	d
GL_DELETE_STATUS	glcorearb.h	755;"	d
GL_DEPTH	glcorearb.h	351;"	d
GL_DEPTH24_STENCIL8	glcorearb.h	1120;"	d
GL_DEPTH32F_STENCIL8	glcorearb.h	1103;"	d
GL_DEPTH_ATTACHMENT	glcorearb.h	1163;"	d
GL_DEPTH_BUFFER_BIT	glcorearb.h	196;"	d
GL_DEPTH_CLAMP	glcorearb.h	1541;"	d
GL_DEPTH_CLEAR_VALUE	glcorearb.h	260;"	d
GL_DEPTH_COMPONENT	glcorearb.h	354;"	d
GL_DEPTH_COMPONENT16	glcorearb.h	572;"	d
GL_DEPTH_COMPONENT24	glcorearb.h	573;"	d
GL_DEPTH_COMPONENT32	glcorearb.h	574;"	d
GL_DEPTH_COMPONENT32F	glcorearb.h	1102;"	d
GL_DEPTH_COMPONENTS	glcorearb.h	2336;"	d
GL_DEPTH_FUNC	glcorearb.h	261;"	d
GL_DEPTH_RANGE	glcorearb.h	257;"	d
GL_DEPTH_RENDERABLE	glcorearb.h	2339;"	d
GL_DEPTH_STENCIL	glcorearb.h	1118;"	d
GL_DEPTH_STENCIL_ATTACHMENT	glcorearb.h	1116;"	d
GL_DEPTH_STENCIL_TEXTURE_MODE	glcorearb.h	2476;"	d
GL_DEPTH_TEST	glcorearb.h	258;"	d
GL_DEPTH_WRITEMASK	glcorearb.h	259;"	d
GL_DISPATCH_INDIRECT_BUFFER	glcorearb.h	2266;"	d
GL_DISPATCH_INDIRECT_BUFFER_BINDING	glcorearb.h	2267;"	d
GL_DITHER	glcorearb.h	272;"	d
GL_DONT_CARE	glcorearb.h	320;"	d
GL_DOUBLE	glcorearb.h	330;"	d
GL_DOUBLEBUFFER	glcorearb.h	284;"	d
GL_DOUBLE_MAT2	glcorearb.h	1727;"	d
GL_DOUBLE_MAT2x3	glcorearb.h	1730;"	d
GL_DOUBLE_MAT2x4	glcorearb.h	1731;"	d
GL_DOUBLE_MAT3	glcorearb.h	1728;"	d
GL_DOUBLE_MAT3x2	glcorearb.h	1732;"	d
GL_DOUBLE_MAT3x4	glcorearb.h	1733;"	d
GL_DOUBLE_MAT4	glcorearb.h	1729;"	d
GL_DOUBLE_MAT4x2	glcorearb.h	1734;"	d
GL_DOUBLE_MAT4x3	glcorearb.h	1735;"	d
GL_DOUBLE_VEC2	glcorearb.h	1724;"	d
GL_DOUBLE_VEC3	glcorearb.h	1725;"	d
GL_DOUBLE_VEC4	glcorearb.h	1726;"	d
GL_DRAW_BUFFER	glcorearb.h	278;"	d
GL_DRAW_BUFFER0	glcorearb.h	708;"	d
GL_DRAW_BUFFER1	glcorearb.h	709;"	d
GL_DRAW_BUFFER10	glcorearb.h	718;"	d
GL_DRAW_BUFFER11	glcorearb.h	719;"	d
GL_DRAW_BUFFER12	glcorearb.h	720;"	d
GL_DRAW_BUFFER13	glcorearb.h	721;"	d
GL_DRAW_BUFFER14	glcorearb.h	722;"	d
GL_DRAW_BUFFER15	glcorearb.h	723;"	d
GL_DRAW_BUFFER2	glcorearb.h	710;"	d
GL_DRAW_BUFFER3	glcorearb.h	711;"	d
GL_DRAW_BUFFER4	glcorearb.h	712;"	d
GL_DRAW_BUFFER5	glcorearb.h	713;"	d
GL_DRAW_BUFFER6	glcorearb.h	714;"	d
GL_DRAW_BUFFER7	glcorearb.h	715;"	d
GL_DRAW_BUFFER8	glcorearb.h	716;"	d
GL_DRAW_BUFFER9	glcorearb.h	717;"	d
GL_DRAW_FRAMEBUFFER	glcorearb.h	1132;"	d
GL_DRAW_FRAMEBUFFER_BINDING	glcorearb.h	1129;"	d
GL_DRAW_INDIRECT_BUFFER	glcorearb.h	1716;"	d
GL_DRAW_INDIRECT_BUFFER_BINDING	glcorearb.h	1717;"	d
GL_DST_ALPHA	glcorearb.h	223;"	d
GL_DST_COLOR	glcorearb.h	225;"	d
GL_DYNAMIC_COPY	glcorearb.h	644;"	d
GL_DYNAMIC_DRAW	glcorearb.h	642;"	d
GL_DYNAMIC_READ	glcorearb.h	643;"	d
GL_DYNAMIC_STORAGE_BIT	glcorearb.h	2590;"	d
GL_ELEMENT_ARRAY_BARRIER_BIT	glcorearb.h	2137;"	d
GL_ELEMENT_ARRAY_BUFFER	glcorearb.h	626;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	glcorearb.h	628;"	d
GL_EQUAL	glcorearb.h	211;"	d
GL_EQUIV	glcorearb.h	342;"	d
GL_EXTENSIONS	glcorearb.h	371;"	d
GL_FALSE	glcorearb.h	199;"	d
GL_FASTEST	glcorearb.h	321;"	d
GL_FILL	glcorearb.h	363;"	d
GL_FILTER	glcorearb.h	2357;"	d
GL_FIRST_VERTEX_CONVENTION	glcorearb.h	1543;"	d
GL_FIXED	glcorearb.h	1880;"	d
GL_FIXED_ONLY	glcorearb.h	1028;"	d
GL_FLOAT	glcorearb.h	329;"	d
GL_FLOAT_32_UNSIGNED_INT_24_8_REV	glcorearb.h	1104;"	d
GL_FLOAT_MAT2	glcorearb.h	746;"	d
GL_FLOAT_MAT2x3	glcorearb.h	971;"	d
GL_FLOAT_MAT2x4	glcorearb.h	972;"	d
GL_FLOAT_MAT3	glcorearb.h	747;"	d
GL_FLOAT_MAT3x2	glcorearb.h	973;"	d
GL_FLOAT_MAT3x4	glcorearb.h	974;"	d
GL_FLOAT_MAT4	glcorearb.h	748;"	d
GL_FLOAT_MAT4x2	glcorearb.h	975;"	d
GL_FLOAT_MAT4x3	glcorearb.h	976;"	d
GL_FLOAT_VEC2	glcorearb.h	736;"	d
GL_FLOAT_VEC3	glcorearb.h	737;"	d
GL_FLOAT_VEC4	glcorearb.h	738;"	d
GL_FRACTIONAL_EVEN	glcorearb.h	1756;"	d
GL_FRACTIONAL_ODD	glcorearb.h	1755;"	d
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS	glcorearb.h	1722;"	d
GL_FRAGMENT_SHADER	glcorearb.h	728;"	d
GL_FRAGMENT_SHADER_BIT	glcorearb.h	1901;"	d
GL_FRAGMENT_SHADER_DERIVATIVE_HINT	glcorearb.h	766;"	d
GL_FRAGMENT_SUBROUTINE	glcorearb.h	2423;"	d
GL_FRAGMENT_SUBROUTINE_UNIFORM	glcorearb.h	2429;"	d
GL_FRAGMENT_TEXTURE	glcorearb.h	2362;"	d
GL_FRAMEBUFFER	glcorearb.h	1165;"	d
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE	glcorearb.h	1111;"	d
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE	glcorearb.h	1110;"	d
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING	glcorearb.h	1106;"	d
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE	glcorearb.h	1107;"	d
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE	glcorearb.h	1112;"	d
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE	glcorearb.h	1109;"	d
GL_FRAMEBUFFER_ATTACHMENT_LAYERED	glcorearb.h	1527;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME	glcorearb.h	1136;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE	glcorearb.h	1135;"	d
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE	glcorearb.h	1108;"	d
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE	glcorearb.h	1113;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE	glcorearb.h	1138;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER	glcorearb.h	1139;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL	glcorearb.h	1137;"	d
GL_FRAMEBUFFER_BARRIER_BIT	glcorearb.h	2145;"	d
GL_FRAMEBUFFER_BINDING	glcorearb.h	1128;"	d
GL_FRAMEBUFFER_BLEND	glcorearb.h	2343;"	d
GL_FRAMEBUFFER_COMPLETE	glcorearb.h	1140;"	d
GL_FRAMEBUFFER_DEFAULT	glcorearb.h	1114;"	d
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS	glcorearb.h	2310;"	d
GL_FRAMEBUFFER_DEFAULT_HEIGHT	glcorearb.h	2307;"	d
GL_FRAMEBUFFER_DEFAULT_LAYERS	glcorearb.h	2308;"	d
GL_FRAMEBUFFER_DEFAULT_SAMPLES	glcorearb.h	2309;"	d
GL_FRAMEBUFFER_DEFAULT_WIDTH	glcorearb.h	2306;"	d
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT	glcorearb.h	1141;"	d
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER	glcorearb.h	1143;"	d
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS	glcorearb.h	1528;"	d
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	glcorearb.h	1142;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE	glcorearb.h	1180;"	d
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER	glcorearb.h	1144;"	d
GL_FRAMEBUFFER_RENDERABLE	glcorearb.h	2341;"	d
GL_FRAMEBUFFER_RENDERABLE_LAYERED	glcorearb.h	2342;"	d
GL_FRAMEBUFFER_SRGB	glcorearb.h	1182;"	d
GL_FRAMEBUFFER_UNDEFINED	glcorearb.h	1115;"	d
GL_FRAMEBUFFER_UNSUPPORTED	glcorearb.h	1145;"	d
GL_FRONT	glcorearb.h	233;"	d
GL_FRONT_AND_BACK	glcorearb.h	237;"	d
GL_FRONT_FACE	glcorearb.h	256;"	d
GL_FRONT_LEFT	glcorearb.h	229;"	d
GL_FRONT_RIGHT	glcorearb.h	230;"	d
GL_FULL_SUPPORT	glcorearb.h	2384;"	d
GL_FUNC_ADD	glcorearb.h	583;"	d
GL_FUNC_REVERSE_SUBTRACT	glcorearb.h	585;"	d
GL_FUNC_SUBTRACT	glcorearb.h	584;"	d
GL_GEOMETRY_INPUT_TYPE	glcorearb.h	1531;"	d
GL_GEOMETRY_OUTPUT_TYPE	glcorearb.h	1532;"	d
GL_GEOMETRY_SHADER	glcorearb.h	1529;"	d
GL_GEOMETRY_SHADER_BIT	glcorearb.h	1902;"	d
GL_GEOMETRY_SHADER_INVOCATIONS	glcorearb.h	1718;"	d
GL_GEOMETRY_SUBROUTINE	glcorearb.h	2422;"	d
GL_GEOMETRY_SUBROUTINE_UNIFORM	glcorearb.h	2428;"	d
GL_GEOMETRY_TEXTURE	glcorearb.h	2361;"	d
GL_GEOMETRY_VERTICES_OUT	glcorearb.h	1530;"	d
GL_GEQUAL	glcorearb.h	215;"	d
GL_GET_TEXTURE_IMAGE_FORMAT	glcorearb.h	2349;"	d
GL_GET_TEXTURE_IMAGE_TYPE	glcorearb.h	2350;"	d
GL_GREATER	glcorearb.h	213;"	d
GL_GREEN	glcorearb.h	356;"	d
GL_GREEN_INTEGER	glcorearb.h	1069;"	d
GL_GUILTY_CONTEXT_RESET_ARB	glcorearb.h	2931;"	d
GL_HALF_FLOAT	glcorearb.h	1183;"	d
GL_HIGH_FLOAT	glcorearb.h	1885;"	d
GL_HIGH_INT	glcorearb.h	1888;"	d
GL_IMAGE_1D	glcorearb.h	2156;"	d
GL_IMAGE_1D_ARRAY	glcorearb.h	2162;"	d
GL_IMAGE_2D	glcorearb.h	2157;"	d
GL_IMAGE_2D_ARRAY	glcorearb.h	2163;"	d
GL_IMAGE_2D_MULTISAMPLE	glcorearb.h	2165;"	d
GL_IMAGE_2D_MULTISAMPLE_ARRAY	glcorearb.h	2166;"	d
GL_IMAGE_2D_RECT	glcorearb.h	2159;"	d
GL_IMAGE_3D	glcorearb.h	2158;"	d
GL_IMAGE_BINDING_ACCESS	glcorearb.h	2155;"	d
GL_IMAGE_BINDING_FORMAT	glcorearb.h	2190;"	d
GL_IMAGE_BINDING_LAYER	glcorearb.h	2154;"	d
GL_IMAGE_BINDING_LAYERED	glcorearb.h	2153;"	d
GL_IMAGE_BINDING_LEVEL	glcorearb.h	2152;"	d
GL_IMAGE_BINDING_NAME	glcorearb.h	2151;"	d
GL_IMAGE_BUFFER	glcorearb.h	2161;"	d
GL_IMAGE_CLASS_10_10_10_2	glcorearb.h	2396;"	d
GL_IMAGE_CLASS_11_11_10	glcorearb.h	2395;"	d
GL_IMAGE_CLASS_1_X_16	glcorearb.h	2391;"	d
GL_IMAGE_CLASS_1_X_32	glcorearb.h	2388;"	d
GL_IMAGE_CLASS_1_X_8	glcorearb.h	2394;"	d
GL_IMAGE_CLASS_2_X_16	glcorearb.h	2390;"	d
GL_IMAGE_CLASS_2_X_32	glcorearb.h	2387;"	d
GL_IMAGE_CLASS_2_X_8	glcorearb.h	2393;"	d
GL_IMAGE_CLASS_4_X_16	glcorearb.h	2389;"	d
GL_IMAGE_CLASS_4_X_32	glcorearb.h	2386;"	d
GL_IMAGE_CLASS_4_X_8	glcorearb.h	2392;"	d
GL_IMAGE_COMPATIBILITY_CLASS	glcorearb.h	2371;"	d
GL_IMAGE_CUBE	glcorearb.h	2160;"	d
GL_IMAGE_CUBE_MAP_ARRAY	glcorearb.h	2164;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS	glcorearb.h	2193;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE	glcorearb.h	2192;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE	glcorearb.h	2191;"	d
GL_IMAGE_PIXEL_FORMAT	glcorearb.h	2372;"	d
GL_IMAGE_PIXEL_TYPE	glcorearb.h	2373;"	d
GL_IMAGE_TEXEL_SIZE	glcorearb.h	2370;"	d
GL_IMPLEMENTATION_COLOR_READ_FORMAT	glcorearb.h	1882;"	d
GL_IMPLEMENTATION_COLOR_READ_TYPE	glcorearb.h	1881;"	d
GL_INCR	glcorearb.h	366;"	d
GL_INCR_WRAP	glcorearb.h	578;"	d
GL_INFO_LOG_LENGTH	glcorearb.h	759;"	d
GL_INNOCENT_CONTEXT_RESET_ARB	glcorearb.h	2932;"	d
GL_INT	glcorearb.h	327;"	d
GL_INTERLEAVED_ATTRIBS	glcorearb.h	1052;"	d
GL_INTERNALFORMAT_ALPHA_SIZE	glcorearb.h	2320;"	d
GL_INTERNALFORMAT_ALPHA_TYPE	glcorearb.h	2327;"	d
GL_INTERNALFORMAT_BLUE_SIZE	glcorearb.h	2319;"	d
GL_INTERNALFORMAT_BLUE_TYPE	glcorearb.h	2326;"	d
GL_INTERNALFORMAT_DEPTH_SIZE	glcorearb.h	2321;"	d
GL_INTERNALFORMAT_DEPTH_TYPE	glcorearb.h	2328;"	d
GL_INTERNALFORMAT_GREEN_SIZE	glcorearb.h	2318;"	d
GL_INTERNALFORMAT_GREEN_TYPE	glcorearb.h	2325;"	d
GL_INTERNALFORMAT_PREFERRED	glcorearb.h	2316;"	d
GL_INTERNALFORMAT_RED_SIZE	glcorearb.h	2317;"	d
GL_INTERNALFORMAT_RED_TYPE	glcorearb.h	2324;"	d
GL_INTERNALFORMAT_SHARED_SIZE	glcorearb.h	2323;"	d
GL_INTERNALFORMAT_STENCIL_SIZE	glcorearb.h	2322;"	d
GL_INTERNALFORMAT_STENCIL_TYPE	glcorearb.h	2329;"	d
GL_INTERNALFORMAT_SUPPORTED	glcorearb.h	2315;"	d
GL_INT_2_10_10_10_REV	glcorearb.h	1642;"	d
GL_INT_IMAGE_1D	glcorearb.h	2167;"	d
GL_INT_IMAGE_1D_ARRAY	glcorearb.h	2173;"	d
GL_INT_IMAGE_2D	glcorearb.h	2168;"	d
GL_INT_IMAGE_2D_ARRAY	glcorearb.h	2174;"	d
GL_INT_IMAGE_2D_MULTISAMPLE	glcorearb.h	2176;"	d
GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY	glcorearb.h	2177;"	d
GL_INT_IMAGE_2D_RECT	glcorearb.h	2170;"	d
GL_INT_IMAGE_3D	glcorearb.h	2169;"	d
GL_INT_IMAGE_BUFFER	glcorearb.h	2172;"	d
GL_INT_IMAGE_CUBE	glcorearb.h	2171;"	d
GL_INT_IMAGE_CUBE_MAP_ARRAY	glcorearb.h	2175;"	d
GL_INT_SAMPLER_1D	glcorearb.h	1083;"	d
GL_INT_SAMPLER_1D_ARRAY	glcorearb.h	1087;"	d
GL_INT_SAMPLER_2D	glcorearb.h	1084;"	d
GL_INT_SAMPLER_2D_ARRAY	glcorearb.h	1088;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE	glcorearb.h	1575;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	glcorearb.h	1578;"	d
GL_INT_SAMPLER_2D_RECT	glcorearb.h	1394;"	d
GL_INT_SAMPLER_3D	glcorearb.h	1085;"	d
GL_INT_SAMPLER_BUFFER	glcorearb.h	1395;"	d
GL_INT_SAMPLER_CUBE	glcorearb.h	1086;"	d
GL_INT_SAMPLER_CUBE_MAP_ARRAY	glcorearb.h	1714;"	d
GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB	glcorearb.h	3113;"	d
GL_INT_VEC2	glcorearb.h	739;"	d
GL_INT_VEC3	glcorearb.h	740;"	d
GL_INT_VEC4	glcorearb.h	741;"	d
GL_INVALID_ENUM	glcorearb.h	239;"	d
GL_INVALID_FRAMEBUFFER_OPERATION	glcorearb.h	1105;"	d
GL_INVALID_INDEX	glcorearb.h	1448;"	d
GL_INVALID_OPERATION	glcorearb.h	241;"	d
GL_INVALID_VALUE	glcorearb.h	240;"	d
GL_INVERT	glcorearb.h	343;"	d
GL_ISOLINES	glcorearb.h	1754;"	d
GL_IS_PER_PATCH	glcorearb.h	2459;"	d
GL_IS_ROW_MAJOR	glcorearb.h	2443;"	d
GL_KEEP	glcorearb.h	364;"	d
GL_KHR_debug	glcorearb.h	3222;"	d
GL_KHR_texture_compression_astc_hdr	glcorearb.h	3226;"	d
GL_KHR_texture_compression_astc_ldr	glcorearb.h	3258;"	d
GL_LAST_VERTEX_CONVENTION	glcorearb.h	1544;"	d
GL_LAYER_PROVOKING_VERTEX	glcorearb.h	1912;"	d
GL_LEFT	glcorearb.h	235;"	d
GL_LEQUAL	glcorearb.h	212;"	d
GL_LESS	glcorearb.h	210;"	d
GL_LINE	glcorearb.h	362;"	d
GL_LINEAR	glcorearb.h	373;"	d
GL_LINEAR_MIPMAP_LINEAR	glcorearb.h	377;"	d
GL_LINEAR_MIPMAP_NEAREST	glcorearb.h	375;"	d
GL_LINES	glcorearb.h	202;"	d
GL_LINES_ADJACENCY	glcorearb.h	1521;"	d
GL_LINE_LOOP	glcorearb.h	203;"	d
GL_LINE_SMOOTH	glcorearb.h	248;"	d
GL_LINE_SMOOTH_HINT	glcorearb.h	286;"	d
GL_LINE_STRIP	glcorearb.h	204;"	d
GL_LINE_STRIP_ADJACENCY	glcorearb.h	1522;"	d
GL_LINE_WIDTH	glcorearb.h	249;"	d
GL_LINE_WIDTH_GRANULARITY	glcorearb.h	251;"	d
GL_LINE_WIDTH_RANGE	glcorearb.h	250;"	d
GL_LINK_STATUS	glcorearb.h	757;"	d
GL_LOCATION	glcorearb.h	2457;"	d
GL_LOCATION_COMPONENT	glcorearb.h	2596;"	d
GL_LOCATION_INDEX	glcorearb.h	2458;"	d
GL_LOGIC_OP_MODE	glcorearb.h	276;"	d
GL_LOSE_CONTEXT_ON_RESET_ARB	glcorearb.h	2930;"	d
GL_LOWER_LEFT	glcorearb.h	770;"	d
GL_LOW_FLOAT	glcorearb.h	1883;"	d
GL_LOW_INT	glcorearb.h	1886;"	d
GL_MAJOR_VERSION	glcorearb.h	1012;"	d
GL_MANUAL_GENERATE_MIPMAP	glcorearb.h	2352;"	d
GL_MAP_COHERENT_BIT	glcorearb.h	2589;"	d
GL_MAP_FLUSH_EXPLICIT_BIT	glcorearb.h	1188;"	d
GL_MAP_INVALIDATE_BUFFER_BIT	glcorearb.h	1187;"	d
GL_MAP_INVALIDATE_RANGE_BIT	glcorearb.h	1186;"	d
GL_MAP_PERSISTENT_BIT	glcorearb.h	2588;"	d
GL_MAP_READ_BIT	glcorearb.h	1184;"	d
GL_MAP_UNSYNCHRONIZED_BIT	glcorearb.h	1189;"	d
GL_MAP_WRITE_BIT	glcorearb.h	1185;"	d
GL_MATRIX_STRIDE	glcorearb.h	2442;"	d
GL_MAX	glcorearb.h	587;"	d
GL_MAX_3D_TEXTURE_SIZE	glcorearb.h	448;"	d
GL_MAX_ARRAY_TEXTURE_LAYERS	glcorearb.h	1024;"	d
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS	glcorearb.h	2132;"	d
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE	glcorearb.h	2131;"	d
GL_MAX_CLIP_DISTANCES	glcorearb.h	1011;"	d
GL_MAX_COLOR_ATTACHMENTS	glcorearb.h	1146;"	d
GL_MAX_COLOR_TEXTURE_SAMPLES	glcorearb.h	1580;"	d
GL_MAX_COMBINED_ATOMIC_COUNTERS	glcorearb.h	2130;"	d
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS	glcorearb.h	2124;"	d
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS	glcorearb.h	2259;"	d
GL_MAX_COMBINED_DIMENSIONS	glcorearb.h	2334;"	d
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS	glcorearb.h	1429;"	d
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS	glcorearb.h	3189;"	d
GL_MAX_COMBINED_IMAGE_UNIFORMS	glcorearb.h	2199;"	d
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS	glcorearb.h	2150;"	d
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES	glcorearb.h	2475;"	d
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS	glcorearb.h	2470;"	d
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS	glcorearb.h	1771;"	d
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS	glcorearb.h	1772;"	d
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	glcorearb.h	734;"	d
GL_MAX_COMBINED_UNIFORM_BLOCKS	glcorearb.h	1425;"	d
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS	glcorearb.h	1428;"	d
GL_MAX_COMPUTE_ATOMIC_COUNTERS	glcorearb.h	2258;"	d
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS	glcorearb.h	2257;"	d
GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB	glcorearb.h	2722;"	d
GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB	glcorearb.h	2724;"	d
GL_MAX_COMPUTE_IMAGE_UNIFORMS	glcorearb.h	2254;"	d
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS	glcorearb.h	2469;"	d
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE	glcorearb.h	2255;"	d
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS	glcorearb.h	2253;"	d
GL_MAX_COMPUTE_UNIFORM_BLOCKS	glcorearb.h	2252;"	d
GL_MAX_COMPUTE_UNIFORM_COMPONENTS	glcorearb.h	2256;"	d
GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB	glcorearb.h	2721;"	d
GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB	glcorearb.h	2723;"	d
GL_MAX_COMPUTE_WORK_GROUP_COUNT	glcorearb.h	2261;"	d
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS	glcorearb.h	2260;"	d
GL_MAX_COMPUTE_WORK_GROUP_SIZE	glcorearb.h	2262;"	d
GL_MAX_CUBE_MAP_TEXTURE_SIZE	glcorearb.h	534;"	d
GL_MAX_DEBUG_GROUP_STACK_DEPTH	glcorearb.h	2294;"	d
GL_MAX_DEBUG_LOGGED_MESSAGES	glcorearb.h	2285;"	d
GL_MAX_DEBUG_LOGGED_MESSAGES_ARB	glcorearb.h	2765;"	d
GL_MAX_DEBUG_MESSAGE_LENGTH	glcorearb.h	2284;"	d
GL_MAX_DEBUG_MESSAGE_LENGTH_ARB	glcorearb.h	2764;"	d
GL_MAX_DEPTH	glcorearb.h	2332;"	d
GL_MAX_DEPTH_TEXTURE_SAMPLES	glcorearb.h	1581;"	d
GL_MAX_DRAW_BUFFERS	glcorearb.h	707;"	d
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS	glcorearb.h	1631;"	d
GL_MAX_ELEMENTS_INDICES	glcorearb.h	459;"	d
GL_MAX_ELEMENTS_VERTICES	glcorearb.h	458;"	d
GL_MAX_ELEMENT_INDEX	glcorearb.h	2250;"	d
GL_MAX_FRAGMENT_ATOMIC_COUNTERS	glcorearb.h	2129;"	d
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS	glcorearb.h	2123;"	d
GL_MAX_FRAGMENT_IMAGE_UNIFORMS	glcorearb.h	2198;"	d
GL_MAX_FRAGMENT_INPUT_COMPONENTS	glcorearb.h	1539;"	d
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET	glcorearb.h	1721;"	d
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS	glcorearb.h	2468;"	d
GL_MAX_FRAGMENT_UNIFORM_BLOCKS	glcorearb.h	1424;"	d
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS	glcorearb.h	730;"	d
GL_MAX_FRAGMENT_UNIFORM_VECTORS	glcorearb.h	1894;"	d
GL_MAX_FRAMEBUFFER_HEIGHT	glcorearb.h	2312;"	d
GL_MAX_FRAMEBUFFER_LAYERS	glcorearb.h	2313;"	d
GL_MAX_FRAMEBUFFER_SAMPLES	glcorearb.h	2314;"	d
GL_MAX_FRAMEBUFFER_WIDTH	glcorearb.h	2311;"	d
GL_MAX_GEOMETRY_ATOMIC_COUNTERS	glcorearb.h	2128;"	d
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS	glcorearb.h	2122;"	d
GL_MAX_GEOMETRY_IMAGE_UNIFORMS	glcorearb.h	2197;"	d
GL_MAX_GEOMETRY_INPUT_COMPONENTS	glcorearb.h	1537;"	d
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS	glcorearb.h	1538;"	d
GL_MAX_GEOMETRY_OUTPUT_VERTICES	glcorearb.h	1534;"	d
GL_MAX_GEOMETRY_SHADER_INVOCATIONS	glcorearb.h	1719;"	d
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS	glcorearb.h	2465;"	d
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS	glcorearb.h	1526;"	d
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS	glcorearb.h	1535;"	d
GL_MAX_GEOMETRY_UNIFORM_BLOCKS	glcorearb.h	3188;"	d
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS	glcorearb.h	1533;"	d
GL_MAX_HEIGHT	glcorearb.h	2331;"	d
GL_MAX_IMAGE_SAMPLES	glcorearb.h	2189;"	d
GL_MAX_IMAGE_UNITS	glcorearb.h	2149;"	d
GL_MAX_INTEGER_SAMPLES	glcorearb.h	1582;"	d
GL_MAX_LABEL_LENGTH	glcorearb.h	2302;"	d
GL_MAX_LAYERS	glcorearb.h	2333;"	d
GL_MAX_NAME_LENGTH	glcorearb.h	2433;"	d
GL_MAX_NUM_ACTIVE_VARIABLES	glcorearb.h	2434;"	d
GL_MAX_NUM_COMPATIBLE_SUBROUTINES	glcorearb.h	2435;"	d
GL_MAX_PATCH_VERTICES	glcorearb.h	1757;"	d
GL_MAX_PROGRAM_TEXEL_OFFSET	glcorearb.h	1026;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB	glcorearb.h	3121;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET	glcorearb.h	1708;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB	glcorearb.h	3120;"	d
GL_MAX_RECTANGLE_TEXTURE_SIZE	glcorearb.h	1405;"	d
GL_MAX_RENDERBUFFER_SIZE	glcorearb.h	1117;"	d
GL_MAX_SAMPLES	glcorearb.h	1181;"	d
GL_MAX_SAMPLE_MASK_WORDS	glcorearb.h	1565;"	d
GL_MAX_SERVER_WAIT_TIMEOUT	glcorearb.h	1547;"	d
GL_MAX_SHADER_STORAGE_BLOCK_SIZE	glcorearb.h	2472;"	d
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS	glcorearb.h	2471;"	d
GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB	glcorearb.h	3065;"	d
GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB	glcorearb.h	3066;"	d
GL_MAX_SPARSE_TEXTURE_SIZE_ARB	glcorearb.h	3064;"	d
GL_MAX_SUBROUTINES	glcorearb.h	1741;"	d
GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS	glcorearb.h	1742;"	d
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS	glcorearb.h	2126;"	d
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS	glcorearb.h	2120;"	d
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS	glcorearb.h	2195;"	d
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS	glcorearb.h	1769;"	d
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS	glcorearb.h	1763;"	d
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS	glcorearb.h	2466;"	d
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS	glcorearb.h	1761;"	d
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS	glcorearb.h	1765;"	d
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS	glcorearb.h	1767;"	d
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS	glcorearb.h	1759;"	d
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS	glcorearb.h	2127;"	d
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS	glcorearb.h	2121;"	d
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS	glcorearb.h	2196;"	d
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS	glcorearb.h	1770;"	d
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS	glcorearb.h	1766;"	d
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS	glcorearb.h	2467;"	d
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS	glcorearb.h	1762;"	d
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS	glcorearb.h	1768;"	d
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS	glcorearb.h	1760;"	d
GL_MAX_TESS_GEN_LEVEL	glcorearb.h	1758;"	d
GL_MAX_TESS_PATCH_COMPONENTS	glcorearb.h	1764;"	d
GL_MAX_TEXTURE_BUFFER_SIZE	glcorearb.h	1399;"	d
GL_MAX_TEXTURE_IMAGE_UNITS	glcorearb.h	727;"	d
GL_MAX_TEXTURE_LOD_BIAS	glcorearb.h	576;"	d
GL_MAX_TEXTURE_SIZE	glcorearb.h	300;"	d
GL_MAX_TRANSFORM_FEEDBACK_BUFFERS	glcorearb.h	1781;"	d
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS	glcorearb.h	1050;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS	glcorearb.h	1051;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS	glcorearb.h	1043;"	d
GL_MAX_UNIFORM_BLOCK_SIZE	glcorearb.h	1427;"	d
GL_MAX_UNIFORM_BUFFER_BINDINGS	glcorearb.h	1426;"	d
GL_MAX_UNIFORM_LOCATIONS	glcorearb.h	2305;"	d
GL_MAX_VARYING_COMPONENTS	glcorearb.h	1029;"	d
GL_MAX_VARYING_FLOATS	glcorearb.h	732;"	d
GL_MAX_VARYING_VECTORS	glcorearb.h	1893;"	d
GL_MAX_VERTEX_ATOMIC_COUNTERS	glcorearb.h	2125;"	d
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS	glcorearb.h	2119;"	d
GL_MAX_VERTEX_ATTRIBS	glcorearb.h	725;"	d
GL_MAX_VERTEX_ATTRIB_BINDINGS	glcorearb.h	2491;"	d
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET	glcorearb.h	2490;"	d
GL_MAX_VERTEX_ATTRIB_STRIDE	glcorearb.h	2585;"	d
GL_MAX_VERTEX_IMAGE_UNIFORMS	glcorearb.h	2194;"	d
GL_MAX_VERTEX_OUTPUT_COMPONENTS	glcorearb.h	1536;"	d
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS	glcorearb.h	2464;"	d
GL_MAX_VERTEX_STREAMS	glcorearb.h	1723;"	d
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	glcorearb.h	733;"	d
GL_MAX_VERTEX_UNIFORM_BLOCKS	glcorearb.h	1423;"	d
GL_MAX_VERTEX_UNIFORM_COMPONENTS	glcorearb.h	731;"	d
GL_MAX_VERTEX_UNIFORM_VECTORS	glcorearb.h	1892;"	d
GL_MAX_VIEWPORTS	glcorearb.h	1909;"	d
GL_MAX_VIEWPORT_DIMS	glcorearb.h	301;"	d
GL_MAX_WIDTH	glcorearb.h	2330;"	d
GL_MEDIUM_FLOAT	glcorearb.h	1884;"	d
GL_MEDIUM_INT	glcorearb.h	1887;"	d
GL_MIN	glcorearb.h	586;"	d
GL_MINOR_VERSION	glcorearb.h	1013;"	d
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET	glcorearb.h	1720;"	d
GL_MIN_MAP_BUFFER_ALIGNMENT	glcorearb.h	2106;"	d
GL_MIN_PROGRAM_TEXEL_OFFSET	glcorearb.h	1025;"	d
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET	glcorearb.h	1707;"	d
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB	glcorearb.h	3119;"	d
GL_MIN_SAMPLE_SHADING_VALUE	glcorearb.h	1706;"	d
GL_MIN_SAMPLE_SHADING_VALUE_ARB	glcorearb.h	2963;"	d
GL_MIN_SPARSE_LEVEL_ARB	glcorearb.h	3059;"	d
GL_MIPMAP	glcorearb.h	2351;"	d
GL_MIRRORED_REPEAT	glcorearb.h	575;"	d
GL_MIRROR_CLAMP_TO_EDGE	glcorearb.h	2603;"	d
GL_MULTISAMPLE	glcorearb.h	517;"	d
GL_NAMED_STRING_LENGTH_ARB	glcorearb.h	3033;"	d
GL_NAMED_STRING_TYPE_ARB	glcorearb.h	3034;"	d
GL_NAME_LENGTH	glcorearb.h	2436;"	d
GL_NAND	glcorearb.h	347;"	d
GL_NEAREST	glcorearb.h	372;"	d
GL_NEAREST_MIPMAP_LINEAR	glcorearb.h	376;"	d
GL_NEAREST_MIPMAP_NEAREST	glcorearb.h	374;"	d
GL_NEVER	glcorearb.h	209;"	d
GL_NICEST	glcorearb.h	322;"	d
GL_NONE	glcorearb.h	228;"	d
GL_NOOP	glcorearb.h	338;"	d
GL_NOR	glcorearb.h	341;"	d
GL_NOTEQUAL	glcorearb.h	214;"	d
GL_NO_ERROR	glcorearb.h	238;"	d
GL_NO_RESET_NOTIFICATION_ARB	glcorearb.h	2935;"	d
GL_NUM_ACTIVE_VARIABLES	glcorearb.h	2447;"	d
GL_NUM_COMPATIBLE_SUBROUTINES	glcorearb.h	1743;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	glcorearb.h	540;"	d
GL_NUM_EXTENSIONS	glcorearb.h	1014;"	d
GL_NUM_PROGRAM_BINARY_FORMATS	glcorearb.h	1898;"	d
GL_NUM_SAMPLE_COUNTS	glcorearb.h	2105;"	d
GL_NUM_SHADER_BINARY_FORMATS	glcorearb.h	1891;"	d
GL_NUM_SHADING_LANGUAGE_VERSIONS	glcorearb.h	2236;"	d
GL_NUM_VIRTUAL_PAGE_SIZES_ARB	glcorearb.h	3060;"	d
GL_OBJECT_TYPE	glcorearb.h	1548;"	d
GL_OFFSET	glcorearb.h	2439;"	d
GL_ONE	glcorearb.h	218;"	d
GL_ONE_MINUS_CONSTANT_ALPHA	glcorearb.h	591;"	d
GL_ONE_MINUS_CONSTANT_COLOR	glcorearb.h	589;"	d
GL_ONE_MINUS_DST_ALPHA	glcorearb.h	224;"	d
GL_ONE_MINUS_DST_COLOR	glcorearb.h	226;"	d
GL_ONE_MINUS_SRC1_ALPHA	glcorearb.h	1630;"	d
GL_ONE_MINUS_SRC1_COLOR	glcorearb.h	1629;"	d
GL_ONE_MINUS_SRC_ALPHA	glcorearb.h	222;"	d
GL_ONE_MINUS_SRC_COLOR	glcorearb.h	220;"	d
GL_OR	glcorearb.h	340;"	d
GL_OR_INVERTED	glcorearb.h	346;"	d
GL_OR_REVERSE	glcorearb.h	344;"	d
GL_OUT_OF_MEMORY	glcorearb.h	242;"	d
GL_PACK_ALIGNMENT	glcorearb.h	299;"	d
GL_PACK_COMPRESSED_BLOCK_DEPTH	glcorearb.h	2103;"	d
GL_PACK_COMPRESSED_BLOCK_HEIGHT	glcorearb.h	2102;"	d
GL_PACK_COMPRESSED_BLOCK_SIZE	glcorearb.h	2104;"	d
GL_PACK_COMPRESSED_BLOCK_WIDTH	glcorearb.h	2101;"	d
GL_PACK_IMAGE_HEIGHT	glcorearb.h	441;"	d
GL_PACK_LSB_FIRST	glcorearb.h	295;"	d
GL_PACK_ROW_LENGTH	glcorearb.h	296;"	d
GL_PACK_SKIP_IMAGES	glcorearb.h	440;"	d
GL_PACK_SKIP_PIXELS	glcorearb.h	298;"	d
GL_PACK_SKIP_ROWS	glcorearb.h	297;"	d
GL_PACK_SWAP_BYTES	glcorearb.h	294;"	d
GL_PARAMETER_BUFFER_ARB	glcorearb.h	2868;"	d
GL_PARAMETER_BUFFER_BINDING_ARB	glcorearb.h	2869;"	d
GL_PATCHES	glcorearb.h	1745;"	d
GL_PATCH_DEFAULT_INNER_LEVEL	glcorearb.h	1747;"	d
GL_PATCH_DEFAULT_OUTER_LEVEL	glcorearb.h	1748;"	d
GL_PATCH_VERTICES	glcorearb.h	1746;"	d
GL_PIXEL_BUFFER_BARRIER_BIT	glcorearb.h	2142;"	d
GL_PIXEL_PACK_BUFFER	glcorearb.h	967;"	d
GL_PIXEL_PACK_BUFFER_BINDING	glcorearb.h	969;"	d
GL_PIXEL_UNPACK_BUFFER	glcorearb.h	968;"	d
GL_PIXEL_UNPACK_BUFFER_BINDING	glcorearb.h	970;"	d
GL_POINT	glcorearb.h	361;"	d
GL_POINTS	glcorearb.h	201;"	d
GL_POINT_FADE_THRESHOLD_SIZE	glcorearb.h	571;"	d
GL_POINT_SIZE	glcorearb.h	245;"	d
GL_POINT_SIZE_GRANULARITY	glcorearb.h	247;"	d
GL_POINT_SIZE_RANGE	glcorearb.h	246;"	d
GL_POINT_SPRITE_COORD_ORIGIN	glcorearb.h	769;"	d
GL_POLYGON_MODE	glcorearb.h	252;"	d
GL_POLYGON_OFFSET_FACTOR	glcorearb.h	309;"	d
GL_POLYGON_OFFSET_FILL	glcorearb.h	308;"	d
GL_POLYGON_OFFSET_LINE	glcorearb.h	307;"	d
GL_POLYGON_OFFSET_POINT	glcorearb.h	306;"	d
GL_POLYGON_OFFSET_UNITS	glcorearb.h	305;"	d
GL_POLYGON_SMOOTH	glcorearb.h	253;"	d
GL_POLYGON_SMOOTH_HINT	glcorearb.h	287;"	d
GL_PRIMITIVES_GENERATED	glcorearb.h	1047;"	d
GL_PRIMITIVE_RESTART	glcorearb.h	1415;"	d
GL_PRIMITIVE_RESTART_FIXED_INDEX	glcorearb.h	2248;"	d
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED	glcorearb.h	2586;"	d
GL_PRIMITIVE_RESTART_INDEX	glcorearb.h	1416;"	d
GL_PROGRAM	glcorearb.h	2298;"	d
GL_PROGRAM_BINARY_FORMATS	glcorearb.h	1899;"	d
GL_PROGRAM_BINARY_LENGTH	glcorearb.h	1897;"	d
GL_PROGRAM_BINARY_RETRIEVABLE_HINT	glcorearb.h	1896;"	d
GL_PROGRAM_INPUT	glcorearb.h	2415;"	d
GL_PROGRAM_OUTPUT	glcorearb.h	2416;"	d
GL_PROGRAM_PIPELINE	glcorearb.h	2300;"	d
GL_PROGRAM_PIPELINE_BINDING	glcorearb.h	1908;"	d
GL_PROGRAM_POINT_SIZE	glcorearb.h	1525;"	d
GL_PROGRAM_SEPARABLE	glcorearb.h	1906;"	d
GL_PROVOKING_VERTEX	glcorearb.h	1545;"	d
GL_PROXY_TEXTURE_1D	glcorearb.h	382;"	d
GL_PROXY_TEXTURE_1D_ARRAY	glcorearb.h	1031;"	d
GL_PROXY_TEXTURE_2D	glcorearb.h	383;"	d
GL_PROXY_TEXTURE_2D_ARRAY	glcorearb.h	1033;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE	glcorearb.h	1567;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY	glcorearb.h	1569;"	d
GL_PROXY_TEXTURE_3D	glcorearb.h	445;"	d
GL_PROXY_TEXTURE_CUBE_MAP	glcorearb.h	533;"	d
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY	glcorearb.h	1711;"	d
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB	glcorearb.h	3110;"	d
GL_PROXY_TEXTURE_RECTANGLE	glcorearb.h	1404;"	d
GL_QUADS	glcorearb.h	208;"	d
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION	glcorearb.h	1542;"	d
GL_QUERY	glcorearb.h	2299;"	d
GL_QUERY_BUFFER	glcorearb.h	2599;"	d
GL_QUERY_BUFFER_BARRIER_BIT	glcorearb.h	2600;"	d
GL_QUERY_BUFFER_BINDING	glcorearb.h	2601;"	d
GL_QUERY_BY_REGION_NO_WAIT	glcorearb.h	1098;"	d
GL_QUERY_BY_REGION_WAIT	glcorearb.h	1097;"	d
GL_QUERY_COUNTER_BITS	glcorearb.h	621;"	d
GL_QUERY_NO_WAIT	glcorearb.h	1096;"	d
GL_QUERY_RESULT	glcorearb.h	623;"	d
GL_QUERY_RESULT_AVAILABLE	glcorearb.h	624;"	d
GL_QUERY_RESULT_NO_WAIT	glcorearb.h	2602;"	d
GL_QUERY_WAIT	glcorearb.h	1095;"	d
GL_R11F_G11F_B10F	glcorearb.h	1036;"	d
GL_R16	glcorearb.h	1197;"	d
GL_R16F	glcorearb.h	1200;"	d
GL_R16I	glcorearb.h	1206;"	d
GL_R16UI	glcorearb.h	1207;"	d
GL_R16_SNORM	glcorearb.h	1410;"	d
GL_R32F	glcorearb.h	1201;"	d
GL_R32I	glcorearb.h	1208;"	d
GL_R32UI	glcorearb.h	1209;"	d
GL_R3_G3_B2	glcorearb.h	385;"	d
GL_R8	glcorearb.h	1196;"	d
GL_R8I	glcorearb.h	1204;"	d
GL_R8UI	glcorearb.h	1205;"	d
GL_R8_SNORM	glcorearb.h	1406;"	d
GL_RASTERIZER_DISCARD	glcorearb.h	1049;"	d
GL_READ_BUFFER	glcorearb.h	279;"	d
GL_READ_FRAMEBUFFER	glcorearb.h	1131;"	d
GL_READ_FRAMEBUFFER_BINDING	glcorearb.h	1133;"	d
GL_READ_ONLY	glcorearb.h	630;"	d
GL_READ_PIXELS	glcorearb.h	2344;"	d
GL_READ_PIXELS_FORMAT	glcorearb.h	2345;"	d
GL_READ_PIXELS_TYPE	glcorearb.h	2346;"	d
GL_READ_WRITE	glcorearb.h	632;"	d
GL_RED	glcorearb.h	355;"	d
GL_RED_INTEGER	glcorearb.h	1068;"	d
GL_REFERENCED_BY_COMPUTE_SHADER	glcorearb.h	2454;"	d
GL_REFERENCED_BY_FRAGMENT_SHADER	glcorearb.h	2453;"	d
GL_REFERENCED_BY_GEOMETRY_SHADER	glcorearb.h	2452;"	d
GL_REFERENCED_BY_TESS_CONTROL_SHADER	glcorearb.h	2450;"	d
GL_REFERENCED_BY_TESS_EVALUATION_SHADER	glcorearb.h	2451;"	d
GL_REFERENCED_BY_VERTEX_SHADER	glcorearb.h	2449;"	d
GL_RENDERBUFFER	glcorearb.h	1166;"	d
GL_RENDERBUFFER_ALPHA_SIZE	glcorearb.h	1177;"	d
GL_RENDERBUFFER_BINDING	glcorearb.h	1130;"	d
GL_RENDERBUFFER_BLUE_SIZE	glcorearb.h	1176;"	d
GL_RENDERBUFFER_DEPTH_SIZE	glcorearb.h	1178;"	d
GL_RENDERBUFFER_GREEN_SIZE	glcorearb.h	1175;"	d
GL_RENDERBUFFER_HEIGHT	glcorearb.h	1168;"	d
GL_RENDERBUFFER_INTERNAL_FORMAT	glcorearb.h	1169;"	d
GL_RENDERBUFFER_RED_SIZE	glcorearb.h	1174;"	d
GL_RENDERBUFFER_SAMPLES	glcorearb.h	1134;"	d
GL_RENDERBUFFER_STENCIL_SIZE	glcorearb.h	1179;"	d
GL_RENDERBUFFER_WIDTH	glcorearb.h	1167;"	d
GL_RENDERER	glcorearb.h	369;"	d
GL_REPEAT	glcorearb.h	384;"	d
GL_REPLACE	glcorearb.h	365;"	d
GL_RESET_NOTIFICATION_STRATEGY_ARB	glcorearb.h	2934;"	d
GL_RG	glcorearb.h	1194;"	d
GL_RG16	glcorearb.h	1199;"	d
GL_RG16F	glcorearb.h	1202;"	d
GL_RG16I	glcorearb.h	1212;"	d
GL_RG16UI	glcorearb.h	1213;"	d
GL_RG16_SNORM	glcorearb.h	1411;"	d
GL_RG32F	glcorearb.h	1203;"	d
GL_RG32I	glcorearb.h	1214;"	d
GL_RG32UI	glcorearb.h	1215;"	d
GL_RG8	glcorearb.h	1198;"	d
GL_RG8I	glcorearb.h	1210;"	d
GL_RG8UI	glcorearb.h	1211;"	d
GL_RG8_SNORM	glcorearb.h	1407;"	d
GL_RGB	glcorearb.h	359;"	d
GL_RGB10	glcorearb.h	389;"	d
GL_RGB10_A2	glcorearb.h	396;"	d
GL_RGB10_A2UI	glcorearb.h	1634;"	d
GL_RGB12	glcorearb.h	390;"	d
GL_RGB16	glcorearb.h	391;"	d
GL_RGB16F	glcorearb.h	1022;"	d
GL_RGB16I	glcorearb.h	1065;"	d
GL_RGB16UI	glcorearb.h	1059;"	d
GL_RGB16_SNORM	glcorearb.h	1412;"	d
GL_RGB32F	glcorearb.h	1020;"	d
GL_RGB32I	glcorearb.h	1063;"	d
GL_RGB32UI	glcorearb.h	1057;"	d
GL_RGB4	glcorearb.h	386;"	d
GL_RGB5	glcorearb.h	387;"	d
GL_RGB565	glcorearb.h	1895;"	d
GL_RGB5_A1	glcorearb.h	394;"	d
GL_RGB8	glcorearb.h	388;"	d
GL_RGB8I	glcorearb.h	1067;"	d
GL_RGB8UI	glcorearb.h	1061;"	d
GL_RGB8_SNORM	glcorearb.h	1408;"	d
GL_RGB9_E5	glcorearb.h	1038;"	d
GL_RGBA	glcorearb.h	360;"	d
GL_RGBA12	glcorearb.h	397;"	d
GL_RGBA16	glcorearb.h	398;"	d
GL_RGBA16F	glcorearb.h	1021;"	d
GL_RGBA16I	glcorearb.h	1064;"	d
GL_RGBA16UI	glcorearb.h	1058;"	d
GL_RGBA16_SNORM	glcorearb.h	1413;"	d
GL_RGBA2	glcorearb.h	392;"	d
GL_RGBA32F	glcorearb.h	1019;"	d
GL_RGBA32I	glcorearb.h	1062;"	d
GL_RGBA32UI	glcorearb.h	1056;"	d
GL_RGBA4	glcorearb.h	393;"	d
GL_RGBA8	glcorearb.h	395;"	d
GL_RGBA8I	glcorearb.h	1066;"	d
GL_RGBA8UI	glcorearb.h	1060;"	d
GL_RGBA8_SNORM	glcorearb.h	1409;"	d
GL_RGBA_INTEGER	glcorearb.h	1072;"	d
GL_RGB_INTEGER	glcorearb.h	1071;"	d
GL_RG_INTEGER	glcorearb.h	1195;"	d
GL_RIGHT	glcorearb.h	236;"	d
GL_SAMPLER	glcorearb.h	2301;"	d
GL_SAMPLER_1D	glcorearb.h	749;"	d
GL_SAMPLER_1D_ARRAY	glcorearb.h	1075;"	d
GL_SAMPLER_1D_ARRAY_SHADOW	glcorearb.h	1077;"	d
GL_SAMPLER_1D_SHADOW	glcorearb.h	753;"	d
GL_SAMPLER_2D	glcorearb.h	750;"	d
GL_SAMPLER_2D_ARRAY	glcorearb.h	1076;"	d
GL_SAMPLER_2D_ARRAY_SHADOW	glcorearb.h	1078;"	d
GL_SAMPLER_2D_MULTISAMPLE	glcorearb.h	1574;"	d
GL_SAMPLER_2D_MULTISAMPLE_ARRAY	glcorearb.h	1577;"	d
GL_SAMPLER_2D_RECT	glcorearb.h	1391;"	d
GL_SAMPLER_2D_RECT_SHADOW	glcorearb.h	1392;"	d
GL_SAMPLER_2D_SHADOW	glcorearb.h	754;"	d
GL_SAMPLER_3D	glcorearb.h	751;"	d
GL_SAMPLER_BINDING	glcorearb.h	1633;"	d
GL_SAMPLER_BUFFER	glcorearb.h	1393;"	d
GL_SAMPLER_CUBE	glcorearb.h	752;"	d
GL_SAMPLER_CUBE_MAP_ARRAY	glcorearb.h	1712;"	d
GL_SAMPLER_CUBE_MAP_ARRAY_ARB	glcorearb.h	3111;"	d
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW	glcorearb.h	1713;"	d
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB	glcorearb.h	3112;"	d
GL_SAMPLER_CUBE_SHADOW	glcorearb.h	1079;"	d
GL_SAMPLES	glcorearb.h	522;"	d
GL_SAMPLES_PASSED	glcorearb.h	645;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE	glcorearb.h	518;"	d
GL_SAMPLE_ALPHA_TO_ONE	glcorearb.h	519;"	d
GL_SAMPLE_BUFFERS	glcorearb.h	521;"	d
GL_SAMPLE_COVERAGE	glcorearb.h	520;"	d
GL_SAMPLE_COVERAGE_INVERT	glcorearb.h	524;"	d
GL_SAMPLE_COVERAGE_VALUE	glcorearb.h	523;"	d
GL_SAMPLE_MASK	glcorearb.h	1563;"	d
GL_SAMPLE_MASK_VALUE	glcorearb.h	1564;"	d
GL_SAMPLE_POSITION	glcorearb.h	1562;"	d
GL_SAMPLE_SHADING	glcorearb.h	1705;"	d
GL_SAMPLE_SHADING_ARB	glcorearb.h	2962;"	d
GL_SCISSOR_BOX	glcorearb.h	280;"	d
GL_SCISSOR_TEST	glcorearb.h	281;"	d
GL_SEPARATE_ATTRIBS	glcorearb.h	1053;"	d
GL_SET	glcorearb.h	348;"	d
GL_SHADER	glcorearb.h	2297;"	d
GL_SHADER_BINARY_FORMATS	glcorearb.h	1890;"	d
GL_SHADER_COMPILER	glcorearb.h	1889;"	d
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT	glcorearb.h	2140;"	d
GL_SHADER_IMAGE_ATOMIC	glcorearb.h	2369;"	d
GL_SHADER_IMAGE_LOAD	glcorearb.h	2367;"	d
GL_SHADER_IMAGE_STORE	glcorearb.h	2368;"	d
GL_SHADER_INCLUDE_ARB	glcorearb.h	3032;"	d
GL_SHADER_SOURCE_LENGTH	glcorearb.h	763;"	d
GL_SHADER_STORAGE_BARRIER_BIT	glcorearb.h	2474;"	d
GL_SHADER_STORAGE_BLOCK	glcorearb.h	2418;"	d
GL_SHADER_STORAGE_BUFFER	glcorearb.h	2460;"	d
GL_SHADER_STORAGE_BUFFER_BINDING	glcorearb.h	2461;"	d
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT	glcorearb.h	2473;"	d
GL_SHADER_STORAGE_BUFFER_SIZE	glcorearb.h	2463;"	d
GL_SHADER_STORAGE_BUFFER_START	glcorearb.h	2462;"	d
GL_SHADER_TYPE	glcorearb.h	735;"	d
GL_SHADING_LANGUAGE_VERSION	glcorearb.h	767;"	d
GL_SHORT	glcorearb.h	325;"	d
GL_SIGNALED	glcorearb.h	1555;"	d
GL_SIGNED_NORMALIZED	glcorearb.h	1414;"	d
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST	glcorearb.h	2374;"	d
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE	glcorearb.h	2376;"	d
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST	glcorearb.h	2375;"	d
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE	glcorearb.h	2377;"	d
GL_SMOOTH_LINE_WIDTH_GRANULARITY	glcorearb.h	468;"	d
GL_SMOOTH_LINE_WIDTH_RANGE	glcorearb.h	467;"	d
GL_SMOOTH_POINT_SIZE_GRANULARITY	glcorearb.h	466;"	d
GL_SMOOTH_POINT_SIZE_RANGE	glcorearb.h	465;"	d
GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB	glcorearb.h	3067;"	d
GL_SRC1_ALPHA	glcorearb.h	646;"	d
GL_SRC1_COLOR	glcorearb.h	1628;"	d
GL_SRC_ALPHA	glcorearb.h	221;"	d
GL_SRC_ALPHA_SATURATE	glcorearb.h	227;"	d
GL_SRC_COLOR	glcorearb.h	219;"	d
GL_SRGB	glcorearb.h	977;"	d
GL_SRGB8	glcorearb.h	978;"	d
GL_SRGB8_ALPHA8	glcorearb.h	980;"	d
GL_SRGB_ALPHA	glcorearb.h	979;"	d
GL_SRGB_DECODE_ARB	glcorearb.h	2884;"	d
GL_SRGB_READ	glcorearb.h	2355;"	d
GL_SRGB_WRITE	glcorearb.h	2356;"	d
GL_STACK_OVERFLOW	glcorearb.h	331;"	d
GL_STACK_UNDERFLOW	glcorearb.h	332;"	d
GL_STATIC_COPY	glcorearb.h	641;"	d
GL_STATIC_DRAW	glcorearb.h	639;"	d
GL_STATIC_READ	glcorearb.h	640;"	d
GL_STENCIL	glcorearb.h	352;"	d
GL_STENCIL_ATTACHMENT	glcorearb.h	1164;"	d
GL_STENCIL_BACK_FAIL	glcorearb.h	704;"	d
GL_STENCIL_BACK_FUNC	glcorearb.h	703;"	d
GL_STENCIL_BACK_PASS_DEPTH_FAIL	glcorearb.h	705;"	d
GL_STENCIL_BACK_PASS_DEPTH_PASS	glcorearb.h	706;"	d
GL_STENCIL_BACK_REF	glcorearb.h	772;"	d
GL_STENCIL_BACK_VALUE_MASK	glcorearb.h	773;"	d
GL_STENCIL_BACK_WRITEMASK	glcorearb.h	774;"	d
GL_STENCIL_BUFFER_BIT	glcorearb.h	197;"	d
GL_STENCIL_CLEAR_VALUE	glcorearb.h	263;"	d
GL_STENCIL_COMPONENTS	glcorearb.h	2337;"	d
GL_STENCIL_FAIL	glcorearb.h	266;"	d
GL_STENCIL_FUNC	glcorearb.h	264;"	d
GL_STENCIL_INDEX	glcorearb.h	353;"	d
GL_STENCIL_INDEX1	glcorearb.h	1170;"	d
GL_STENCIL_INDEX16	glcorearb.h	1173;"	d
GL_STENCIL_INDEX4	glcorearb.h	1171;"	d
GL_STENCIL_INDEX8	glcorearb.h	1172;"	d
GL_STENCIL_PASS_DEPTH_FAIL	glcorearb.h	267;"	d
GL_STENCIL_PASS_DEPTH_PASS	glcorearb.h	268;"	d
GL_STENCIL_REF	glcorearb.h	269;"	d
GL_STENCIL_RENDERABLE	glcorearb.h	2340;"	d
GL_STENCIL_TEST	glcorearb.h	262;"	d
GL_STENCIL_VALUE_MASK	glcorearb.h	265;"	d
GL_STENCIL_WRITEMASK	glcorearb.h	270;"	d
GL_STEREO	glcorearb.h	285;"	d
GL_STREAM_COPY	glcorearb.h	638;"	d
GL_STREAM_DRAW	glcorearb.h	636;"	d
GL_STREAM_READ	glcorearb.h	637;"	d
GL_SUBPIXEL_BITS	glcorearb.h	302;"	d
GL_SYNC_CL_EVENT_ARB	glcorearb.h	2694;"	d
GL_SYNC_CL_EVENT_COMPLETE_ARB	glcorearb.h	2695;"	d
GL_SYNC_CONDITION	glcorearb.h	1549;"	d
GL_SYNC_FENCE	glcorearb.h	1552;"	d
GL_SYNC_FLAGS	glcorearb.h	1551;"	d
GL_SYNC_FLUSH_COMMANDS_BIT	glcorearb.h	1561;"	d
GL_SYNC_GPU_COMMANDS_COMPLETE	glcorearb.h	1553;"	d
GL_SYNC_STATUS	glcorearb.h	1550;"	d
GL_TESS_CONTROL_OUTPUT_VERTICES	glcorearb.h	1749;"	d
GL_TESS_CONTROL_SHADER	glcorearb.h	1776;"	d
GL_TESS_CONTROL_SHADER_BIT	glcorearb.h	1903;"	d
GL_TESS_CONTROL_SUBROUTINE	glcorearb.h	2420;"	d
GL_TESS_CONTROL_SUBROUTINE_UNIFORM	glcorearb.h	2426;"	d
GL_TESS_CONTROL_TEXTURE	glcorearb.h	2359;"	d
GL_TESS_EVALUATION_SHADER	glcorearb.h	1775;"	d
GL_TESS_EVALUATION_SHADER_BIT	glcorearb.h	1904;"	d
GL_TESS_EVALUATION_SUBROUTINE	glcorearb.h	2421;"	d
GL_TESS_EVALUATION_SUBROUTINE_UNIFORM	glcorearb.h	2427;"	d
GL_TESS_EVALUATION_TEXTURE	glcorearb.h	2360;"	d
GL_TESS_GEN_MODE	glcorearb.h	1750;"	d
GL_TESS_GEN_POINT_MODE	glcorearb.h	1753;"	d
GL_TESS_GEN_SPACING	glcorearb.h	1751;"	d
GL_TESS_GEN_VERTEX_ORDER	glcorearb.h	1752;"	d
GL_TEXTURE	glcorearb.h	349;"	d
GL_TEXTURE0	glcorearb.h	484;"	d
GL_TEXTURE1	glcorearb.h	485;"	d
GL_TEXTURE10	glcorearb.h	494;"	d
GL_TEXTURE11	glcorearb.h	495;"	d
GL_TEXTURE12	glcorearb.h	496;"	d
GL_TEXTURE13	glcorearb.h	497;"	d
GL_TEXTURE14	glcorearb.h	498;"	d
GL_TEXTURE15	glcorearb.h	499;"	d
GL_TEXTURE16	glcorearb.h	500;"	d
GL_TEXTURE17	glcorearb.h	501;"	d
GL_TEXTURE18	glcorearb.h	502;"	d
GL_TEXTURE19	glcorearb.h	503;"	d
GL_TEXTURE2	glcorearb.h	486;"	d
GL_TEXTURE20	glcorearb.h	504;"	d
GL_TEXTURE21	glcorearb.h	505;"	d
GL_TEXTURE22	glcorearb.h	506;"	d
GL_TEXTURE23	glcorearb.h	507;"	d
GL_TEXTURE24	glcorearb.h	508;"	d
GL_TEXTURE25	glcorearb.h	509;"	d
GL_TEXTURE26	glcorearb.h	510;"	d
GL_TEXTURE27	glcorearb.h	511;"	d
GL_TEXTURE28	glcorearb.h	512;"	d
GL_TEXTURE29	glcorearb.h	513;"	d
GL_TEXTURE3	glcorearb.h	487;"	d
GL_TEXTURE30	glcorearb.h	514;"	d
GL_TEXTURE31	glcorearb.h	515;"	d
GL_TEXTURE4	glcorearb.h	488;"	d
GL_TEXTURE5	glcorearb.h	489;"	d
GL_TEXTURE6	glcorearb.h	490;"	d
GL_TEXTURE7	glcorearb.h	491;"	d
GL_TEXTURE8	glcorearb.h	492;"	d
GL_TEXTURE9	glcorearb.h	493;"	d
GL_TEXTURE_1D	glcorearb.h	303;"	d
GL_TEXTURE_1D_ARRAY	glcorearb.h	1030;"	d
GL_TEXTURE_2D	glcorearb.h	304;"	d
GL_TEXTURE_2D_ARRAY	glcorearb.h	1032;"	d
GL_TEXTURE_2D_MULTISAMPLE	glcorearb.h	1566;"	d
GL_TEXTURE_2D_MULTISAMPLE_ARRAY	glcorearb.h	1568;"	d
GL_TEXTURE_3D	glcorearb.h	444;"	d
GL_TEXTURE_ALPHA_SIZE	glcorearb.h	319;"	d
GL_TEXTURE_ALPHA_TYPE	glcorearb.h	1125;"	d
GL_TEXTURE_BASE_LEVEL	glcorearb.h	463;"	d
GL_TEXTURE_BINDING_1D	glcorearb.h	310;"	d
GL_TEXTURE_BINDING_1D_ARRAY	glcorearb.h	1034;"	d
GL_TEXTURE_BINDING_2D	glcorearb.h	311;"	d
GL_TEXTURE_BINDING_2D_ARRAY	glcorearb.h	1035;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE	glcorearb.h	1570;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY	glcorearb.h	1571;"	d
GL_TEXTURE_BINDING_3D	glcorearb.h	439;"	d
GL_TEXTURE_BINDING_BUFFER	glcorearb.h	1400;"	d
GL_TEXTURE_BINDING_CUBE_MAP	glcorearb.h	526;"	d
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY	glcorearb.h	1710;"	d
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB	glcorearb.h	3109;"	d
GL_TEXTURE_BINDING_RECTANGLE	glcorearb.h	1403;"	d
GL_TEXTURE_BLUE_SIZE	glcorearb.h	318;"	d
GL_TEXTURE_BLUE_TYPE	glcorearb.h	1124;"	d
GL_TEXTURE_BORDER_COLOR	glcorearb.h	315;"	d
GL_TEXTURE_BUFFER	glcorearb.h	1398;"	d
GL_TEXTURE_BUFFER_BINDING	glcorearb.h	2587;"	d
GL_TEXTURE_BUFFER_DATA_STORE_BINDING	glcorearb.h	1401;"	d
GL_TEXTURE_BUFFER_OFFSET	glcorearb.h	2477;"	d
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT	glcorearb.h	2479;"	d
GL_TEXTURE_BUFFER_SIZE	glcorearb.h	2478;"	d
GL_TEXTURE_COMPARE_FUNC	glcorearb.h	582;"	d
GL_TEXTURE_COMPARE_MODE	glcorearb.h	581;"	d
GL_TEXTURE_COMPRESSED	glcorearb.h	539;"	d
GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT	glcorearb.h	2379;"	d
GL_TEXTURE_COMPRESSED_BLOCK_SIZE	glcorearb.h	2380;"	d
GL_TEXTURE_COMPRESSED_BLOCK_WIDTH	glcorearb.h	2378;"	d
GL_TEXTURE_COMPRESSED_IMAGE_SIZE	glcorearb.h	538;"	d
GL_TEXTURE_COMPRESSION_HINT	glcorearb.h	537;"	d
GL_TEXTURE_CUBE_MAP	glcorearb.h	525;"	d
GL_TEXTURE_CUBE_MAP_ARRAY	glcorearb.h	1709;"	d
GL_TEXTURE_CUBE_MAP_ARRAY_ARB	glcorearb.h	3108;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_X	glcorearb.h	528;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	glcorearb.h	530;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	glcorearb.h	532;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_X	glcorearb.h	527;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Y	glcorearb.h	529;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Z	glcorearb.h	531;"	d
GL_TEXTURE_CUBE_MAP_SEAMLESS	glcorearb.h	1546;"	d
GL_TEXTURE_DEPTH	glcorearb.h	446;"	d
GL_TEXTURE_DEPTH_SIZE	glcorearb.h	580;"	d
GL_TEXTURE_DEPTH_TYPE	glcorearb.h	1126;"	d
GL_TEXTURE_FETCH_BARRIER_BIT	glcorearb.h	2139;"	d
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS	glcorearb.h	1573;"	d
GL_TEXTURE_GATHER	glcorearb.h	2365;"	d
GL_TEXTURE_GATHER_SHADOW	glcorearb.h	2366;"	d
GL_TEXTURE_GREEN_SIZE	glcorearb.h	317;"	d
GL_TEXTURE_GREEN_TYPE	glcorearb.h	1123;"	d
GL_TEXTURE_HEIGHT	glcorearb.h	313;"	d
GL_TEXTURE_IMAGE_FORMAT	glcorearb.h	2347;"	d
GL_TEXTURE_IMAGE_TYPE	glcorearb.h	2348;"	d
GL_TEXTURE_IMMUTABLE_FORMAT	glcorearb.h	2204;"	d
GL_TEXTURE_IMMUTABLE_LEVELS	glcorearb.h	2484;"	d
GL_TEXTURE_INTERNAL_FORMAT	glcorearb.h	314;"	d
GL_TEXTURE_LOD_BIAS	glcorearb.h	577;"	d
GL_TEXTURE_MAG_FILTER	glcorearb.h	378;"	d
GL_TEXTURE_MAX_LEVEL	glcorearb.h	464;"	d
GL_TEXTURE_MAX_LOD	glcorearb.h	462;"	d
GL_TEXTURE_MIN_FILTER	glcorearb.h	379;"	d
GL_TEXTURE_MIN_LOD	glcorearb.h	461;"	d
GL_TEXTURE_RECTANGLE	glcorearb.h	1402;"	d
GL_TEXTURE_RED_SIZE	glcorearb.h	316;"	d
GL_TEXTURE_RED_TYPE	glcorearb.h	1122;"	d
GL_TEXTURE_SAMPLES	glcorearb.h	1572;"	d
GL_TEXTURE_SHADOW	glcorearb.h	2364;"	d
GL_TEXTURE_SHARED_SIZE	glcorearb.h	1040;"	d
GL_TEXTURE_SPARSE_ARB	glcorearb.h	3057;"	d
GL_TEXTURE_STENCIL_SIZE	glcorearb.h	1121;"	d
GL_TEXTURE_SWIZZLE_A	glcorearb.h	1638;"	d
GL_TEXTURE_SWIZZLE_B	glcorearb.h	1637;"	d
GL_TEXTURE_SWIZZLE_G	glcorearb.h	1636;"	d
GL_TEXTURE_SWIZZLE_R	glcorearb.h	1635;"	d
GL_TEXTURE_SWIZZLE_RGBA	glcorearb.h	1639;"	d
GL_TEXTURE_UPDATE_BARRIER_BIT	glcorearb.h	2143;"	d
GL_TEXTURE_VIEW	glcorearb.h	2382;"	d
GL_TEXTURE_VIEW_MIN_LAYER	glcorearb.h	2482;"	d
GL_TEXTURE_VIEW_MIN_LEVEL	glcorearb.h	2480;"	d
GL_TEXTURE_VIEW_NUM_LAYERS	glcorearb.h	2483;"	d
GL_TEXTURE_VIEW_NUM_LEVELS	glcorearb.h	2481;"	d
GL_TEXTURE_WIDTH	glcorearb.h	312;"	d
GL_TEXTURE_WRAP_R	glcorearb.h	447;"	d
GL_TEXTURE_WRAP_S	glcorearb.h	380;"	d
GL_TEXTURE_WRAP_T	glcorearb.h	381;"	d
GL_TIMEOUT_EXPIRED	glcorearb.h	1557;"	d
GL_TIMEOUT_IGNORED	glcorearb.h	1560;"	d
GL_TIMESTAMP	glcorearb.h	1641;"	d
GL_TIME_ELAPSED	glcorearb.h	1640;"	d
GL_TOP_LEVEL_ARRAY_SIZE	glcorearb.h	2455;"	d
GL_TOP_LEVEL_ARRAY_STRIDE	glcorearb.h	2456;"	d
GL_TRANSFORM_FEEDBACK	glcorearb.h	1777;"	d
GL_TRANSFORM_FEEDBACK_ACTIVE	glcorearb.h	3175;"	d
GL_TRANSFORM_FEEDBACK_BARRIER_BIT	glcorearb.h	2146;"	d
GL_TRANSFORM_FEEDBACK_BINDING	glcorearb.h	1780;"	d
GL_TRANSFORM_FEEDBACK_BUFFER	glcorearb.h	1054;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE	glcorearb.h	1779;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING	glcorearb.h	1055;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_INDEX	glcorearb.h	2597;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_MODE	glcorearb.h	1042;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED	glcorearb.h	1778;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE	glcorearb.h	1046;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_START	glcorearb.h	1045;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE	glcorearb.h	2598;"	d
GL_TRANSFORM_FEEDBACK_PAUSED	glcorearb.h	3174;"	d
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN	glcorearb.h	1048;"	d
GL_TRANSFORM_FEEDBACK_VARYING	glcorearb.h	2431;"	d
GL_TRANSFORM_FEEDBACK_VARYINGS	glcorearb.h	1044;"	d
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH	glcorearb.h	1041;"	d
GL_TRIANGLES	glcorearb.h	205;"	d
GL_TRIANGLES_ADJACENCY	glcorearb.h	1523;"	d
GL_TRIANGLE_FAN	glcorearb.h	207;"	d
GL_TRIANGLE_STRIP	glcorearb.h	206;"	d
GL_TRIANGLE_STRIP_ADJACENCY	glcorearb.h	1524;"	d
GL_TRUE	glcorearb.h	200;"	d
GL_TYPE	glcorearb.h	2437;"	d
GL_UNDEFINED_VERTEX	glcorearb.h	1914;"	d
GL_UNIFORM	glcorearb.h	2413;"	d
GL_UNIFORM_ARRAY_STRIDE	glcorearb.h	1438;"	d
GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX	glcorearb.h	2134;"	d
GL_UNIFORM_BARRIER_BIT	glcorearb.h	2138;"	d
GL_UNIFORM_BLOCK	glcorearb.h	2414;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS	glcorearb.h	1444;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES	glcorearb.h	1445;"	d
GL_UNIFORM_BLOCK_BINDING	glcorearb.h	1441;"	d
GL_UNIFORM_BLOCK_DATA_SIZE	glcorearb.h	1442;"	d
GL_UNIFORM_BLOCK_INDEX	glcorearb.h	1436;"	d
GL_UNIFORM_BLOCK_NAME_LENGTH	glcorearb.h	1443;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER	glcorearb.h	2264;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER	glcorearb.h	1447;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER	glcorearb.h	3190;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER	glcorearb.h	1773;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER	glcorearb.h	1774;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER	glcorearb.h	1446;"	d
GL_UNIFORM_BUFFER	glcorearb.h	1419;"	d
GL_UNIFORM_BUFFER_BINDING	glcorearb.h	1420;"	d
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT	glcorearb.h	1430;"	d
GL_UNIFORM_BUFFER_SIZE	glcorearb.h	1422;"	d
GL_UNIFORM_BUFFER_START	glcorearb.h	1421;"	d
GL_UNIFORM_IS_ROW_MAJOR	glcorearb.h	1440;"	d
GL_UNIFORM_MATRIX_STRIDE	glcorearb.h	1439;"	d
GL_UNIFORM_NAME_LENGTH	glcorearb.h	1435;"	d
GL_UNIFORM_OFFSET	glcorearb.h	1437;"	d
GL_UNIFORM_SIZE	glcorearb.h	1434;"	d
GL_UNIFORM_TYPE	glcorearb.h	1433;"	d
GL_UNKNOWN_CONTEXT_RESET_ARB	glcorearb.h	2933;"	d
GL_UNPACK_ALIGNMENT	glcorearb.h	293;"	d
GL_UNPACK_COMPRESSED_BLOCK_DEPTH	glcorearb.h	2099;"	d
GL_UNPACK_COMPRESSED_BLOCK_HEIGHT	glcorearb.h	2098;"	d
GL_UNPACK_COMPRESSED_BLOCK_SIZE	glcorearb.h	2100;"	d
GL_UNPACK_COMPRESSED_BLOCK_WIDTH	glcorearb.h	2097;"	d
GL_UNPACK_IMAGE_HEIGHT	glcorearb.h	443;"	d
GL_UNPACK_LSB_FIRST	glcorearb.h	289;"	d
GL_UNPACK_ROW_LENGTH	glcorearb.h	290;"	d
GL_UNPACK_SKIP_IMAGES	glcorearb.h	442;"	d
GL_UNPACK_SKIP_PIXELS	glcorearb.h	292;"	d
GL_UNPACK_SKIP_ROWS	glcorearb.h	291;"	d
GL_UNPACK_SWAP_BYTES	glcorearb.h	288;"	d
GL_UNSIGNALED	glcorearb.h	1554;"	d
GL_UNSIGNED_BYTE	glcorearb.h	324;"	d
GL_UNSIGNED_BYTE_2_3_3_REV	glcorearb.h	449;"	d
GL_UNSIGNED_BYTE_3_3_2	glcorearb.h	434;"	d
GL_UNSIGNED_INT	glcorearb.h	328;"	d
GL_UNSIGNED_INT64_ARB	glcorearb.h	2645;"	d
GL_UNSIGNED_INT_10F_11F_11F_REV	glcorearb.h	1037;"	d
GL_UNSIGNED_INT_10_10_10_2	glcorearb.h	438;"	d
GL_UNSIGNED_INT_24_8	glcorearb.h	1119;"	d
GL_UNSIGNED_INT_2_10_10_10_REV	glcorearb.h	455;"	d
GL_UNSIGNED_INT_5_9_9_9_REV	glcorearb.h	1039;"	d
GL_UNSIGNED_INT_8_8_8_8	glcorearb.h	437;"	d
GL_UNSIGNED_INT_8_8_8_8_REV	glcorearb.h	454;"	d
GL_UNSIGNED_INT_ATOMIC_COUNTER	glcorearb.h	2135;"	d
GL_UNSIGNED_INT_IMAGE_1D	glcorearb.h	2178;"	d
GL_UNSIGNED_INT_IMAGE_1D_ARRAY	glcorearb.h	2184;"	d
GL_UNSIGNED_INT_IMAGE_2D	glcorearb.h	2179;"	d
GL_UNSIGNED_INT_IMAGE_2D_ARRAY	glcorearb.h	2185;"	d
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE	glcorearb.h	2187;"	d
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY	glcorearb.h	2188;"	d
GL_UNSIGNED_INT_IMAGE_2D_RECT	glcorearb.h	2181;"	d
GL_UNSIGNED_INT_IMAGE_3D	glcorearb.h	2180;"	d
GL_UNSIGNED_INT_IMAGE_BUFFER	glcorearb.h	2183;"	d
GL_UNSIGNED_INT_IMAGE_CUBE	glcorearb.h	2182;"	d
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY	glcorearb.h	2186;"	d
GL_UNSIGNED_INT_SAMPLER_1D	glcorearb.h	1089;"	d
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY	glcorearb.h	1093;"	d
GL_UNSIGNED_INT_SAMPLER_2D	glcorearb.h	1090;"	d
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY	glcorearb.h	1094;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE	glcorearb.h	1576;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	glcorearb.h	1579;"	d
GL_UNSIGNED_INT_SAMPLER_2D_RECT	glcorearb.h	1396;"	d
GL_UNSIGNED_INT_SAMPLER_3D	glcorearb.h	1091;"	d
GL_UNSIGNED_INT_SAMPLER_BUFFER	glcorearb.h	1397;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE	glcorearb.h	1092;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY	glcorearb.h	1715;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB	glcorearb.h	3114;"	d
GL_UNSIGNED_INT_VEC2	glcorearb.h	1080;"	d
GL_UNSIGNED_INT_VEC3	glcorearb.h	1081;"	d
GL_UNSIGNED_INT_VEC4	glcorearb.h	1082;"	d
GL_UNSIGNED_NORMALIZED	glcorearb.h	1127;"	d
GL_UNSIGNED_SHORT	glcorearb.h	326;"	d
GL_UNSIGNED_SHORT_1_5_5_5_REV	glcorearb.h	453;"	d
GL_UNSIGNED_SHORT_4_4_4_4	glcorearb.h	435;"	d
GL_UNSIGNED_SHORT_4_4_4_4_REV	glcorearb.h	452;"	d
GL_UNSIGNED_SHORT_5_5_5_1	glcorearb.h	436;"	d
GL_UNSIGNED_SHORT_5_6_5	glcorearb.h	450;"	d
GL_UNSIGNED_SHORT_5_6_5_REV	glcorearb.h	451;"	d
GL_UPPER_LEFT	glcorearb.h	771;"	d
GL_VALIDATE_STATUS	glcorearb.h	758;"	d
GL_VENDOR	glcorearb.h	368;"	d
GL_VERSION	glcorearb.h	370;"	d
GL_VERSION_1_0	glcorearb.h	81;"	d
GL_VERSION_1_1	glcorearb.h	193;"	d
GL_VERSION_1_2	glcorearb.h	433;"	d
GL_VERSION_1_3	glcorearb.h	483;"	d
GL_VERSION_1_4	glcorearb.h	566;"	d
GL_VERSION_1_5	glcorearb.h	615;"	d
GL_VERSION_2_0	glcorearb.h	690;"	d
GL_VERSION_2_1	glcorearb.h	966;"	d
GL_VERSION_3_0	glcorearb.h	1000;"	d
GL_VERSION_3_1	glcorearb.h	1390;"	d
GL_VERSION_3_2	glcorearb.h	1478;"	d
GL_VERSION_3_3	glcorearb.h	1626;"	d
GL_VERSION_4_0	glcorearb.h	1704;"	d
GL_VERSION_4_1	glcorearb.h	1879;"	d
GL_VERSION_4_2	glcorearb.h	2096;"	d
GL_VERSION_4_3	glcorearb.h	2234;"	d
GL_VERSION_4_4	glcorearb.h	2584;"	d
GL_VERTEX_ARRAY	glcorearb.h	399;"	d
GL_VERTEX_ARRAY_BINDING	glcorearb.h	1216;"	d
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT	glcorearb.h	2136;"	d
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	glcorearb.h	629;"	d
GL_VERTEX_ATTRIB_ARRAY_DIVISOR	glcorearb.h	1627;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	glcorearb.h	696;"	d
GL_VERTEX_ATTRIB_ARRAY_INTEGER	glcorearb.h	1023;"	d
GL_VERTEX_ATTRIB_ARRAY_LONG	glcorearb.h	2237;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	glcorearb.h	726;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	glcorearb.h	702;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	glcorearb.h	697;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	glcorearb.h	698;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	glcorearb.h	699;"	d
GL_VERTEX_ATTRIB_BINDING	glcorearb.h	2485;"	d
GL_VERTEX_ATTRIB_RELATIVE_OFFSET	glcorearb.h	2486;"	d
GL_VERTEX_BINDING_BUFFER	glcorearb.h	2492;"	d
GL_VERTEX_BINDING_DIVISOR	glcorearb.h	2487;"	d
GL_VERTEX_BINDING_OFFSET	glcorearb.h	2488;"	d
GL_VERTEX_BINDING_STRIDE	glcorearb.h	2489;"	d
GL_VERTEX_PROGRAM_POINT_SIZE	glcorearb.h	701;"	d
GL_VERTEX_SHADER	glcorearb.h	729;"	d
GL_VERTEX_SHADER_BIT	glcorearb.h	1900;"	d
GL_VERTEX_SUBROUTINE	glcorearb.h	2419;"	d
GL_VERTEX_SUBROUTINE_UNIFORM	glcorearb.h	2425;"	d
GL_VERTEX_TEXTURE	glcorearb.h	2358;"	d
GL_VIEWPORT	glcorearb.h	271;"	d
GL_VIEWPORT_BOUNDS_RANGE	glcorearb.h	1911;"	d
GL_VIEWPORT_INDEX_PROVOKING_VERTEX	glcorearb.h	1913;"	d
GL_VIEWPORT_SUBPIXEL_BITS	glcorearb.h	1910;"	d
GL_VIEW_CLASS_128_BITS	glcorearb.h	2397;"	d
GL_VIEW_CLASS_16_BITS	glcorearb.h	2403;"	d
GL_VIEW_CLASS_24_BITS	glcorearb.h	2402;"	d
GL_VIEW_CLASS_32_BITS	glcorearb.h	2401;"	d
GL_VIEW_CLASS_48_BITS	glcorearb.h	2400;"	d
GL_VIEW_CLASS_64_BITS	glcorearb.h	2399;"	d
GL_VIEW_CLASS_8_BITS	glcorearb.h	2404;"	d
GL_VIEW_CLASS_96_BITS	glcorearb.h	2398;"	d
GL_VIEW_CLASS_BPTC_FLOAT	glcorearb.h	2412;"	d
GL_VIEW_CLASS_BPTC_UNORM	glcorearb.h	2411;"	d
GL_VIEW_CLASS_RGTC1_RED	glcorearb.h	2409;"	d
GL_VIEW_CLASS_RGTC2_RG	glcorearb.h	2410;"	d
GL_VIEW_CLASS_S3TC_DXT1_RGB	glcorearb.h	2405;"	d
GL_VIEW_CLASS_S3TC_DXT1_RGBA	glcorearb.h	2406;"	d
GL_VIEW_CLASS_S3TC_DXT3_RGBA	glcorearb.h	2407;"	d
GL_VIEW_CLASS_S3TC_DXT5_RGBA	glcorearb.h	2408;"	d
GL_VIEW_COMPATIBILITY_CLASS	glcorearb.h	2383;"	d
GL_VIRTUAL_PAGE_SIZE_INDEX_ARB	glcorearb.h	3058;"	d
GL_VIRTUAL_PAGE_SIZE_X_ARB	glcorearb.h	3061;"	d
GL_VIRTUAL_PAGE_SIZE_Y_ARB	glcorearb.h	3062;"	d
GL_VIRTUAL_PAGE_SIZE_Z_ARB	glcorearb.h	3063;"	d
GL_WAIT_FAILED	glcorearb.h	1559;"	d
GL_WRITE_ONLY	glcorearb.h	631;"	d
GL_XOR	glcorearb.h	339;"	d
GL_ZERO	glcorearb.h	217;"	d
GLbitfield	glcorearb.h	/^typedef unsigned int GLbitfield;$/;"	t
GLboolean	glcorearb.h	/^typedef unsigned char GLboolean;$/;"	t
GLbyte	glcorearb.h	/^typedef signed char GLbyte;$/;"	t
GLchar	glcorearb.h	/^typedef char GLchar;$/;"	t
GLclampd	glcorearb.h	/^typedef double GLclampd;$/;"	t
GLclampf	glcorearb.h	/^typedef float GLclampf;$/;"	t
GLdouble	glcorearb.h	/^typedef double GLdouble;$/;"	t
GLenum	glcorearb.h	/^typedef unsigned int GLenum;$/;"	t
GLfloat	glcorearb.h	/^typedef float GLfloat;$/;"	t
GLhalf	glcorearb.h	/^typedef unsigned short GLhalf;$/;"	t
GLint	glcorearb.h	/^typedef int GLint;$/;"	t
GLint64	glcorearb.h	/^typedef int64_t GLint64;$/;"	t
GLintptr	glcorearb.h	/^typedef ptrdiff_t GLintptr;$/;"	t
GLshort	glcorearb.h	/^typedef short GLshort;$/;"	t
GLsizei	glcorearb.h	/^typedef int GLsizei;$/;"	t
GLsizeiptr	glcorearb.h	/^typedef ptrdiff_t GLsizeiptr;$/;"	t
GLsync	glcorearb.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync
GLubyte	glcorearb.h	/^typedef unsigned char GLubyte;$/;"	t
GLuint	glcorearb.h	/^typedef unsigned int GLuint;$/;"	t
GLuint64	glcorearb.h	/^typedef uint64_t GLuint64;$/;"	t
GLuint64EXT	glcorearb.h	/^typedef uint64_t GLuint64EXT;$/;"	t
GLushort	glcorearb.h	/^typedef unsigned short GLushort;$/;"	t
GLvoid	glcorearb.h	/^typedef void GLvoid;$/;"	t
GenBuffers	context.h	/^  PFNGLGENBUFFERSPROC GenBuffers;$/;"	m	class:Render::Context	access:public
GenClouds	canvas.h	/^	void GenClouds( RNG& rng, double Ldiv = 3, double zoom = 64, uint8_t H = 169, uint8_t S = 255, int base = 192 )$/;"	f	class:Canvas	access:public	signature:( RNG& rng, double Ldiv = 3, double zoom = 64, uint8_t H = 169, uint8_t S = 255, int base = 192 )
GenPixelTurbulence	canvas.h	/^	void GenPixelTurbulence( RNG& rng, int light = 64, int rel = 32 )$/;"	f	class:Canvas	access:public	signature:( RNG& rng, int light = 64, int rel = 32 )
GenTextures	context.h	/^  PFNGLGENTEXTURESPROC GenTextures;$/;"	m	class:Render::Context	access:public
GenThat	app.h	/^	void GenThat();$/;"	p	class:App	access:private	signature:()
GenTurbulence	canvas.h	/^	void GenTurbulence( RNG& rng, double zoom = 64, double base = 128, bool smooth = true )$/;"	f	class:Canvas	access:public	signature:( RNG& rng, double zoom = 64, double base = 128, bool smooth = true )
GenVertexArrays	context.h	/^  PFNGLGENVERTEXARRAYSPROC GenVertexArrays;$/;"	m	class:Render::Context	access:public
Generar	mapgen.cpp	/^Map Generar(  mapgen::Config cfg )$/;"	f	namespace:mapgen	signature:( mapgen::Config cfg )
Generar	mapgen.h	/^Map Generar( mapgen::Config cfg );$/;"	p	namespace:mapgen	signature:( mapgen::Config cfg )
GenerateModels	map.h	/^	void GenerateModels( int block_type = 1 )$/;"	f	class:Map	access:public	signature:( int block_type = 1 )
Get	canvas.h	/^	Color Get( int x, int y )$/;"	f	class:Canvas	access:public	signature:( int x, int y )
Get	matriz.h	/^	T Get( int row, int col ) const$/;"	f	class:Matrix2D	access:public	signature:( int row, int col ) const
GetAttribLocation	context.h	/^  PFNGLGETATTRIBLOCATIONPROC GetAttribLocation;$/;"	m	class:Render::Context	access:public
GetFPS	fpscounter.h	/^	int GetFPS()$/;"	f	class:FPSCounter	access:public	signature:()
GetHorizontalAngle	camera.cpp	/^float Camera::GetHorizontalAngle() const$/;"	f	class:Camera	signature:() const
GetHorizontalAngle	camera.h	/^	float GetHorizontalAngle() const;$/;"	p	class:Camera	access:public	signature:() const
GetModelsBuffer	map.h	/^	cml::matrix44f_c* GetModelsBuffer()$/;"	f	class:Map	access:public	signature:()
GetModelsNum	map.h	/^	int GetModelsNum()$/;"	f	class:Map	access:public	signature:()
GetPixelOffset	Bitmap.cpp	/^inline unsigned GetPixelOffset(unsigned col, unsigned row, unsigned width, unsigned height, Bitmap::Format format) {$/;"	f	signature:(unsigned col, unsigned row, unsigned width, unsigned height, Bitmap::Format format)
GetPosition	camera.cpp	/^const cml::vector3f& Camera::GetPosition() const$/;"	f	class:Camera	signature:() const
GetPosition	camera.h	/^	const cml::vector3f& GetPosition() const;$/;"	p	class:Camera	access:public	signature:() const
GetProc	context.h	/^  template <typename T> bool GetProc(T&p, const char*name)$/;"	f	class:Render::Context	access:protected	signature:(T&p, const char*name)
GetProc	context.h	/^  virtual bool GetProc(void*&p,const char*name) = 0;$/;"	p	class:Render::Context	access:protected	signature:(void*&p,const char*name)
GetProc	sdlcontext.h	/^  bool GetProc(void*&p,const char*name)$/;"	f	class:Render::SDL::Context	access:public	signature:(void*&p,const char*name)
GetProgramInfoLog	context.h	/^  PFNGLGETPROGRAMINFOLOGPROC GetProgramInfoLog;$/;"	m	class:Render::Context	access:public
GetProgramiv	context.h	/^  PFNGLGETPROGRAMIVPROC GetProgramiv;$/;"	m	class:Render::Context	access:public
GetProjection	camera.cpp	/^const cml::matrix44f_c& Camera::GetProjection()$/;"	f	class:Camera	signature:()
GetProjection	camera.h	/^	const cml::matrix44f_c& GetProjection();$/;"	p	class:Camera	access:public	signature:()
GetQuad	sprite3d.h	/^	Quad& GetQuad()$/;"	f	class:Sprite3D	access:public	signature:()
GetRawData	dynamicarray.h	/^	T* GetRawData()$/;"	f	class:DynamicArray	access:public	signature:()
GetShaderInfoLog	context.h	/^  PFNGLGETSHADERINFOLOGPROC GetShaderInfoLog;$/;"	m	class:Render::Context	access:public
GetShaderiv	context.h	/^  PFNGLGETSHADERIVPROC GetShaderiv;$/;"	m	class:Render::Context	access:public
GetSprite	entity.h	/^	Sprite3D* GetSprite()$/;"	f	class:Entity	access:public	signature:()
GetTex	sprite3d.h	/^	tdogl::Texture* GetTex()$/;"	f	class:Sprite3D	access:public	signature:()
GetTransform	entity.h	/^	Transform& GetTransform()$/;"	f	class:Entity	access:public	signature:()
GetUniformLocation	context.h	/^  PFNGLGETUNIFORMLOCATIONPROC GetUniformLocation;$/;"	m	class:Render::Context	access:public
GetVAO	mesh.h	/^	GLuint GetVAO()$/;"	f	class:Mesh	access:public	signature:()
GetVBO	mesh.h	/^	GLuint GetVBO( int index )$/;"	f	class:Mesh	access:public	signature:( int index )
GetVersion	context.h	/^  virtual void GetVersion(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile) = 0;$/;"	p	class:Render::Context	access:protected	signature:(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)
GetVersion	sdlcontext.cpp	/^void Context::GetVersion(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)$/;"	f	class:Render::SDL::Context	signature:(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)
GetVersion	sdlcontext.h	/^  void GetVersion(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile);$/;"	p	class:Render::SDL::Context	access:public	signature:(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)
GetVerticalAngle	camera.cpp	/^float Camera::GetVerticalAngle() const$/;"	f	class:Camera	signature:() const
GetVerticalAngle	camera.h	/^	float GetVerticalAngle() const;$/;"	p	class:Camera	access:public	signature:() const
GetView	camera.cpp	/^const cml::matrix44f_c& Camera::GetView()$/;"	f	class:Camera	signature:()
GetView	camera.h	/^	const cml::matrix44f_c& GetView();$/;"	p	class:Camera	access:public	signature:()
Getint	map.h	/^	int Getint( int x, int y )$/;"	f	class:Map	access:public	signature:( int x, int y )
Grayscale2GrayscaleAlpha	Bitmap.cpp	/^static void Grayscale2GrayscaleAlpha(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
Grayscale2RGB	Bitmap.cpp	/^static void Grayscale2RGB(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
Grayscale2RGBA	Bitmap.cpp	/^static void Grayscale2RGBA(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
GrayscaleAlpha2Grayscale	Bitmap.cpp	/^static void GrayscaleAlpha2Grayscale(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
GrayscaleAlpha2RGB	Bitmap.cpp	/^static void GrayscaleAlpha2RGB(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
GrayscaleAlpha2RGBA	Bitmap.cpp	/^static void GrayscaleAlpha2RGBA(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
HCorridor	mapgen.cpp	/^void HCorridor( Map& map, int x0, int x1, int y )$/;"	f	namespace:mapgen	signature:( Map& map, int x0, int x1, int y )
HCorridor	mapgen.h	/^void HCorridor( Map& map, int x0, int x1, int y );$/;"	p	namespace:mapgen	signature:( Map& map, int x0, int x1, int y )
HSLtoRGB	canvas.cpp	/^Color HSLtoRGB( Color hsl )$/;"	f	signature:( Color hsl )
HSLtoRGB	canvas.h	/^Color HSLtoRGB(Color hsl);$/;"	p	signature:(Color hsl)
HandleCamInput	app.cpp	/^void App::HandleCamInput()$/;"	f	class:App	signature:()
HandleCamInput	app.h	/^	void HandleCamInput();$/;"	p	class:App	access:private	signature:()
HandleEvent	app.cpp	/^void App::HandleEvent(SDL_Event& event)$/;"	f	class:App	signature:(SDL_Event& event)
HandleEvent	app.h	/^	void HandleEvent(SDL_Event& event);$/;"	p	class:App	access:private	signature:(SDL_Event& event)
HandleEvent	sdlglapp.cpp	/^void SDLGLApp::HandleEvent(SDL_Event& event)$/;"	f	class:SDLGLApp	signature:(SDL_Event& event)
HandleEvent	sdlglapp.h	/^	virtual void HandleEvent(SDL_Event& event);$/;"	p	class:SDLGLApp	access:protected	signature:(SDL_Event& event)
Height	canvas.h	/^	int Height()$/;"	f	class:Canvas	access:public	signature:()
Height	map.h	/^	int Height()$/;"	f	class:Map	access:public	signature:()
INITIAL_SIZE	dynamicarray.h	/^	static const size_t INITIAL_SIZE = 20;$/;"	m	class:DynamicArray	access:private
Init	physics.h	/^	void Init( int argc, char** argv )$/;"	f	class:Physics	access:public	signature:( int argc, char** argv )
Input	app.h	/^		Input() { left = right = forward = back = false; }$/;"	f	struct:App::Input	access:public	signature:()
Input	app.h	/^	struct Input$/;"	s	class:App	access:private
Intersects	mapgen.h	/^	bool Intersects( Room& other )$/;"	f	struct:mapgen::Room	access:public	signature:( Room& other )
IsEmpty	dynamicarray.h	/^	bool IsEmpty()$/;"	f	class:DynamicArray	access:public	signature:()
IsFree	map.h	/^	bool IsFree( int x, int y )$/;"	f	class:Map	access:public	signature:( int x, int y )
LinkProgram	context.h	/^  PFNGLLINKPROGRAMPROC LinkProgram;$/;"	m	class:Render::Context	access:public
LoadBuffer	mesh.h	/^	void LoadBuffer( T* target, const T* source, int items_per_element )$/;"	f	class:Mesh	access:protected	signature:( T* target, const T* source, int items_per_element )
LoadFromFile	map.h	/^	void LoadFromFile( const char* path )$/;"	f	class:Map	access:public	signature:( const char* path )
LoadFromFile	shader.cpp	/^bool Shader::LoadFromFile( Render::Context* gl, const char* path, int t )$/;"	f	class:Shader	signature:( Render::Context* gl, const char* path, int t )
LoadFromFile	shader.h	/^	bool LoadFromFile( Render::Context* gl, const char* path, int t );$/;"	p	class:Shader	access:public	signature:( Render::Context* gl, const char* path, int t )
MakeCurrent	context.cpp	/^bool Context::MakeCurrent()$/;"	f	class:Render::Context	signature:()
MakeCurrent	context.h	/^  bool MakeCurrent();$/;"	p	class:Render::Context	access:protected	signature:()
MakeCurrent	sdlcontext.cpp	/^bool Context::MakeCurrent( SDL_Window* w )$/;"	f	class:Render::SDL::Context	signature:( SDL_Window* w )
MakeCurrent	sdlcontext.h	/^  bool MakeCurrent( SDL_Window* w );$/;"	p	class:Render::SDL::Context	access:public	signature:( SDL_Window* w )
MakeNoise	canvas.h	/^	void MakeNoise( Matrix2D<float>& noise, RNG& rng, int w, int h )$/;"	f	class:Canvas	access:public	signature:( Matrix2D<float>& noise, RNG& rng, int w, int h )
Map	map.h	/^	Map( const Map& other ) : map_data(other.map_data) {}$/;"	f	class:Map	access:public	signature:( const Map& other )
Map	map.h	/^	Map(){}$/;"	f	class:Map	access:public	signature:()
Map	map.h	/^	Map(int w, int h)$/;"	f	class:Map	access:public	signature:(int w, int h)
Map	map.h	/^class Map$/;"	c
Map::BLOCK_FREE	map.h	/^	static const int BLOCK_FREE = 0;$/;"	m	class:Map	access:public
Map::BLOCK_SOLID	map.h	/^	static const int BLOCK_SOLID = 1;$/;"	m	class:Map	access:public
Map::BlockData	map.h	/^	struct BlockData$/;"	s	class:Map	access:private
Map::BlockData::Set	map.h	/^		void Set( int x, int y, int block_type )$/;"	f	struct:Map::BlockData	access:public	signature:( int x, int y, int block_type )
Map::BlockData::block_type	map.h	/^		int block_type;$/;"	m	struct:Map::BlockData	access:public
Map::BlockData::x	map.h	/^		int x, y;$/;"	m	struct:Map::BlockData	access:public
Map::BlockData::y	map.h	/^		int x, y;$/;"	m	struct:Map::BlockData	access:public
Map::BlockType	map.h	/^	typedef int BlockType;$/;"	t	class:Map	access:public
Map::CanMove	map.h	/^	bool CanMove( float x, float y, float blocksize = 2.f )$/;"	f	class:Map	access:public	signature:( float x, float y, float blocksize = 2.f )
Map::Debug	map.h	/^	void Debug()$/;"	f	class:Map	access:public	signature:()
Map::GenerateModels	map.h	/^	void GenerateModels( int block_type = 1 )$/;"	f	class:Map	access:public	signature:( int block_type = 1 )
Map::GetModelsBuffer	map.h	/^	cml::matrix44f_c* GetModelsBuffer()$/;"	f	class:Map	access:public	signature:()
Map::GetModelsNum	map.h	/^	int GetModelsNum()$/;"	f	class:Map	access:public	signature:()
Map::Getint	map.h	/^	int Getint( int x, int y )$/;"	f	class:Map	access:public	signature:( int x, int y )
Map::Height	map.h	/^	int Height()$/;"	f	class:Map	access:public	signature:()
Map::IsFree	map.h	/^	bool IsFree( int x, int y )$/;"	f	class:Map	access:public	signature:( int x, int y )
Map::LoadFromFile	map.h	/^	void LoadFromFile( const char* path )$/;"	f	class:Map	access:public	signature:( const char* path )
Map::Map	map.h	/^	Map( const Map& other ) : map_data(other.map_data) {}$/;"	f	class:Map	access:public	signature:( const Map& other )
Map::Map	map.h	/^	Map(){}$/;"	f	class:Map	access:public	signature:()
Map::Map	map.h	/^	Map(int w, int h)$/;"	f	class:Map	access:public	signature:(int w, int h)
Map::PrintModels	map.h	/^	void PrintModels()$/;"	f	class:Map	access:public	signature:()
Map::SaveToFile	map.h	/^	void SaveToFile( const char* path )$/;"	f	class:Map	access:public	signature:( const char* path )
Map::Set	map.h	/^	void Set( int x, int y, int block )$/;"	f	class:Map	access:public	signature:( int x, int y, int block )
Map::Width	map.h	/^	int Width()$/;"	f	class:Map	access:public	signature:()
Map::map_data	map.h	/^	Matrix2D<int> map_data;$/;"	m	class:Map	access:private
Map::model_list	map.h	/^	DynamicArray<cml::matrix44f_c> model_list;$/;"	m	class:Map	access:private
Map::operator =	map.h	/^	Map& operator=( const Map& other )$/;"	f	class:Map	access:public	signature:( const Map& other )
Matrix	camera.cpp	/^cml::matrix44f_c Camera::Matrix()$/;"	f	class:Camera	signature:()
Matrix	camera.h	/^	cml::matrix44f_c Matrix();$/;"	p	class:Camera	access:public	signature:()
Matrix2D	matriz.h	/^	Matrix2D( const Matrix2D& other ) : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:( const Matrix2D& other )
Matrix2D	matriz.h	/^	Matrix2D( int rows_, int cols_ ) : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:( int rows_, int cols_ )
Matrix2D	matriz.h	/^	Matrix2D( int size ) : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:( int size )
Matrix2D	matriz.h	/^	Matrix2D() : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:()
Matrix2D	matriz.h	/^class Matrix2D$/;"	c
Matrix2D::Alloc	matriz.h	/^	void Alloc( int rows, int cols )$/;"	f	class:Matrix2D	access:public	signature:( int rows, int cols )
Matrix2D::Cols	matriz.h	/^	int Cols() { return cols; }$/;"	f	class:Matrix2D	access:public	signature:()
Matrix2D::Debug	matriz.h	/^	void Debug()$/;"	f	class:Matrix2D	access:public	signature:()
Matrix2D::Get	matriz.h	/^	T Get( int row, int col ) const$/;"	f	class:Matrix2D	access:public	signature:( int row, int col ) const
Matrix2D::Matrix2D	matriz.h	/^	Matrix2D( const Matrix2D& other ) : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:( const Matrix2D& other )
Matrix2D::Matrix2D	matriz.h	/^	Matrix2D( int rows_, int cols_ ) : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:( int rows_, int cols_ )
Matrix2D::Matrix2D	matriz.h	/^	Matrix2D( int size ) : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:( int size )
Matrix2D::Matrix2D	matriz.h	/^	Matrix2D() : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:()
Matrix2D::Raw	matriz.h	/^	const void* Raw()$/;"	f	class:Matrix2D	access:public	signature:()
Matrix2D::Rows	matriz.h	/^	int Rows() { return rows; }$/;"	f	class:Matrix2D	access:public	signature:()
Matrix2D::Set	matriz.h	/^	void Set( T val )$/;"	f	class:Matrix2D	access:public	signature:( T val )
Matrix2D::Set	matriz.h	/^	void Set( int row, int col, T val )$/;"	f	class:Matrix2D	access:public	signature:( int row, int col, T val )
Matrix2D::cols	matriz.h	/^	int rows, cols;$/;"	m	class:Matrix2D	access:private
Matrix2D::data	matriz.h	/^	T* data;$/;"	m	class:Matrix2D	access:private
Matrix2D::operator =	matriz.h	/^	Matrix2D& operator=( const Matrix2D& other )$/;"	f	class:Matrix2D	access:public	signature:( const Matrix2D& other )
Matrix2D::rows	matriz.h	/^	int rows, cols;$/;"	m	class:Matrix2D	access:private
Matrix2D::~Matrix2D	matriz.h	/^	~Matrix2D()$/;"	f	class:Matrix2D	access:public	signature:()
Mesh	mesh.h	/^	Mesh( Mesh::AttribConfig conf )$/;"	f	class:Mesh	access:public	signature:( Mesh::AttribConfig conf )
Mesh	mesh.h	/^class Mesh$/;"	c
Mesh::Alloc	mesh.h	/^	void Alloc( int num )$/;"	f	class:Mesh	access:protected	signature:( int num )
Mesh::AttribConfig	mesh.h	/^	enum class AttribConfig$/;"	c	class:Mesh	access:public
Mesh::AttribConfig::XYZUV_INST	mesh.h	/^		XYZUV_INST,$/;"	m	class:Mesh::AttribConfig	access:private
Mesh::AttribConfig::XYZ_UV_RST	mesh.h	/^		XYZ_UV_RST,$/;"	m	class:Mesh::AttribConfig	access:private
Mesh::ConfigAttrib	mesh.h	/^	void ConfigAttrib( Render::Context* gl, GLuint location, size_t num_floats, size_t stride = 0, size_t offset = 0, int attrdivisor = 0 \/* 0 => NO INSTANCING *\/ )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl, GLuint location, size_t num_floats, size_t stride = 0, size_t offset = 0, int attrdivisor = 0 )
Mesh::ConfigAttrib4fv	mesh.h	/^	void ConfigAttrib4fv( Render::Context* gl, GLuint location, int attrdivisor = 0 )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl, GLuint location, int attrdivisor = 0 )
Mesh::ConfigXYZUV_INST	mesh.h	/^	void ConfigXYZUV_INST( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
Mesh::ConfigXY_UV	mesh.h	/^	void ConfigXY_UV( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
Mesh::Dispose	mesh.h	/^	void Dispose( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
Mesh::GetVAO	mesh.h	/^	GLuint GetVAO()$/;"	f	class:Mesh	access:public	signature:()
Mesh::GetVBO	mesh.h	/^	GLuint GetVBO( int index )$/;"	f	class:Mesh	access:public	signature:( int index )
Mesh::LoadBuffer	mesh.h	/^	void LoadBuffer( T* target, const T* source, int items_per_element )$/;"	f	class:Mesh	access:protected	signature:( T* target, const T* source, int items_per_element )
Mesh::Mesh	mesh.h	/^	Mesh( Mesh::AttribConfig conf )$/;"	f	class:Mesh	access:public	signature:( Mesh::AttribConfig conf )
Mesh::NumElements	mesh.h	/^	size_t NumElements()$/;"	f	class:Mesh	access:public	signature:()
Mesh::Prepare	mesh.h	/^	void Prepare( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
Mesh::UploadBufferData	mesh.h	/^	void UploadBufferData( Render::Context* gl, GLuint vbo, int items_per_attr, GLfloat* buffer )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl, GLuint vbo, int items_per_attr, GLfloat* buffer )
Mesh::attrconf	mesh.h	/^	AttribConfig attrconf;$/;"	m	class:Mesh	access:protected
Mesh::normals	mesh.h	/^	GLfloat* normals;$/;"	m	class:Mesh	access:protected
Mesh::numElements	mesh.h	/^	size_t numElements;$/;"	m	class:Mesh	access:protected
Mesh::numvbo	mesh.h	/^	GLsizei numvbo;$/;"	m	class:Mesh	access:protected
Mesh::uvs	mesh.h	/^	GLfloat* uvs;$/;"	m	class:Mesh	access:protected
Mesh::vao	mesh.h	/^	GLuint vao;$/;"	m	class:Mesh	access:protected
Mesh::vbo	mesh.h	/^	GLuint* vbo;$/;"	m	class:Mesh	access:protected
Mesh::vertices	mesh.h	/^	GLfloat* vertices;$/;"	m	class:Mesh	access:protected
Mesh::~Mesh	mesh.h	/^	virtual ~Mesh()$/;"	f	class:Mesh	access:public	signature:()
Model	entity.h	/^	cml::matrix44f_c Model()$/;"	f	class:Entity	access:public	signature:()
Model	transform.h	/^	cml::matrix44f_c Model()$/;"	f	class:Transform	access:public	signature:()
NumElements	mesh.h	/^	size_t NumElements()$/;"	f	class:Mesh	access:public	signature:()
Object	program.h	/^	GLuint Object()$/;"	f	class:Program	access:public	signature:()
Object	shader.cpp	/^GLuint Shader::Object()$/;"	f	class:Shader	signature:()
Object	shader.h	/^	GLuint Object();$/;"	p	class:Shader	access:public	signature:()
OffsetAngle	camera.cpp	/^void Camera::OffsetAngle( float hor, float ver )$/;"	f	class:Camera	signature:( float hor, float ver )
OffsetAngle	camera.h	/^	void OffsetAngle( float hor, float ver );$/;"	p	class:Camera	access:public	signature:( float hor, float ver )
OffsetPosition	camera.cpp	/^void Camera::OffsetPosition( const cml::vector3f& offsetPosition )$/;"	f	class:Camera	signature:( const cml::vector3f& offsetPosition )
OffsetPosition	camera.h	/^	void OffsetPosition( const cml::vector3f& offsetPosition );$/;"	p	class:Camera	access:public	signature:( const cml::vector3f& offsetPosition )
PFNGLACTIVESHADERPROGRAMPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program);$/;"	t
PFNGLACTIVETEXTUREPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);$/;"	t
PFNGLATTACHSHADERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t
PFNGLBEGINCONDITIONALRENDERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);$/;"	t
PFNGLBEGINQUERYINDEXEDPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);$/;"	t
PFNGLBEGINQUERYPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);$/;"	t
PFNGLBEGINTRANSFORMFEEDBACKPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);$/;"	t
PFNGLBINDATTRIBLOCATIONPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name);$/;"	t
PFNGLBINDBUFFERBASEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);$/;"	t
PFNGLBINDBUFFERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);$/;"	t
PFNGLBINDBUFFERRANGEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);$/;"	t
PFNGLBINDBUFFERSBASEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERSBASEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers);$/;"	t
PFNGLBINDBUFFERSRANGEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERSRANGEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);$/;"	t
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);$/;"	t
PFNGLBINDFRAGDATALOCATIONPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name);$/;"	t
PFNGLBINDFRAMEBUFFERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);$/;"	t
PFNGLBINDIMAGETEXTUREPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);$/;"	t
PFNGLBINDIMAGETEXTURESPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDIMAGETEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures);$/;"	t
PFNGLBINDPROGRAMPIPELINEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline);$/;"	t
PFNGLBINDRENDERBUFFERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);$/;"	t
PFNGLBINDSAMPLERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);$/;"	t
PFNGLBINDSAMPLERSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDSAMPLERSPROC) (GLuint first, GLsizei count, const GLuint *samplers);$/;"	t
PFNGLBINDTEXTUREPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDTEXTUREPROC) (GLenum target, GLuint texture);$/;"	t
PFNGLBINDTEXTURESPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDTEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures);$/;"	t
PFNGLBINDTRANSFORMFEEDBACKPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);$/;"	t
PFNGLBINDVERTEXARRAYPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array);$/;"	t
PFNGLBINDVERTEXBUFFERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);$/;"	t
PFNGLBINDVERTEXBUFFERSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERSPROC) (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);$/;"	t
PFNGLBLENDCOLORPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	t
PFNGLBLENDEQUATIONIARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);$/;"	t
PFNGLBLENDEQUATIONIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);$/;"	t
PFNGLBLENDEQUATIONPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);$/;"	t
PFNGLBLENDEQUATIONSEPARATEIARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);$/;"	t
PFNGLBLENDEQUATIONSEPARATEIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);$/;"	t
PFNGLBLENDEQUATIONSEPARATEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);$/;"	t
PFNGLBLENDFUNCIARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);$/;"	t
PFNGLBLENDFUNCIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);$/;"	t
PFNGLBLENDFUNCPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCPROC) (GLenum sfactor, GLenum dfactor);$/;"	t
PFNGLBLENDFUNCSEPARATEIARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);$/;"	t
PFNGLBLENDFUNCSEPARATEIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);$/;"	t
PFNGLBLENDFUNCSEPARATEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);$/;"	t
PFNGLBLITFRAMEBUFFERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);$/;"	t
PFNGLBUFFERDATAPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, GLenum usage);$/;"	t
PFNGLBUFFERSTORAGEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBUFFERSTORAGEPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);$/;"	t
PFNGLBUFFERSUBDATAPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);$/;"	t
PFNGLCHECKFRAMEBUFFERSTATUSPROC	glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);$/;"	t
PFNGLCLAMPCOLORPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);$/;"	t
PFNGLCLEARBUFFERDATAPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);$/;"	t
PFNGLCLEARBUFFERFIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);$/;"	t
PFNGLCLEARBUFFERFVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value);$/;"	t
PFNGLCLEARBUFFERIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value);$/;"	t
PFNGLCLEARBUFFERSUBDATAPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);$/;"	t
PFNGLCLEARBUFFERUIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value);$/;"	t
PFNGLCLEARCOLORPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	t
PFNGLCLEARDEPTHFPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC) (GLfloat d);$/;"	t
PFNGLCLEARDEPTHPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARDEPTHPROC) (GLdouble depth);$/;"	t
PFNGLCLEARPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARPROC) (GLbitfield mask);$/;"	t
PFNGLCLEARSTENCILPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARSTENCILPROC) (GLint s);$/;"	t
PFNGLCLEARTEXIMAGEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARTEXIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);$/;"	t
PFNGLCLEARTEXSUBIMAGEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARTEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);$/;"	t
PFNGLCLIENTWAITSYNCPROC	glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t
PFNGLCOLORMASKIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);$/;"	t
PFNGLCOLORMASKPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORMASKPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);$/;"	t
PFNGLCOMPILESHADERINCLUDEARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);$/;"	t
PFNGLCOMPILESHADERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE1DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE2DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE3DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOPYBUFFERSUBDATAPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);$/;"	t
PFNGLCOPYIMAGESUBDATAPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);$/;"	t
PFNGLCOPYTEXIMAGE1DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);$/;"	t
PFNGLCOPYTEXIMAGE2DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);$/;"	t
PFNGLCOPYTEXSUBIMAGE1DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);$/;"	t
PFNGLCOPYTEXSUBIMAGE2DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLCOPYTEXSUBIMAGE3DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLCREATEPROGRAMPROC	glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);$/;"	t
PFNGLCREATESHADERPROC	glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);$/;"	t
PFNGLCREATESHADERPROGRAMVPROC	glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar *const*strings);$/;"	t
PFNGLCREATESYNCFROMCLEVENTARBPROC	glcorearb.h	/^typedef GLsync (APIENTRYP PFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context *context, struct _cl_event *event, GLbitfield flags);$/;"	t
PFNGLCULLFACEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLCULLFACEPROC) (GLenum mode);$/;"	t
PFNGLDEBUGMESSAGECALLBACKARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const void *userParam);$/;"	t
PFNGLDEBUGMESSAGECALLBACKPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);$/;"	t
PFNGLDEBUGMESSAGECONTROLARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);$/;"	t
PFNGLDEBUGMESSAGECONTROLPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);$/;"	t
PFNGLDEBUGMESSAGEINSERTARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);$/;"	t
PFNGLDEBUGMESSAGEINSERTPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);$/;"	t
PFNGLDELETEBUFFERSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);$/;"	t
PFNGLDELETEFRAMEBUFFERSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers);$/;"	t
PFNGLDELETENAMEDSTRINGARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);$/;"	t
PFNGLDELETEPROGRAMPIPELINESPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines);$/;"	t
PFNGLDELETEPROGRAMPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);$/;"	t
PFNGLDELETEQUERIESPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids);$/;"	t
PFNGLDELETERENDERBUFFERSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers);$/;"	t
PFNGLDELETESAMPLERSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint *samplers);$/;"	t
PFNGLDELETESHADERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);$/;"	t
PFNGLDELETESYNCPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETESYNCPROC) (GLsync sync);$/;"	t
PFNGLDELETETEXTURESPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETETEXTURESPROC) (GLsizei n, const GLuint *textures);$/;"	t
PFNGLDELETETRANSFORMFEEDBACKSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids);$/;"	t
PFNGLDELETEVERTEXARRAYSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);$/;"	t
PFNGLDEPTHFUNCPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHFUNCPROC) (GLenum func);$/;"	t
PFNGLDEPTHMASKPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHMASKPROC) (GLboolean flag);$/;"	t
PFNGLDEPTHRANGEARRAYVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLdouble *v);$/;"	t
PFNGLDEPTHRANGEFPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC) (GLfloat n, GLfloat f);$/;"	t
PFNGLDEPTHRANGEINDEXEDPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLdouble n, GLdouble f);$/;"	t
PFNGLDEPTHRANGEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEPROC) (GLdouble near, GLdouble far);$/;"	t
PFNGLDETACHSHADERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t
PFNGLDISABLEIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDISABLEIPROC) (GLenum target, GLuint index);$/;"	t
PFNGLDISABLEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDISABLEPROC) (GLenum cap);$/;"	t
PFNGLDISABLEVERTEXATTRIBARRAYPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t
PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);$/;"	t
PFNGLDISPATCHCOMPUTEINDIRECTPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect);$/;"	t
PFNGLDISPATCHCOMPUTEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);$/;"	t
PFNGLDRAWARRAYSINDIRECTPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect);$/;"	t
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);$/;"	t
PFNGLDRAWARRAYSINSTANCEDPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);$/;"	t
PFNGLDRAWARRAYSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSPROC) (GLenum mode, GLint first, GLsizei count);$/;"	t
PFNGLDRAWBUFFERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWBUFFERPROC) (GLenum mode);$/;"	t
PFNGLDRAWBUFFERSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs);$/;"	t
PFNGLDRAWELEMENTSBASEVERTEXPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);$/;"	t
PFNGLDRAWELEMENTSINDIRECTPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);$/;"	t
PFNGLDRAWELEMENTSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices);$/;"	t
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);$/;"	t
PFNGLDRAWRANGEELEMENTSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);$/;"	t
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei instancecount);$/;"	t
PFNGLDRAWTRANSFORMFEEDBACKPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);$/;"	t
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);$/;"	t
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream);$/;"	t
PFNGLENABLEIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLENABLEIPROC) (GLenum target, GLuint index);$/;"	t
PFNGLENABLEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLENABLEPROC) (GLenum cap);$/;"	t
PFNGLENABLEVERTEXATTRIBARRAYPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t
PFNGLENDCONDITIONALRENDERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC) (void);$/;"	t
PFNGLENDQUERYINDEXEDPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index);$/;"	t
PFNGLENDQUERYPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLENDQUERYPROC) (GLenum target);$/;"	t
PFNGLENDTRANSFORMFEEDBACKPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC) (void);$/;"	t
PFNGLFENCESYNCPROC	glcorearb.h	/^typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags);$/;"	t
PFNGLFINISHPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLFINISHPROC) (void);$/;"	t
PFNGLFLUSHMAPPEDBUFFERRANGEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);$/;"	t
PFNGLFLUSHPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLFLUSHPROC) (void);$/;"	t
PFNGLFRAMEBUFFERPARAMETERIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);$/;"	t
PFNGLFRAMEBUFFERRENDERBUFFERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);$/;"	t
PFNGLFRAMEBUFFERTEXTURE1DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	t
PFNGLFRAMEBUFFERTEXTURE2DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	t
PFNGLFRAMEBUFFERTEXTURE3DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);$/;"	t
PFNGLFRAMEBUFFERTEXTURELAYERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);$/;"	t
PFNGLFRAMEBUFFERTEXTUREPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);$/;"	t
PFNGLFRONTFACEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLFRONTFACEPROC) (GLenum mode);$/;"	t
PFNGLGENBUFFERSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);$/;"	t
PFNGLGENERATEMIPMAPPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC) (GLenum target);$/;"	t
PFNGLGENFRAMEBUFFERSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);$/;"	t
PFNGLGENPROGRAMPIPELINESPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines);$/;"	t
PFNGLGENQUERIESPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids);$/;"	t
PFNGLGENRENDERBUFFERSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);$/;"	t
PFNGLGENSAMPLERSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers);$/;"	t
PFNGLGENTEXTURESPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGENTEXTURESPROC) (GLsizei n, GLuint *textures);$/;"	t
PFNGLGENTRANSFORMFEEDBACKSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);$/;"	t
PFNGLGENVERTEXARRAYSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);$/;"	t
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);$/;"	t
PFNGLGETACTIVEATTRIBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);$/;"	t
PFNGLGETACTIVESUBROUTINENAMEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);$/;"	t
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);$/;"	t
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);$/;"	t
PFNGLGETACTIVEUNIFORMBLOCKIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);$/;"	t
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);$/;"	t
PFNGLGETACTIVEUNIFORMNAMEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);$/;"	t
PFNGLGETACTIVEUNIFORMPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);$/;"	t
PFNGLGETACTIVEUNIFORMSIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);$/;"	t
PFNGLGETATTACHEDSHADERSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);$/;"	t
PFNGLGETATTRIBLOCATIONPROC	glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t
PFNGLGETBOOLEANI_VPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);$/;"	t
PFNGLGETBOOLEANVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANVPROC) (GLenum pname, GLboolean *data);$/;"	t
PFNGLGETBUFFERPARAMETERI64VPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params);$/;"	t
PFNGLGETBUFFERPARAMETERIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETBUFFERPOINTERVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, void **params);$/;"	t
PFNGLGETBUFFERSUBDATAPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, void *data);$/;"	t
PFNGLGETCOMPRESSEDTEXIMAGEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, void *img);$/;"	t
PFNGLGETDEBUGMESSAGELOGARBPROC	glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);$/;"	t
PFNGLGETDEBUGMESSAGELOGPROC	glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);$/;"	t
PFNGLGETDOUBLEI_VPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);$/;"	t
PFNGLGETDOUBLEVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEVPROC) (GLenum pname, GLdouble *data);$/;"	t
PFNGLGETERRORPROC	glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLGETERRORPROC) (void);$/;"	t
PFNGLGETFLOATI_VPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);$/;"	t
PFNGLGETFLOATVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFLOATVPROC) (GLenum pname, GLfloat *data);$/;"	t
PFNGLGETFRAGDATAINDEXPROC	glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar *name);$/;"	t
PFNGLGETFRAGDATALOCATIONPROC	glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);$/;"	t
PFNGLGETFRAMEBUFFERPARAMETERIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETGRAPHICSRESETSTATUSARBPROC	glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void);$/;"	t
PFNGLGETIMAGEHANDLEARBPROC	glcorearb.h	/^typedef GLuint64 (APIENTRYP PFNGLGETIMAGEHANDLEARBPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);$/;"	t
PFNGLGETINTEGER64I_VPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);$/;"	t
PFNGLGETINTEGER64VPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *data);$/;"	t
PFNGLGETINTEGERI_VPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);$/;"	t
PFNGLGETINTEGERVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGERVPROC) (GLenum pname, GLint *data);$/;"	t
PFNGLGETINTERNALFORMATI64VPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);$/;"	t
PFNGLGETINTERNALFORMATIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);$/;"	t
PFNGLGETMULTISAMPLEFVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val);$/;"	t
PFNGLGETNAMEDSTRINGARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);$/;"	t
PFNGLGETNAMEDSTRINGIVARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum pname, GLint *params);$/;"	t
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, void *img);$/;"	t
PFNGLGETNTEXIMAGEARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);$/;"	t
PFNGLGETNUNIFORMDVARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);$/;"	t
PFNGLGETNUNIFORMFVARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);$/;"	t
PFNGLGETNUNIFORMIVARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);$/;"	t
PFNGLGETNUNIFORMUIVARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params);$/;"	t
PFNGLGETOBJECTLABELPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);$/;"	t
PFNGLGETOBJECTPTRLABELPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);$/;"	t
PFNGLGETPOINTERVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPOINTERVPROC) (GLenum pname, void **params);$/;"	t
PFNGLGETPROGRAMBINARYPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);$/;"	t
PFNGLGETPROGRAMINFOLOGPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	t
PFNGLGETPROGRAMINTERFACEIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint *params);$/;"	t
PFNGLGETPROGRAMIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);$/;"	t
PFNGLGETPROGRAMPIPELINEINFOLOGPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	t
PFNGLGETPROGRAMPIPELINEIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *params);$/;"	t
PFNGLGETPROGRAMRESOURCEINDEXPROC	glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);$/;"	t
PFNGLGETPROGRAMRESOURCEIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);$/;"	t
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC	glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);$/;"	t
PFNGLGETPROGRAMRESOURCELOCATIONPROC	glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar *name);$/;"	t
PFNGLGETPROGRAMRESOURCENAMEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);$/;"	t
PFNGLGETPROGRAMSTAGEIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values);$/;"	t
PFNGLGETQUERYINDEXEDIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);$/;"	t
PFNGLGETQUERYIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETQUERYOBJECTI64VPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params);$/;"	t
PFNGLGETQUERYOBJECTIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params);$/;"	t
PFNGLGETQUERYOBJECTUI64VPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params);$/;"	t
PFNGLGETQUERYOBJECTUIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params);$/;"	t
PFNGLGETRENDERBUFFERPARAMETERIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETSAMPLERPARAMETERFVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETSAMPLERPARAMETERIIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *params);$/;"	t
PFNGLGETSAMPLERPARAMETERIUIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint *params);$/;"	t
PFNGLGETSAMPLERPARAMETERIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *params);$/;"	t
PFNGLGETSHADERINFOLOGPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	t
PFNGLGETSHADERIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);$/;"	t
PFNGLGETSHADERPRECISIONFORMATPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);$/;"	t
PFNGLGETSHADERSOURCEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);$/;"	t
PFNGLGETSTRINGIPROC	glcorearb.h	/^typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);$/;"	t
PFNGLGETSTRINGPROC	glcorearb.h	/^typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGPROC) (GLenum name);$/;"	t
PFNGLGETSUBROUTINEINDEXPROC	glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name);$/;"	t
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC	glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name);$/;"	t
PFNGLGETSYNCIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);$/;"	t
PFNGLGETTEXIMAGEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC) (GLenum target, GLint level, GLenum format, GLenum type, void *pixels);$/;"	t
PFNGLGETTEXLEVELPARAMETERFVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC) (GLenum target, GLint level, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETTEXLEVELPARAMETERIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC) (GLenum target, GLint level, GLenum pname, GLint *params);$/;"	t
PFNGLGETTEXPARAMETERFVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETTEXPARAMETERIIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETTEXPARAMETERIUIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params);$/;"	t
PFNGLGETTEXPARAMETERIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETTEXTUREHANDLEARBPROC	glcorearb.h	/^typedef GLuint64 (APIENTRYP PFNGLGETTEXTUREHANDLEARBPROC) (GLuint texture);$/;"	t
PFNGLGETTEXTURESAMPLERHANDLEARBPROC	glcorearb.h	/^typedef GLuint64 (APIENTRYP PFNGLGETTEXTURESAMPLERHANDLEARBPROC) (GLuint texture, GLuint sampler);$/;"	t
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);$/;"	t
PFNGLGETUNIFORMBLOCKINDEXPROC	glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);$/;"	t
PFNGLGETUNIFORMDVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params);$/;"	t
PFNGLGETUNIFORMFVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params);$/;"	t
PFNGLGETUNIFORMINDICESPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);$/;"	t
PFNGLGETUNIFORMIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params);$/;"	t
PFNGLGETUNIFORMLOCATIONPROC	glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t
PFNGLGETUNIFORMSUBROUTINEUIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params);$/;"	t
PFNGLGETUNIFORMUIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params);$/;"	t
PFNGLGETVERTEXATTRIBDVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params);$/;"	t
PFNGLGETVERTEXATTRIBFVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETVERTEXATTRIBIIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params);$/;"	t
PFNGLGETVERTEXATTRIBIUIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params);$/;"	t
PFNGLGETVERTEXATTRIBIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);$/;"	t
PFNGLGETVERTEXATTRIBLDVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *params);$/;"	t
PFNGLGETVERTEXATTRIBLUI64VARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VARBPROC) (GLuint index, GLenum pname, GLuint64EXT *params);$/;"	t
PFNGLGETVERTEXATTRIBPOINTERVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void **pointer);$/;"	t
PFNGLHINTPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLHINTPROC) (GLenum target, GLenum mode);$/;"	t
PFNGLINVALIDATEBUFFERDATAPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer);$/;"	t
PFNGLINVALIDATEBUFFERSUBDATAPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);$/;"	t
PFNGLINVALIDATEFRAMEBUFFERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments);$/;"	t
PFNGLINVALIDATESUBFRAMEBUFFERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLINVALIDATETEXIMAGEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level);$/;"	t
PFNGLINVALIDATETEXSUBIMAGEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);$/;"	t
PFNGLISBUFFERPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer);$/;"	t
PFNGLISENABLEDIPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC) (GLenum target, GLuint index);$/;"	t
PFNGLISENABLEDPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC) (GLenum cap);$/;"	t
PFNGLISFRAMEBUFFERPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);$/;"	t
PFNGLISIMAGEHANDLERESIDENTARBPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle);$/;"	t
PFNGLISNAMEDSTRINGARBPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);$/;"	t
PFNGLISPROGRAMPIPELINEPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline);$/;"	t
PFNGLISPROGRAMPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);$/;"	t
PFNGLISQUERYPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISQUERYPROC) (GLuint id);$/;"	t
PFNGLISRENDERBUFFERPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);$/;"	t
PFNGLISSAMPLERPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC) (GLuint sampler);$/;"	t
PFNGLISSHADERPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISSHADERPROC) (GLuint shader);$/;"	t
PFNGLISSYNCPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISSYNCPROC) (GLsync sync);$/;"	t
PFNGLISTEXTUREHANDLERESIDENTARBPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISTEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);$/;"	t
PFNGLISTEXTUREPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC) (GLuint texture);$/;"	t
PFNGLISTRANSFORMFEEDBACKPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id);$/;"	t
PFNGLISVERTEXARRAYPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC) (GLuint array);$/;"	t
PFNGLLINEWIDTHPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLLINEWIDTHPROC) (GLfloat width);$/;"	t
PFNGLLINKPROGRAMPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);$/;"	t
PFNGLLOGICOPPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLLOGICOPPROC) (GLenum opcode);$/;"	t
PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) (GLuint64 handle);$/;"	t
PFNGLMAKEIMAGEHANDLERESIDENTARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle, GLenum access);$/;"	t
PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) (GLuint64 handle);$/;"	t
PFNGLMAKETEXTUREHANDLERESIDENTARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);$/;"	t
PFNGLMAPBUFFERPROC	glcorearb.h	/^typedef void *(APIENTRYP PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);$/;"	t
PFNGLMAPBUFFERRANGEPROC	glcorearb.h	/^typedef void *(APIENTRYP PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);$/;"	t
PFNGLMEMORYBARRIERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);$/;"	t
PFNGLMINSAMPLESHADINGARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLMINSAMPLESHADINGARBPROC) (GLfloat value);$/;"	t
PFNGLMINSAMPLESHADINGPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC) (GLfloat value);$/;"	t
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);$/;"	t
PFNGLMULTIDRAWARRAYSINDIRECTPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);$/;"	t
PFNGLMULTIDRAWARRAYSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);$/;"	t
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);$/;"	t
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);$/;"	t
PFNGLMULTIDRAWELEMENTSINDIRECTPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);$/;"	t
PFNGLMULTIDRAWELEMENTSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);$/;"	t
PFNGLNAMEDSTRINGARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);$/;"	t
PFNGLOBJECTLABELPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);$/;"	t
PFNGLOBJECTPTRLABELPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);$/;"	t
PFNGLPATCHPARAMETERFVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values);$/;"	t
PFNGLPATCHPARAMETERIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value);$/;"	t
PFNGLPAUSETRANSFORMFEEDBACKPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC) (void);$/;"	t
PFNGLPIXELSTOREFPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREFPROC) (GLenum pname, GLfloat param);$/;"	t
PFNGLPIXELSTOREIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREIPROC) (GLenum pname, GLint param);$/;"	t
PFNGLPOINTPARAMETERFPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);$/;"	t
PFNGLPOINTPARAMETERFVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);$/;"	t
PFNGLPOINTPARAMETERIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);$/;"	t
PFNGLPOINTPARAMETERIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);$/;"	t
PFNGLPOINTSIZEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTSIZEPROC) (GLfloat size);$/;"	t
PFNGLPOLYGONMODEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPOLYGONMODEPROC) (GLenum face, GLenum mode);$/;"	t
PFNGLPOLYGONOFFSETPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC) (GLfloat factor, GLfloat units);$/;"	t
PFNGLPOPDEBUGGROUPPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPOPDEBUGGROUPPROC) (void);$/;"	t
PFNGLPRIMITIVERESTARTINDEXPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);$/;"	t
PFNGLPROGRAMBINARYPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);$/;"	t
PFNGLPROGRAMPARAMETERIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);$/;"	t
PFNGLPROGRAMUNIFORM1DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble v0);$/;"	t
PFNGLPROGRAMUNIFORM1DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORM1FPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat v0);$/;"	t
PFNGLPROGRAMUNIFORM1FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM1IPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0);$/;"	t
PFNGLPROGRAMUNIFORM1IVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM1UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint v0);$/;"	t
PFNGLPROGRAMUNIFORM1UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLPROGRAMUNIFORM2DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1);$/;"	t
PFNGLPROGRAMUNIFORM2DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORM2FPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);$/;"	t
PFNGLPROGRAMUNIFORM2FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM2IPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint v0, GLint v1);$/;"	t
PFNGLPROGRAMUNIFORM2IVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM2UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);$/;"	t
PFNGLPROGRAMUNIFORM2UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLPROGRAMUNIFORM3DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);$/;"	t
PFNGLPROGRAMUNIFORM3DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORM3FPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	t
PFNGLPROGRAMUNIFORM3FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM3IPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);$/;"	t
PFNGLPROGRAMUNIFORM3IVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM3UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	t
PFNGLPROGRAMUNIFORM3UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLPROGRAMUNIFORM4DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);$/;"	t
PFNGLPROGRAMUNIFORM4DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORM4FPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);$/;"	t
PFNGLPROGRAMUNIFORM4FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM4IPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);$/;"	t
PFNGLPROGRAMUNIFORM4IVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM4UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);$/;"	t
PFNGLPROGRAMUNIFORM4UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) (GLuint program, GLint location, GLuint64 value);$/;"	t
PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROVOKINGVERTEXPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC) (GLenum mode);$/;"	t
PFNGLPUSHDEBUGGROUPPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);$/;"	t
PFNGLQUERYCOUNTERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);$/;"	t
PFNGLREADBUFFERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLREADBUFFERPROC) (GLenum mode);$/;"	t
PFNGLREADNPIXELSARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);$/;"	t
PFNGLREADPIXELSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLREADPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);$/;"	t
PFNGLRELEASESHADERCOMPILERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC) (void);$/;"	t
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERBUFFERSTORAGEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRESUMETRANSFORMFEEDBACKPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC) (void);$/;"	t
PFNGLSAMPLECOVERAGEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLfloat value, GLboolean invert);$/;"	t
PFNGLSAMPLEMASKIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC) (GLuint maskNumber, GLbitfield mask);$/;"	t
PFNGLSAMPLERPARAMETERFPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param);$/;"	t
PFNGLSAMPLERPARAMETERFVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat *param);$/;"	t
PFNGLSAMPLERPARAMETERIIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint *param);$/;"	t
PFNGLSAMPLERPARAMETERIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param);$/;"	t
PFNGLSAMPLERPARAMETERIUIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint *param);$/;"	t
PFNGLSAMPLERPARAMETERIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint *param);$/;"	t
PFNGLSCISSORARRAYVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint *v);$/;"	t
PFNGLSCISSORINDEXEDPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);$/;"	t
PFNGLSCISSORINDEXEDVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLSCISSORPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLSHADERBINARYPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);$/;"	t
PFNGLSHADERSOURCEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);$/;"	t
PFNGLSHADERSTORAGEBLOCKBINDINGPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);$/;"	t
PFNGLSTENCILFUNCPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILFUNCPROC) (GLenum func, GLint ref, GLuint mask);$/;"	t
PFNGLSTENCILFUNCSEPARATEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask);$/;"	t
PFNGLSTENCILMASKPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILMASKPROC) (GLuint mask);$/;"	t
PFNGLSTENCILMASKSEPARATEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);$/;"	t
PFNGLSTENCILOPPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILOPPROC) (GLenum fail, GLenum zfail, GLenum zpass);$/;"	t
PFNGLSTENCILOPSEPARATEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);$/;"	t
PFNGLTEXBUFFERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer);$/;"	t
PFNGLTEXBUFFERRANGEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);$/;"	t
PFNGLTEXIMAGE1DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXIMAGE2DMULTISAMPLEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXIMAGE2DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXIMAGE3DMULTISAMPLEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXIMAGE3DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXPAGECOMMITMENTARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPAGECOMMITMENTARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident);$/;"	t
PFNGLTEXPARAMETERFPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat param);$/;"	t
PFNGLTEXPARAMETERFVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);$/;"	t
PFNGLTEXPARAMETERIIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params);$/;"	t
PFNGLTEXPARAMETERIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);$/;"	t
PFNGLTEXPARAMETERIUIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params);$/;"	t
PFNGLTEXPARAMETERIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);$/;"	t
PFNGLTEXSTORAGE1DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);$/;"	t
PFNGLTEXSTORAGE2DMULTISAMPLEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXSTORAGE2DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLTEXSTORAGE3DMULTISAMPLEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXSTORAGE3DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);$/;"	t
PFNGLTEXSUBIMAGE1DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXSUBIMAGE2DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXSUBIMAGE3DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXTUREVIEWPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);$/;"	t
PFNGLTRANSFORMFEEDBACKVARYINGSPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);$/;"	t
PFNGLUNIFORM1DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1DPROC) (GLint location, GLdouble x);$/;"	t
PFNGLUNIFORM1DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLUNIFORM1FPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);$/;"	t
PFNGLUNIFORM1FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM1IPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);$/;"	t
PFNGLUNIFORM1IVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM1UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);$/;"	t
PFNGLUNIFORM1UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORM2DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y);$/;"	t
PFNGLUNIFORM2DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLUNIFORM2FPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);$/;"	t
PFNGLUNIFORM2FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM2IPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);$/;"	t
PFNGLUNIFORM2IVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM2UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);$/;"	t
PFNGLUNIFORM2UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORM3DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLUNIFORM3DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLUNIFORM3FPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	t
PFNGLUNIFORM3FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM3IPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);$/;"	t
PFNGLUNIFORM3IVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM3UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	t
PFNGLUNIFORM3UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORM4DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLUNIFORM4DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLUNIFORM4FPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);$/;"	t
PFNGLUNIFORM4FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM4IPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);$/;"	t
PFNGLUNIFORM4IVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM4UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);$/;"	t
PFNGLUNIFORM4UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORMBLOCKBINDINGPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);$/;"	t
PFNGLUNIFORMHANDLEUI64ARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64ARBPROC) (GLint location, GLuint64 value);$/;"	t
PFNGLUNIFORMHANDLEUI64VARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value);$/;"	t
PFNGLUNIFORMMATRIX2DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX2FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX2X3DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX2X3FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX2X4DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX2X4FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX3DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX3FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX3X2DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX3X2FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX3X4DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX3X4FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX4DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX4FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX4X2DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX4X2FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX4X3DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX4X3FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMSUBROUTINESUIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices);$/;"	t
PFNGLUNMAPBUFFERPROC	glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target);$/;"	t
PFNGLUSEPROGRAMPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);$/;"	t
PFNGLUSEPROGRAMSTAGESPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program);$/;"	t
PFNGLVALIDATEPROGRAMPIPELINEPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline);$/;"	t
PFNGLVALIDATEPROGRAMPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC) (GLuint program);$/;"	t
PFNGLVERTEXATTRIB1DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);$/;"	t
PFNGLVERTEXATTRIB1DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB1FPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);$/;"	t
PFNGLVERTEXATTRIB1FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB1SPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);$/;"	t
PFNGLVERTEXATTRIB1SVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB2DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);$/;"	t
PFNGLVERTEXATTRIB2DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB2FPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);$/;"	t
PFNGLVERTEXATTRIB2FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB2SPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);$/;"	t
PFNGLVERTEXATTRIB2SVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB3DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLVERTEXATTRIB3DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB3FPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLVERTEXATTRIB3FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB3SPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);$/;"	t
PFNGLVERTEXATTRIB3SVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB4BVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v);$/;"	t
PFNGLVERTEXATTRIB4DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLVERTEXATTRIB4DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB4FPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	t
PFNGLVERTEXATTRIB4FVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB4IVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIB4NBVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v);$/;"	t
PFNGLVERTEXATTRIB4NIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIB4NSVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB4NUBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);$/;"	t
PFNGLVERTEXATTRIB4NUBVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v);$/;"	t
PFNGLVERTEXATTRIB4NUIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIB4NUSVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v);$/;"	t
PFNGLVERTEXATTRIB4SPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);$/;"	t
PFNGLVERTEXATTRIB4SVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB4UBVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v);$/;"	t
PFNGLVERTEXATTRIB4UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIB4USVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v);$/;"	t
PFNGLVERTEXATTRIBBINDINGPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex);$/;"	t
PFNGLVERTEXATTRIBDIVISORPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor);$/;"	t
PFNGLVERTEXATTRIBFORMATPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);$/;"	t
PFNGLVERTEXATTRIBI1IPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x);$/;"	t
PFNGLVERTEXATTRIBI1IVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI1UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x);$/;"	t
PFNGLVERTEXATTRIBI1UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI2IPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);$/;"	t
PFNGLVERTEXATTRIBI2IVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI2UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y);$/;"	t
PFNGLVERTEXATTRIBI2UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI3IPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z);$/;"	t
PFNGLVERTEXATTRIBI3IVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI3UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z);$/;"	t
PFNGLVERTEXATTRIBI3UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI4BVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v);$/;"	t
PFNGLVERTEXATTRIBI4IPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);$/;"	t
PFNGLVERTEXATTRIBI4IVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI4SVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIBI4UBVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v);$/;"	t
PFNGLVERTEXATTRIBI4UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);$/;"	t
PFNGLVERTEXATTRIBI4UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI4USVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v);$/;"	t
PFNGLVERTEXATTRIBIFORMATPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);$/;"	t
PFNGLVERTEXATTRIBIPOINTERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);$/;"	t
PFNGLVERTEXATTRIBL1DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x);$/;"	t
PFNGLVERTEXATTRIBL1DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIBL1UI64ARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64ARBPROC) (GLuint index, GLuint64EXT x);$/;"	t
PFNGLVERTEXATTRIBL1UI64VARBPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VARBPROC) (GLuint index, const GLuint64EXT *v);$/;"	t
PFNGLVERTEXATTRIBL2DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y);$/;"	t
PFNGLVERTEXATTRIBL2DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIBL3DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLVERTEXATTRIBL3DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIBL4DPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLVERTEXATTRIBL4DVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIBLFORMATPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);$/;"	t
PFNGLVERTEXATTRIBLPOINTERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);$/;"	t
PFNGLVERTEXATTRIBP1UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP1UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBP2UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP2UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBP3UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP3UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBP4UIPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP4UIVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBPOINTERPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);$/;"	t
PFNGLVERTEXBINDINGDIVISORPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor);$/;"	t
PFNGLVIEWPORTARRAYVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v);$/;"	t
PFNGLVIEWPORTINDEXEDFPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);$/;"	t
PFNGLVIEWPORTINDEXEDFVPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVIEWPORTPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLWAITSYNCPROC	glcorearb.h	/^typedef void (APIENTRYP PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t
PLAYER_VISION_RANGE	constants.h	/^constexpr float PLAYER_VISION_RANGE = 17.f;$/;"	v
PNG_TYPE	stb_image.h	2432;"	d
PhysicStep	entity.h	/^	void PhysicStep()$/;"	f	class:Entity	access:public	signature:()
Physics	physics.h	/^class Physics$/;"	c
Physics::AddCubeBody	physics.h	/^	void AddCubeBody( float x, float y )$/;"	f	class:Physics	access:public	signature:( float x, float y )
Physics::Cleanup	physics.h	/^	void Cleanup()$/;"	f	class:Physics	access:public	signature:()
Physics::CreateBulletBody	physics.h	/^	b2Body* CreateBulletBody( float x, float y )$/;"	f	class:Physics	access:public	signature:( float x, float y )
Physics::CreateSphereBody	physics.h	/^	b2Body* CreateSphereBody( float x, float y )$/;"	f	class:Physics	access:public	signature:( float x, float y )
Physics::Init	physics.h	/^	void Init( int argc, char** argv )$/;"	f	class:Physics	access:public	signature:( int argc, char** argv )
Physics::Step	physics.h	/^	void Step()$/;"	f	class:Physics	access:public	signature:()
Physics::contactlistener	physics.h	/^	ContactListener contactlistener;$/;"	m	class:Physics	access:private
Physics::positionIterations	physics.h	/^	const int32 positionIterations = 2;$/;"	m	class:Physics	access:public
Physics::timeStep	physics.h	/^	const float32 timeStep = 1.0f \/ 60.0f;$/;"	m	class:Physics	access:public
Physics::velocityIterations	physics.h	/^	const int32 velocityIterations = 6;$/;"	m	class:Physics	access:public
Physics::world	physics.h	/^	b2World* world;$/;"	m	class:Physics	access:private
Plane	plane.h	/^	Plane() :$/;"	f	class:Plane	access:public	signature:()
Plane	plane.h	/^class Plane : public Mesh$/;"	c	inherits:Mesh
Plane::Plane	plane.h	/^	Plane() :$/;"	f	class:Plane	access:public	signature:()
Plane::Prepare	plane.h	/^	void Prepare( Render::Context* gl, int width, int height, float planewidth=1.f, float planeheight=1.f )$/;"	f	class:Plane	access:public	signature:( Render::Context* gl, int width, int height, float planewidth=1.f, float planeheight=1.f )
Plane::UpdateVertices	plane.h	/^	void UpdateVertices( int width, int height, int planewidth, int planeheight )$/;"	f	class:Plane	access:public	signature:( int width, int height, int planewidth, int planeheight )
Plot	canvas.cpp	/^void Canvas::Plot( int x, int y, Color c )$/;"	f	class:Canvas	signature:( int x, int y, Color c )
Plot	canvas.h	/^	void Plot( int x, int y, Color c );$/;"	p	class:Canvas	access:public	signature:( int x, int y, Color c )
Prepare	block.h	/^	void Prepare( Render::Context* gl )$/;"	f	class:Block	access:public	signature:( Render::Context* gl )
Prepare	entity.h	/^	void Prepare( Sprite3D* sprite )$/;"	f	class:Entity	access:public	signature:( Sprite3D* sprite )
Prepare	mesh.h	/^	void Prepare( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
Prepare	plane.h	/^	void Prepare( Render::Context* gl, int width, int height, float planewidth=1.f, float planeheight=1.f )$/;"	f	class:Plane	access:public	signature:( Render::Context* gl, int width, int height, float planewidth=1.f, float planeheight=1.f )
Prepare	program.h	/^	void Prepare( Render::Context* gl, const char* vs_path, const char* fs_path )$/;"	f	class:Program	access:public	signature:( Render::Context* gl, const char* vs_path, const char* fs_path )
Prepare	quad.h	/^	void Prepare( Render::Context* gl, int width = 1.f, int height = 1.f, float uvx = 1.f, float uvy = 1.f )$/;"	f	class:Quad	access:public	signature:( Render::Context* gl, int width = 1.f, int height = 1.f, float uvx = 1.f, float uvy = 1.f )
Prepare	renderer.h	/^	void Prepare( Render::Context* gl )$/;"	f	class:Renderer	access:public	signature:( Render::Context* gl )
Prepare	sprite3d.h	/^	void Prepare( Render::Context* gl, const cml::vector3f& pos, tdogl::Texture* tex, int frames_x = 1, int frames_y = 1 )$/;"	f	class:Sprite3D	access:public	signature:( Render::Context* gl, const cml::vector3f& pos, tdogl::Texture* tex, int frames_x = 1, int frames_y = 1 )
PrintModels	map.h	/^	void PrintModels()$/;"	f	class:Map	access:public	signature:()
Profile	context.h	/^  enum class Profile {$/;"	c	class:Render::Context	access:public
Program	program.h	/^class Program$/;"	c
Program::BindAttribLocation	program.h	/^	void BindAttribLocation( Render::Context* gl, GLuint loc, const char* shadervar )$/;"	f	class:Program	access:public	signature:( Render::Context* gl, GLuint loc, const char* shadervar )
Program::Compile	program.h	/^	void Compile( Render::Context* gl )$/;"	f	class:Program	access:public	signature:( Render::Context* gl )
Program::Dispose	program.h	/^	void Dispose( Render::Context* gl )$/;"	f	class:Program	access:public	signature:( Render::Context* gl )
Program::Object	program.h	/^	GLuint Object()$/;"	f	class:Program	access:public	signature:()
Program::Prepare	program.h	/^	void Prepare( Render::Context* gl, const char* vs_path, const char* fs_path )$/;"	f	class:Program	access:public	signature:( Render::Context* gl, const char* vs_path, const char* fs_path )
Program::SetShaders	program.h	/^	void SetShaders( Shader vert, Shader frag )$/;"	f	class:Program	access:public	signature:( Shader vert, Shader frag )
Program::frag	program.h	/^	Shader frag;$/;"	m	class:Program	access:private
Program::handle	program.h	/^	GLuint handle;$/;"	m	class:Program	access:private
Program::locations	program.h	/^	DynamicArray<GLuint> locations;$/;"	m	class:Program	access:private
Program::vert	program.h	/^	Shader vert;$/;"	m	class:Program	access:private
Quad	quad.h	/^	Quad() :$/;"	f	class:Quad	access:public	signature:()
Quad	quad.h	/^class Quad : public Mesh$/;"	c	inherits:Mesh
Quad::Prepare	quad.h	/^	void Prepare( Render::Context* gl, int width = 1.f, int height = 1.f, float uvx = 1.f, float uvy = 1.f )$/;"	f	class:Quad	access:public	signature:( Render::Context* gl, int width = 1.f, int height = 1.f, float uvx = 1.f, float uvy = 1.f )
Quad::Quad	quad.h	/^	Quad() :$/;"	f	class:Quad	access:public	signature:()
Quad::UpdateUVs	quad.h	/^	void UpdateUVs( float xstep = 1.f, float ystep = 1.f)$/;"	f	class:Quad	access:public	signature:( float xstep = 1.f, float ystep = 1.f)
Quad::UpdateVertices	quad.h	/^	void UpdateVertices( float width, float height )$/;"	f	class:Quad	access:public	signature:( float width, float height )
Quad::height	quad.h	/^	int width, height;$/;"	m	class:Quad	access:private
Quad::width	quad.h	/^	int width, height;$/;"	m	class:Quad	access:private
REALLOC_STEP	dynamicarray.h	/^	static const size_t REALLOC_STEP = 5;$/;"	m	class:DynamicArray	access:private
RGB2Grayscale	Bitmap.cpp	/^static void RGB2Grayscale(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
RGB2GrayscaleAlpha	Bitmap.cpp	/^static void RGB2GrayscaleAlpha(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
RGB2RGBA	Bitmap.cpp	/^static void RGB2RGBA(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
RGBA2Grayscale	Bitmap.cpp	/^static void RGBA2Grayscale(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
RGBA2GrayscaleAlpha	Bitmap.cpp	/^static void RGBA2GrayscaleAlpha(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
RGBA2RGB	Bitmap.cpp	/^static void RGBA2RGB(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
RNG	random.h	/^	RNG() : floatdist( 0.f, 1.f ) {}$/;"	f	class:RNG	access:public	signature:()
RNG	random.h	/^class RNG$/;"	c
RNG::RNG	random.h	/^	RNG() : floatdist( 0.f, 1.f ) {}$/;"	f	class:RNG	access:public	signature:()
RNG::floatdist	random.h	/^	std::uniform_real_distribution<float> floatdist;$/;"	m	class:RNG	access:private
RNG::gen	random.h	/^	std::mt19937 gen;$/;"	m	class:RNG	access:private
RNG::intdist	random.h	/^	std::uniform_int_distribution<int> intdist;$/;"	m	class:RNG	access:private
RNG::seed	random.h	/^	void seed( uint32_t seed )$/;"	f	class:RNG	access:public	signature:( uint32_t seed )
RNG::uniform	random.h	/^	float uniform( )$/;"	f	class:RNG	access:public	signature:( )
RNG::uniform	random.h	/^	int uniform( int low, int high )$/;"	f	class:RNG	access:public	signature:( int low, int high )
RasterPaths	mapgen.cpp	/^void RasterPaths( DynamicArray<Room>& rooms, Map& map )$/;"	f	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map )
RasterPaths	mapgen.h	/^void RasterPaths( DynamicArray<Room>& rooms, Map& map );$/;"	p	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map )
RasterRooms	mapgen.cpp	/^void RasterRooms( DynamicArray<Room>& rooms, Map& map )$/;"	f	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map )
RasterRooms	mapgen.h	/^void RasterRooms( DynamicArray<Room>& rooms, Map& map );$/;"	p	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map )
Raw	canvas.cpp	/^const void* Canvas::Raw()$/;"	f	class:Canvas	signature:()
Raw	canvas.h	/^	const void* Raw();$/;"	p	class:Canvas	access:public	signature:()
Raw	matriz.h	/^	const void* Raw()$/;"	f	class:Matrix2D	access:public	signature:()
Realloc	dynamicarray.h	/^	void Realloc( size_t realloc_step = REALLOC_STEP )$/;"	f	class:DynamicArray	access:private	signature:( size_t realloc_step = REALLOC_STEP )
RectsOverlap	Bitmap.cpp	/^inline bool RectsOverlap(unsigned srcCol, unsigned srcRow, unsigned destCol, unsigned destRow, unsigned width, unsigned height){$/;"	f	signature:(unsigned srcCol, unsigned srcRow, unsigned destCol, unsigned destRow, unsigned width, unsigned height)
Render	app.cpp	/^void App::Render()$/;"	f	class:App	signature:()
Render	app.h	/^	void Render();$/;"	p	class:App	access:private	signature:()
Render	context.cpp	/^namespace Render{$/;"	n	file:
Render	context.h	/^namespace Render {$/;"	n
Render	sdlcontext.cpp	/^namespace Render {$/;"	n	file:
Render	sdlcontext.h	/^namespace Render {$/;"	n
Render	sdlglapp.cpp	/^void SDLGLApp::Render()$/;"	f	class:SDLGLApp	signature:()
Render	sdlglapp.h	/^	virtual void Render();$/;"	p	class:SDLGLApp	access:protected	signature:()
Render::Context	context.h	/^class Context {$/;"	c	namespace:Render
Render::Context::ActiveTexture	context.h	/^  PFNGLACTIVETEXTUREPROC ActiveTexture;$/;"	m	class:Render::Context	access:public
Render::Context::AttachShader	context.h	/^  PFNGLATTACHSHADERPROC AttachShader;$/;"	m	class:Render::Context	access:public
Render::Context::BindAttribLocation	context.h	/^  PFNGLBINDATTRIBLOCATIONPROC BindAttribLocation;$/;"	m	class:Render::Context	access:public
Render::Context::BindBuffer	context.h	/^  PFNGLBINDBUFFERPROC BindBuffer;$/;"	m	class:Render::Context	access:public
Render::Context::BindTexture	context.h	/^  PFNGLBINDTEXTUREPROC BindTexture;$/;"	m	class:Render::Context	access:public
Render::Context::BindVertexArray	context.h	/^  PFNGLBINDVERTEXARRAYPROC BindVertexArray;$/;"	m	class:Render::Context	access:public
Render::Context::BlendFunc	context.h	/^  PFNGLBLENDFUNCPROC BlendFunc;$/;"	m	class:Render::Context	access:public
Render::Context::BufferData	context.h	/^  PFNGLBUFFERDATAPROC BufferData;$/;"	m	class:Render::Context	access:public
Render::Context::CheckExtension	context.h	/^  virtual bool CheckExtension(const char*name) = 0;$/;"	p	class:Render::Context	access:protected	signature:(const char*name)
Render::Context::Clear	context.h	/^  PFNGLCLEARPROC Clear;$/;"	m	class:Render::Context	access:public
Render::Context::ClearColor	context.h	/^  PFNGLCLEARCOLORPROC ClearColor;$/;"	m	class:Render::Context	access:public
Render::Context::CompileShader	context.h	/^  PFNGLCOMPILESHADERPROC CompileShader;$/;"	m	class:Render::Context	access:public
Render::Context::Context	context.h	/^  Context( Render::Context::Profile prof )$/;"	f	class:Render::Context	access:public	signature:( Render::Context::Profile prof )
Render::Context::CreateProgram	context.h	/^  PFNGLCREATEPROGRAMPROC CreateProgram;$/;"	m	class:Render::Context	access:public
Render::Context::CreateShader	context.h	/^  PFNGLCREATESHADERPROC CreateShader;$/;"	m	class:Render::Context	access:public
Render::Context::CullFace	context.h	/^  PFNGLCULLFACEPROC CullFace;$/;"	m	class:Render::Context	access:public
Render::Context::DeleteBuffers	context.h	/^  PFNGLDELETEBUFFERSPROC DeleteBuffers;$/;"	m	class:Render::Context	access:public
Render::Context::DeleteProgram	context.h	/^  PFNGLDELETEPROGRAMPROC DeleteProgram;$/;"	m	class:Render::Context	access:public
Render::Context::DeleteShader	context.h	/^  PFNGLDELETESHADERPROC DeleteShader;$/;"	m	class:Render::Context	access:public
Render::Context::DeleteTextures	context.h	/^  PFNGLDELETETEXTURESPROC DeleteTextures;$/;"	m	class:Render::Context	access:public
Render::Context::DeleteVertexArrays	context.h	/^  PFNGLDELETEVERTEXARRAYSPROC DeleteVertexArrays;$/;"	m	class:Render::Context	access:public
Render::Context::DepthFunc	context.h	/^  PFNGLDEPTHFUNCPROC DepthFunc;$/;"	m	class:Render::Context	access:public
Render::Context::DetachShader	context.h	/^  PFNGLDETACHSHADERPROC DetachShader;$/;"	m	class:Render::Context	access:public
Render::Context::DisableVertexAttribArray	context.h	/^  PFNGLDISABLEVERTEXATTRIBARRAYPROC DisableVertexAttribArray;$/;"	m	class:Render::Context	access:public
Render::Context::DrawArrays	context.h	/^  PFNGLDRAWARRAYSPROC DrawArrays;$/;"	m	class:Render::Context	access:public
Render::Context::DrawArraysInstanced	context.h	/^  PFNGLDRAWARRAYSINSTANCEDPROC DrawArraysInstanced;$/;"	m	class:Render::Context	access:public
Render::Context::Enable	context.h	/^  PFNGLENABLEPROC Enable;$/;"	m	class:Render::Context	access:public
Render::Context::EnableVertexAttribArray	context.h	/^  PFNGLENABLEVERTEXATTRIBARRAYPROC EnableVertexAttribArray;$/;"	m	class:Render::Context	access:public
Render::Context::FrontFace	context.h	/^  PFNGLFRONTFACEPROC FrontFace;$/;"	m	class:Render::Context	access:public
Render::Context::GenBuffers	context.h	/^  PFNGLGENBUFFERSPROC GenBuffers;$/;"	m	class:Render::Context	access:public
Render::Context::GenTextures	context.h	/^  PFNGLGENTEXTURESPROC GenTextures;$/;"	m	class:Render::Context	access:public
Render::Context::GenVertexArrays	context.h	/^  PFNGLGENVERTEXARRAYSPROC GenVertexArrays;$/;"	m	class:Render::Context	access:public
Render::Context::GetAttribLocation	context.h	/^  PFNGLGETATTRIBLOCATIONPROC GetAttribLocation;$/;"	m	class:Render::Context	access:public
Render::Context::GetProc	context.h	/^  template <typename T> bool GetProc(T&p, const char*name)$/;"	f	class:Render::Context	access:protected	signature:(T&p, const char*name)
Render::Context::GetProc	context.h	/^  virtual bool GetProc(void*&p,const char*name) = 0;$/;"	p	class:Render::Context	access:protected	signature:(void*&p,const char*name)
Render::Context::GetProgramInfoLog	context.h	/^  PFNGLGETPROGRAMINFOLOGPROC GetProgramInfoLog;$/;"	m	class:Render::Context	access:public
Render::Context::GetProgramiv	context.h	/^  PFNGLGETPROGRAMIVPROC GetProgramiv;$/;"	m	class:Render::Context	access:public
Render::Context::GetShaderInfoLog	context.h	/^  PFNGLGETSHADERINFOLOGPROC GetShaderInfoLog;$/;"	m	class:Render::Context	access:public
Render::Context::GetShaderiv	context.h	/^  PFNGLGETSHADERIVPROC GetShaderiv;$/;"	m	class:Render::Context	access:public
Render::Context::GetUniformLocation	context.h	/^  PFNGLGETUNIFORMLOCATIONPROC GetUniformLocation;$/;"	m	class:Render::Context	access:public
Render::Context::GetVersion	context.h	/^  virtual void GetVersion(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile) = 0;$/;"	p	class:Render::Context	access:protected	signature:(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)
Render::Context::LinkProgram	context.h	/^  PFNGLLINKPROGRAMPROC LinkProgram;$/;"	m	class:Render::Context	access:public
Render::Context::MakeCurrent	context.cpp	/^bool Context::MakeCurrent()$/;"	f	class:Render::Context	signature:()
Render::Context::MakeCurrent	context.h	/^  bool MakeCurrent();$/;"	p	class:Render::Context	access:protected	signature:()
Render::Context::Profile	context.h	/^  enum class Profile {$/;"	c	class:Render::Context	access:public
Render::Context::Profile::Core	context.h	/^    Core,$/;"	m	class:Render::Context::Profile	access:private
Render::Context::ShaderSource	context.h	/^  PFNGLSHADERSOURCEPROC ShaderSource;$/;"	m	class:Render::Context	access:public
Render::Context::TexImage2D	context.h	/^  PFNGLTEXIMAGE2DPROC TexImage2D;$/;"	m	class:Render::Context	access:public
Render::Context::TexParameteri	context.h	/^  PFNGLTEXPARAMETERIPROC TexParameteri;$/;"	m	class:Render::Context	access:public
Render::Context::Uniform1f	context.h	/^  PFNGLUNIFORM1FPROC Uniform1f;$/;"	m	class:Render::Context	access:public
Render::Context::Uniform1i	context.h	/^  PFNGLUNIFORM1IPROC Uniform1i;$/;"	m	class:Render::Context	access:public
Render::Context::Uniform2f	context.h	/^  PFNGLUNIFORM2FPROC Uniform2f;$/;"	m	class:Render::Context	access:public
Render::Context::Uniform3f	context.h	/^  PFNGLUNIFORM3FPROC Uniform3f;$/;"	m	class:Render::Context	access:public
Render::Context::UniformMatrix4fv	context.h	/^  PFNGLUNIFORMMATRIX4FVPROC UniformMatrix4fv;$/;"	m	class:Render::Context	access:public
Render::Context::UseProgram	context.h	/^  PFNGLUSEPROGRAMPROC UseProgram;$/;"	m	class:Render::Context	access:public
Render::Context::VertexAttribDivisor	context.h	/^  PFNGLVERTEXATTRIBDIVISORPROC VertexAttribDivisor;$/;"	m	class:Render::Context	access:public
Render::Context::VertexAttribPointer	context.h	/^  PFNGLVERTEXATTRIBPOINTERPROC VertexAttribPointer;$/;"	m	class:Render::Context	access:public
Render::Context::current	context.h	/^  static Context* current;$/;"	m	class:Render::Context	access:public
Render::Context::profile	context.h	/^  const Profile profile;$/;"	m	class:Render::Context	access:public
Render::Context::~Context	context.h	/^  virtual ~Context(){}$/;"	f	class:Render::Context	access:public	signature:()
Render::SDL	sdlcontext.cpp	/^namespace SDL {$/;"	n	namespace:Render	file:
Render::SDL	sdlcontext.h	/^namespace SDL {$/;"	n	namespace:Render
Render::SDL::Context	sdlcontext.h	/^class Context : public Render::Context {$/;"	c	namespace:Render::SDL	inherits:Render::Context
Render::SDL::Context::CheckExtension	sdlcontext.cpp	/^bool Context::CheckExtension(const char*name)$/;"	f	class:Render::SDL::Context	signature:(const char*name)
Render::SDL::Context::CheckExtension	sdlcontext.h	/^  bool CheckExtension(const char*name);$/;"	p	class:Render::SDL::Context	access:public	signature:(const char*name)
Render::SDL::Context::Cleanup	sdlcontext.h	/^  void Cleanup()$/;"	f	class:Render::SDL::Context	access:public	signature:()
Render::SDL::Context::Context	sdlcontext.h	/^  Context( SDL_GLContext c, Render::Context::Profile prof ) :$/;"	f	class:Render::SDL::Context	access:public	signature:( SDL_GLContext c, Render::Context::Profile prof )
Render::SDL::Context::GetProc	sdlcontext.h	/^  bool GetProc(void*&p,const char*name)$/;"	f	class:Render::SDL::Context	access:public	signature:(void*&p,const char*name)
Render::SDL::Context::GetVersion	sdlcontext.cpp	/^void Context::GetVersion(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)$/;"	f	class:Render::SDL::Context	signature:(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)
Render::SDL::Context::GetVersion	sdlcontext.h	/^  void GetVersion(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile);$/;"	p	class:Render::SDL::Context	access:public	signature:(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)
Render::SDL::Context::MakeCurrent	sdlcontext.cpp	/^bool Context::MakeCurrent( SDL_Window* w )$/;"	f	class:Render::SDL::Context	signature:( SDL_Window* w )
Render::SDL::Context::MakeCurrent	sdlcontext.h	/^  bool MakeCurrent( SDL_Window* w );$/;"	p	class:Render::SDL::Context	access:public	signature:( SDL_Window* w )
Render::SDL::Context::ctx	sdlcontext.h	/^  SDL_GLContext ctx;$/;"	m	class:Render::SDL::Context	access:private
Render::SDL::Context::~Context	sdlcontext.cpp	/^Context::~Context()$/;"	f	class:Render::SDL::Context	signature:()
Render::SDL::Context::~Context	sdlcontext.h	/^  virtual ~Context();$/;"	p	class:Render::SDL::Context	access:public	signature:()
RenderBlocks	renderer.h	/^	void RenderBlocks( Map& map, tdogl::Texture* tex, int num )$/;"	f	class:Renderer	access:public	signature:( Map& map, tdogl::Texture* tex, int num )
RenderClear	renderer.h	/^	void RenderClear()$/;"	f	class:Renderer	access:public	signature:()
RenderEntity	renderer.h	/^	void RenderEntity( Entity* ent )$/;"	f	class:Renderer	access:public	signature:( Entity* ent )
RenderFinish	renderer.h	/^	void RenderFinish( SDL_Window* mainWindow )$/;"	f	class:Renderer	access:public	signature:( SDL_Window* mainWindow )
RenderMap	renderer.h	/^	void RenderMap( Map& map, tdogl::Texture* tex1, tdogl::Texture* tex2, tdogl::Texture* tex3 )$/;"	f	class:Renderer	access:public	signature:( Map& map, tdogl::Texture* tex1, tdogl::Texture* tex2, tdogl::Texture* tex3 )
RenderPlane	renderer.h	/^	void RenderPlane( Plane* p, const cml::matrix44f_c& model, tdogl::Texture* tex )$/;"	f	class:Renderer	access:public	signature:( Plane* p, const cml::matrix44f_c& model, tdogl::Texture* tex )
RenderSprite3D	renderer.h	/^	void RenderSprite3D( Sprite3D& sprite, const cml::matrix44f_c& model )$/;"	f	class:Renderer	access:public	signature:( Sprite3D& sprite, const cml::matrix44f_c& model )
Renderer	renderer.h	/^class Renderer$/;"	c
Renderer::BatchSprite3D	renderer.h	/^	void BatchSprite3D()$/;"	f	class:Renderer	access:public	signature:()
Renderer::BindVP	renderer.h	/^	inline void BindVP( GLuint shaderprogram )$/;"	f	class:Renderer	access:public	signature:( GLuint shaderprogram )
Renderer::BindVisionRange	renderer.h	/^	inline void BindVisionRange( GLuint shaderprogram )$/;"	f	class:Renderer	access:public	signature:( GLuint shaderprogram )
Renderer::Dispose	renderer.h	/^	void Dispose()$/;"	f	class:Renderer	access:public	signature:()
Renderer::Prepare	renderer.h	/^	void Prepare( Render::Context* gl )$/;"	f	class:Renderer	access:public	signature:( Render::Context* gl )
Renderer::RenderBlocks	renderer.h	/^	void RenderBlocks( Map& map, tdogl::Texture* tex, int num )$/;"	f	class:Renderer	access:public	signature:( Map& map, tdogl::Texture* tex, int num )
Renderer::RenderClear	renderer.h	/^	void RenderClear()$/;"	f	class:Renderer	access:public	signature:()
Renderer::RenderEntity	renderer.h	/^	void RenderEntity( Entity* ent )$/;"	f	class:Renderer	access:public	signature:( Entity* ent )
Renderer::RenderFinish	renderer.h	/^	void RenderFinish( SDL_Window* mainWindow )$/;"	f	class:Renderer	access:public	signature:( SDL_Window* mainWindow )
Renderer::RenderMap	renderer.h	/^	void RenderMap( Map& map, tdogl::Texture* tex1, tdogl::Texture* tex2, tdogl::Texture* tex3 )$/;"	f	class:Renderer	access:public	signature:( Map& map, tdogl::Texture* tex1, tdogl::Texture* tex2, tdogl::Texture* tex3 )
Renderer::RenderPlane	renderer.h	/^	void RenderPlane( Plane* p, const cml::matrix44f_c& model, tdogl::Texture* tex )$/;"	f	class:Renderer	access:public	signature:( Plane* p, const cml::matrix44f_c& model, tdogl::Texture* tex )
Renderer::RenderSprite3D	renderer.h	/^	void RenderSprite3D( Sprite3D& sprite, const cml::matrix44f_c& model )$/;"	f	class:Renderer	access:public	signature:( Sprite3D& sprite, const cml::matrix44f_c& model )
Renderer::SetVP	renderer.h	/^	void SetVP( const cml::matrix44f_c& view, const cml::matrix44f_c& projection )$/;"	f	class:Renderer	access:public	signature:( const cml::matrix44f_c& view, const cml::matrix44f_c& projection )
Renderer::block	renderer.h	/^	Block block;$/;"	m	class:Renderer	access:private
Renderer::blockprog	renderer.h	/^	Program quadprog, blockprog, planeprog;$/;"	m	class:Renderer	access:private
Renderer::cube_fog_range	renderer.h	/^	float cube_fog_range;$/;"	m	class:Renderer	access:private
Renderer::gl	renderer.h	/^	Render::Context* gl;$/;"	m	class:Renderer	access:private
Renderer::planeprog	renderer.h	/^	Program quadprog, blockprog, planeprog;$/;"	m	class:Renderer	access:private
Renderer::projection	renderer.h	/^	cml::matrix44f_c projection;$/;"	m	class:Renderer	access:private
Renderer::quadprog	renderer.h	/^	Program quadprog, blockprog, planeprog;$/;"	m	class:Renderer	access:private
Renderer::sprite3d_fog_range	renderer.h	/^	float sprite3d_fog_range;$/;"	m	class:Renderer	access:private
Renderer::view	renderer.h	/^	cml::matrix44f_c view;$/;"	m	class:Renderer	access:private
Right	camera.cpp	/^cml::vector3f Camera::Right() const$/;"	f	class:Camera	signature:() const
Right	camera.h	/^	cml::vector3f Right() const;$/;"	p	class:Camera	access:public	signature:() const
Room	mapgen.h	/^	Room( int x, int y, int w, int h ) { this->x = x; this->y = y; this->w = w; this->h = h; }$/;"	f	struct:mapgen::Room	access:public	signature:( int x, int y, int w, int h )
Room	mapgen.h	/^struct Room$/;"	s	namespace:mapgen
Rows	matriz.h	/^	int Rows() { return rows; }$/;"	f	class:Matrix2D	access:public	signature:()
SCAN_header	stb_image.h	/^   SCAN_header$/;"	e	enum:__anon4
SCAN_load	stb_image.h	/^   SCAN_load=0,$/;"	e	enum:__anon4
SCAN_type	stb_image.h	/^   SCAN_type,$/;"	e	enum:__anon4
SDL	sdlcontext.cpp	/^namespace SDL {$/;"	n	namespace:Render	file:
SDL	sdlcontext.h	/^namespace SDL {$/;"	n	namespace:Render
SDLGLApp	sdlglapp.cpp	/^SDLGLApp::SDLGLApp ( int width, int height, uint32_t sdlwinflags ) {$/;"	f	class:SDLGLApp	signature:( int width, int height, uint32_t sdlwinflags )
SDLGLApp	sdlglapp.h	/^	SDLGLApp ( int width, int height, uint32_t sdlwinflags=(SDL_WINDOW_SHOWN|SDL_WINDOW_OPENGL) );$/;"	p	class:SDLGLApp	access:public	signature:( int width, int height, uint32_t sdlwinflags=(SDL_WINDOW_SHOWN|SDL_WINDOW_OPENGL) )
SDLGLApp	sdlglapp.h	/^class SDLGLApp {$/;"	c
SDLGLApp::Cleanup	sdlglapp.cpp	/^void SDLGLApp::Cleanup()$/;"	f	class:SDLGLApp	signature:()
SDLGLApp::Cleanup	sdlglapp.h	/^	virtual void Cleanup();$/;"	p	class:SDLGLApp	access:protected	signature:()
SDLGLApp::Exec	sdlglapp.cpp	/^int SDLGLApp::Exec(int argc, char** argv)$/;"	f	class:SDLGLApp	signature:(int argc, char** argv)
SDLGLApp::Exec	sdlglapp.h	/^	int Exec(int argc, char** argv);$/;"	p	class:SDLGLApp	access:public	signature:(int argc, char** argv)
SDLGLApp::HandleEvent	sdlglapp.cpp	/^void SDLGLApp::HandleEvent(SDL_Event& event)$/;"	f	class:SDLGLApp	signature:(SDL_Event& event)
SDLGLApp::HandleEvent	sdlglapp.h	/^	virtual void HandleEvent(SDL_Event& event);$/;"	p	class:SDLGLApp	access:protected	signature:(SDL_Event& event)
SDLGLApp::Render	sdlglapp.cpp	/^void SDLGLApp::Render()$/;"	f	class:SDLGLApp	signature:()
SDLGLApp::Render	sdlglapp.h	/^	virtual void Render();$/;"	p	class:SDLGLApp	access:protected	signature:()
SDLGLApp::SDLGLApp	sdlglapp.cpp	/^SDLGLApp::SDLGLApp ( int width, int height, uint32_t sdlwinflags ) {$/;"	f	class:SDLGLApp	signature:( int width, int height, uint32_t sdlwinflags )
SDLGLApp::SDLGLApp	sdlglapp.h	/^	SDLGLApp ( int width, int height, uint32_t sdlwinflags=(SDL_WINDOW_SHOWN|SDL_WINDOW_OPENGL) );$/;"	p	class:SDLGLApp	access:public	signature:( int width, int height, uint32_t sdlwinflags=(SDL_WINDOW_SHOWN|SDL_WINDOW_OPENGL) )
SDLGLApp::Setup	sdlglapp.cpp	/^void SDLGLApp::Setup(int argc, char** argv)$/;"	f	class:SDLGLApp	signature:(int argc, char** argv)
SDLGLApp::Setup	sdlglapp.h	/^	virtual void Setup(int argc, char** argv);$/;"	p	class:SDLGLApp	access:protected	signature:(int argc, char** argv)
SDLGLApp::Stop	sdlglapp.h	/^	void Stop()$/;"	f	class:SDLGLApp	access:protected	signature:()
SDLGLApp::Update	sdlglapp.cpp	/^void SDLGLApp::Update(uint32_t delta)$/;"	f	class:SDLGLApp	signature:(uint32_t delta)
SDLGLApp::Update	sdlglapp.h	/^	virtual void Update(uint32_t delta);$/;"	p	class:SDLGLApp	access:protected	signature:(uint32_t delta)
SDLGLApp::gl	sdlglapp.h	/^	Render::SDL::Context* gl;$/;"	m	class:SDLGLApp	access:protected
SDLGLApp::mainGLContext	sdlglapp.h	/^	SDL_GLContext mainGLContext; \/\/ en sdlcontext?$/;"	m	class:SDLGLApp	access:protected
SDLGLApp::mainWindow	sdlglapp.h	/^	SDL_Window* mainWindow;$/;"	m	class:SDLGLApp	access:protected
SDLGLApp::running	sdlglapp.h	/^	bool running;$/;"	m	class:SDLGLApp	access:private
SDLGLApp::sdlwinflags	sdlglapp.h	/^	uint32_t sdlwinflags;$/;"	m	class:SDLGLApp	access:protected
SDLGLApp::winHeight	sdlglapp.h	/^	int winWidth, winHeight;$/;"	m	class:SDLGLApp	access:protected
SDLGLApp::winWidth	sdlglapp.h	/^	int winWidth, winHeight;$/;"	m	class:SDLGLApp	access:protected
SDLGLApp::~SDLGLApp	sdlglapp.cpp	/^SDLGLApp::~SDLGLApp()$/;"	f	class:SDLGLApp	signature:()
SDLGLApp::~SDLGLApp	sdlglapp.h	/^	virtual ~SDLGLApp ();$/;"	p	class:SDLGLApp	access:public	signature:()
STBIDEF	stb_image.h	218;"	d
STBIDEF	stb_image.h	220;"	d
STBI_ASSERT	stb_image.h	358;"	d
STBI_HAS_LROTL	stb_image.h	397;"	d
STBI_INCLUDE_STB_IMAGE_H	stb_image.h	79;"	d
STBI_NOTUSED	stb_image.h	391;"	d
STBI_NOTUSED	stb_image.h	393;"	d
STBI_VERSION	stb_image.h	199;"	d
STBI__BYTECAST	stb_image.h	2479;"	d
STBI__F_avg	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon13
STBI__F_avg_first	stb_image.h	/^   STBI__F_avg_first, STBI__F_paeth_first$/;"	e	enum:__anon13
STBI__F_none	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon13
STBI__F_paeth	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon13
STBI__F_paeth_first	stb_image.h	/^   STBI__F_avg_first, STBI__F_paeth_first$/;"	e	enum:__anon13
STBI__F_sub	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon13
STBI__F_up	stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon13
STBI__HDR_BUFLEN	stb_image.h	4190;"	d
STBI__IDCT_1D	stb_image.h	1246;"	d
STBI__MARKER_none	stb_image.h	1360;"	d
STBI__RESTART	stb_image.h	1377;"	d
STBI__ZFAST_BITS	stb_image.h	1992;"	d
STBI__ZFAST_MASK	stb_image.h	1993;"	d
STBI_default	stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon1
STBI_grey	stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon1
STBI_grey_alpha	stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon1
STBI_rgb	stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon1
STBI_rgb_alpha	stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon1
STB_IMAGE_IMPLEMENTATION	Bitmap.cpp	22;"	d	file:
SaveToFile	map.h	/^	void SaveToFile( const char* path )$/;"	f	class:Map	access:public	signature:( const char* path )
Set	map.h	/^		void Set( int x, int y, int block_type )$/;"	f	struct:Map::BlockData	access:public	signature:( int x, int y, int block_type )
Set	map.h	/^	void Set( int x, int y, int block )$/;"	f	class:Map	access:public	signature:( int x, int y, int block )
Set	matriz.h	/^	void Set( T val )$/;"	f	class:Matrix2D	access:public	signature:( T val )
Set	matriz.h	/^	void Set( int row, int col, T val )$/;"	f	class:Matrix2D	access:public	signature:( int row, int col, T val )
SetAngle	sprite3d.h	/^	void SetAngle( float angle )$/;"	f	class:Sprite3D	access:public	signature:( float angle )
SetAngleY	entity.h	/^	void SetAngleY( float angle )$/;"	f	class:Entity	access:public	signature:( float angle )
SetAspect	camera.cpp	/^void Camera::SetAspect( float a )$/;"	f	class:Camera	signature:( float a )
SetAspect	camera.h	/^	void SetAspect( float a );$/;"	p	class:Camera	access:public	signature:( float a )
SetCurrentFrame	sprite3d.h	/^	void SetCurrentFrame( float x, float y )$/;"	f	class:Sprite3D	access:public	signature:( float x, float y )
SetHorizontalAngle	camera.h	/^	void SetHorizontalAngle( float angle )$/;"	f	class:Camera	access:public	signature:( float angle )
SetPhysicBody	entity.h	/^	void SetPhysicBody( b2Body* body )$/;"	f	class:Entity	access:public	signature:( b2Body* body )
SetPosition	camera.cpp	/^void Camera::SetPosition( const cml::vector3f& pos )$/;"	f	class:Camera	signature:( const cml::vector3f& pos )
SetPosition	camera.h	/^	void SetPosition( const cml::vector3f& pos );$/;"	p	class:Camera	access:public	signature:( const cml::vector3f& pos )
SetShaders	program.h	/^	void SetShaders( Shader vert, Shader frag )$/;"	f	class:Program	access:public	signature:( Shader vert, Shader frag )
SetSprite	entity.h	/^	void SetSprite( Sprite3D* sprite )$/;"	f	class:Entity	access:public	signature:( Sprite3D* sprite )
SetVP	renderer.h	/^	void SetVP( const cml::matrix44f_c& view, const cml::matrix44f_c& projection )$/;"	f	class:Renderer	access:public	signature:( const cml::matrix44f_c& view, const cml::matrix44f_c& projection )
Setup	app.cpp	/^void App::Setup(int argc, char** argv)$/;"	f	class:App	signature:(int argc, char** argv)
Setup	app.h	/^	void Setup(int argc, char** argv);$/;"	p	class:App	access:private	signature:(int argc, char** argv)
Setup	sdlglapp.cpp	/^void SDLGLApp::Setup(int argc, char** argv)$/;"	f	class:SDLGLApp	signature:(int argc, char** argv)
Setup	sdlglapp.h	/^	virtual void Setup(int argc, char** argv);$/;"	p	class:SDLGLApp	access:protected	signature:(int argc, char** argv)
Shader	shader.cpp	/^Shader::Shader()$/;"	f	class:Shader	signature:()
Shader	shader.h	/^	Shader(  );$/;"	p	class:Shader	access:public	signature:( )
Shader	shader.h	/^class Shader$/;"	c
Shader::FRAGMENT	shader.h	/^	const static int FRAGMENT = 1;$/;"	m	class:Shader	access:public
Shader::GEOMETRY	shader.h	/^	const static int GEOMETRY = 2;$/;"	m	class:Shader	access:public
Shader::LoadFromFile	shader.cpp	/^bool Shader::LoadFromFile( Render::Context* gl, const char* path, int t )$/;"	f	class:Shader	signature:( Render::Context* gl, const char* path, int t )
Shader::LoadFromFile	shader.h	/^	bool LoadFromFile( Render::Context* gl, const char* path, int t );$/;"	p	class:Shader	access:public	signature:( Render::Context* gl, const char* path, int t )
Shader::Object	shader.cpp	/^GLuint Shader::Object()$/;"	f	class:Shader	signature:()
Shader::Object	shader.h	/^	GLuint Object();$/;"	p	class:Shader	access:public	signature:()
Shader::Shader	shader.cpp	/^Shader::Shader()$/;"	f	class:Shader	signature:()
Shader::Shader	shader.h	/^	Shader(  );$/;"	p	class:Shader	access:public	signature:( )
Shader::VERTEX	shader.h	/^	const static int VERTEX = 0;$/;"	m	class:Shader	access:public
Shader::dict	shader.cpp	/^const GLenum Shader::dict[] = {$/;"	m	class:Shader	file:
Shader::dict	shader.h	/^	static const GLenum dict[];$/;"	m	class:Shader	access:private
Shader::handle	shader.h	/^	GLuint handle;$/;"	m	class:Shader	access:private
ShaderSource	context.h	/^  PFNGLSHADERSOURCEPROC ShaderSource;$/;"	m	class:Render::Context	access:public
Size	dynamicarray.h	/^	size_t Size()$/;"	f	class:DynamicArray	access:public	signature:()
SmoothNoise	canvas.h	/^	double SmoothNoise( Matrix2D<float>& noise, double x, double y )$/;"	f	class:Canvas	access:public	signature:( Matrix2D<float>& noise, double x, double y )
Sprite3D	sprite3d.h	/^class Sprite3D$/;"	c
Sprite3D::CurrentFrame	sprite3d.h	/^	const cml::vector2f& CurrentFrame()$/;"	f	class:Sprite3D	access:public	signature:()
Sprite3D::Dispose	sprite3d.h	/^	void Dispose( Render::Context* gl )$/;"	f	class:Sprite3D	access:public	signature:( Render::Context* gl )
Sprite3D::FrameSize	sprite3d.h	/^	const cml::vector2f& FrameSize()$/;"	f	class:Sprite3D	access:public	signature:()
Sprite3D::GetQuad	sprite3d.h	/^	Quad& GetQuad()$/;"	f	class:Sprite3D	access:public	signature:()
Sprite3D::GetTex	sprite3d.h	/^	tdogl::Texture* GetTex()$/;"	f	class:Sprite3D	access:public	signature:()
Sprite3D::Prepare	sprite3d.h	/^	void Prepare( Render::Context* gl, const cml::vector3f& pos, tdogl::Texture* tex, int frames_x = 1, int frames_y = 1 )$/;"	f	class:Sprite3D	access:public	signature:( Render::Context* gl, const cml::vector3f& pos, tdogl::Texture* tex, int frames_x = 1, int frames_y = 1 )
Sprite3D::SetAngle	sprite3d.h	/^	void SetAngle( float angle )$/;"	f	class:Sprite3D	access:public	signature:( float angle )
Sprite3D::SetCurrentFrame	sprite3d.h	/^	void SetCurrentFrame( float x, float y )$/;"	f	class:Sprite3D	access:public	signature:( float x, float y )
Sprite3D::angle	sprite3d.h	/^	float angle;$/;"	m	class:Sprite3D	access:private
Sprite3D::current_frame	sprite3d.h	/^	cml::vector2f \/* i? *\/ current_frame, num_frames;$/;"	m	class:Sprite3D	access:private
Sprite3D::num_frames	sprite3d.h	/^	cml::vector2f \/* i? *\/ current_frame, num_frames;$/;"	m	class:Sprite3D	access:private
Sprite3D::quad	sprite3d.h	/^	Quad quad;$/;"	m	class:Sprite3D	access:private
Sprite3D::size	sprite3d.h	/^	cml::vector2f size;$/;"	m	class:Sprite3D	access:private
Sprite3D::tex	sprite3d.h	/^	tdogl::Texture* tex;$/;"	m	class:Sprite3D	access:private
Step	physics.h	/^	void Step()$/;"	f	class:Physics	access:public	signature:()
Stop	sdlglapp.h	/^	void Stop()$/;"	f	class:SDLGLApp	access:protected	signature:()
TexImage2D	context.h	/^  PFNGLTEXIMAGE2DPROC TexImage2D;$/;"	m	class:Render::Context	access:public
TexParameteri	context.h	/^  PFNGLTEXPARAMETERIPROC TexParameteri;$/;"	m	class:Render::Context	access:public
Texture	Texture.cpp	/^Texture::Texture(Context* gl, const Bitmap& bitmap, GLint minMagFiler, GLint wrapMode) :$/;"	f	class:Texture	signature:(Context* gl, const Bitmap& bitmap, GLint minMagFiler, GLint wrapMode)
Texture	Texture.h	/^        Texture(Context* gl, const Bitmap& bitmap,$/;"	p	class:tdogl::Texture	access:public	signature:(Context* gl, const Bitmap& bitmap, GLint minMagFiler = GL_NEAREST, GLint wrapMode = GL_CLAMP_TO_EDGE)
Texture	Texture.h	/^        Texture(const Texture&);$/;"	p	class:tdogl::Texture	access:private	signature:(const Texture&)
Texture	Texture.h	/^    class Texture {$/;"	c	namespace:tdogl
Texture::Texture	Texture.cpp	/^Texture::Texture(Context* gl, const Bitmap& bitmap, GLint minMagFiler, GLint wrapMode) :$/;"	f	class:Texture	signature:(Context* gl, const Bitmap& bitmap, GLint minMagFiler, GLint wrapMode)
Texture::object	Texture.cpp	/^GLuint Texture::object() const$/;"	f	class:Texture	signature:() const
Texture::originalHeight	Texture.cpp	/^GLfloat Texture::originalHeight() const$/;"	f	class:Texture	signature:() const
Texture::originalWidth	Texture.cpp	/^GLfloat Texture::originalWidth() const$/;"	f	class:Texture	signature:() const
Texture::~Texture	Texture.cpp	/^Texture::~Texture()$/;"	f	class:Texture	signature:()
TextureFormatForBitmapFormat	Texture.cpp	/^static GLenum TextureFormatForBitmapFormat(Bitmap::Format format)$/;"	f	file:	signature:(Bitmap::Format format)
Tick	fpscounter.h	/^	void Tick( T time )$/;"	f	class:FPSCounter	access:public	signature:( T time )
TileMap	tilemap.h	/^	TileMap( const Map& map )$/;"	f	class:TileMap	access:public	signature:( const Map& map )
TileMap	tilemap.h	/^class TileMap :$/;"	c
TileMap::TileMap	tilemap.h	/^	TileMap( const Map& map )$/;"	f	class:TileMap	access:public	signature:( const Map& map )
ToBitmap	canvas.h	/^	void ToBitmap( tdogl::Bitmap& bmp )$/;"	f	class:Canvas	access:public	signature:( tdogl::Bitmap& bmp )
Transform	transform.h	/^	Transform()$/;"	f	class:Transform	access:public	signature:()
Transform	transform.h	/^class Transform$/;"	c
Transform::Model	transform.h	/^	cml::matrix44f_c Model()$/;"	f	class:Transform	access:public	signature:()
Transform::Transform	transform.h	/^	Transform()$/;"	f	class:Transform	access:public	signature:()
Transform::position	transform.h	/^	cml::vector3f position;$/;"	m	class:Transform	access:public
Transform::rotation	transform.h	/^	cml::vector3f rotation;$/;"	m	class:Transform	access:public
Turbulence	canvas.h	/^	double Turbulence( Matrix2D<float>& noise, double x, double y, double size, bool bifilter = true, double base = 128.0 )$/;"	f	class:Canvas	access:public	signature:( Matrix2D<float>& noise, double x, double y, double size, bool bifilter = true, double base = 128.0 )
Uniform1f	context.h	/^  PFNGLUNIFORM1FPROC Uniform1f;$/;"	m	class:Render::Context	access:public
Uniform1i	context.h	/^  PFNGLUNIFORM1IPROC Uniform1i;$/;"	m	class:Render::Context	access:public
Uniform2f	context.h	/^  PFNGLUNIFORM2FPROC Uniform2f;$/;"	m	class:Render::Context	access:public
Uniform3f	context.h	/^  PFNGLUNIFORM3FPROC Uniform3f;$/;"	m	class:Render::Context	access:public
UniformMatrix4fv	context.h	/^  PFNGLUNIFORMMATRIX4FVPROC UniformMatrix4fv;$/;"	m	class:Render::Context	access:public
Up	camera.cpp	/^cml::vector3f Camera::Up() const$/;"	f	class:Camera	signature:() const
Up	camera.h	/^	cml::vector3f Up() const;$/;"	p	class:Camera	access:public	signature:() const
Update	app.cpp	/^void App::Update(uint32_t delta)$/;"	f	class:App	signature:(uint32_t delta)
Update	app.h	/^	void Update(uint32_t delta);$/;"	p	class:App	access:private	signature:(uint32_t delta)
Update	sdlglapp.cpp	/^void SDLGLApp::Update(uint32_t delta)$/;"	f	class:SDLGLApp	signature:(uint32_t delta)
Update	sdlglapp.h	/^	virtual void Update(uint32_t delta);$/;"	p	class:SDLGLApp	access:protected	signature:(uint32_t delta)
UpdateUVs	quad.h	/^	void UpdateUVs( float xstep = 1.f, float ystep = 1.f)$/;"	f	class:Quad	access:public	signature:( float xstep = 1.f, float ystep = 1.f)
UpdateVertices	plane.h	/^	void UpdateVertices( int width, int height, int planewidth, int planeheight )$/;"	f	class:Plane	access:public	signature:( int width, int height, int planewidth, int planeheight )
UpdateVertices	quad.h	/^	void UpdateVertices( float width, float height )$/;"	f	class:Quad	access:public	signature:( float width, float height )
UploadBufferData	mesh.h	/^	void UploadBufferData( Render::Context* gl, GLuint vbo, int items_per_attr, GLfloat* buffer )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl, GLuint vbo, int items_per_attr, GLfloat* buffer )
UseProgram	context.h	/^  PFNGLUSEPROGRAMPROC UseProgram;$/;"	m	class:Render::Context	access:public
VCorridor	mapgen.cpp	/^void VCorridor( Map& map, int y0, int y1, int x )$/;"	f	namespace:mapgen	signature:( Map& map, int y0, int y1, int x )
VCorridor	mapgen.h	/^void VCorridor( Map& map, int y0, int y1, int x );$/;"	p	namespace:mapgen	signature:( Map& map, int y0, int y1, int x )
VERTEX	shader.h	/^	const static int VERTEX = 0;$/;"	m	class:Shader	access:public
VertexAttribDivisor	context.h	/^  PFNGLVERTEXATTRIBDIVISORPROC VertexAttribDivisor;$/;"	m	class:Render::Context	access:public
VertexAttribPointer	context.h	/^  PFNGLVERTEXATTRIBPOINTERPROC VertexAttribPointer;$/;"	m	class:Render::Context	access:public
WIN32_LEAN_AND_MEAN	glcorearb.h	41;"	d
Width	canvas.h	/^	int Width()$/;"	f	class:Canvas	access:public	signature:()
Width	map.h	/^	int Width()$/;"	f	class:Map	access:public	signature:()
XYZUV_INST	mesh.h	/^		XYZUV_INST,$/;"	m	class:Mesh::AttribConfig	access:private
XYZ_UV_RST	mesh.h	/^		XYZ_UV_RST,$/;"	m	class:Mesh::AttribConfig	access:private
__SHAD__	shader.h	3;"	d
__anon10::code_buffer	stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon10	access:public
__anon10::num_bits	stb_image.h	/^   int num_bits;$/;"	m	struct:__anon10	access:public
__anon10::z_distance	stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon10	access:public
__anon10::z_expandable	stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon10	access:public
__anon10::z_length	stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon10	access:public
__anon10::zbuffer	stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon10	access:public
__anon10::zbuffer_end	stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon10	access:public
__anon10::zout	stb_image.h	/^   char *zout;$/;"	m	struct:__anon10	access:public
__anon10::zout_end	stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon10	access:public
__anon10::zout_start	stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon10	access:public
__anon11::length	stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon11	access:public
__anon11::type	stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon11	access:public
__anon12::expanded	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon12	access:public
__anon12::idata	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon12	access:public
__anon12::out	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon12	access:public
__anon12::s	stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon12	access:public
__anon14::channel	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon14	access:public
__anon14::size	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon14	access:public
__anon14::type	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon14	access:public
__anon15::first	stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon15	access:public
__anon15::prefix	stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon15	access:public
__anon15::suffix	stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon15	access:public
__anon16::bgindex	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon16	access:public
__anon16::codes	stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon16	access:public
__anon16::color_table	stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon16	access:public
__anon16::cur_x	stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon16	access:public
__anon16::cur_y	stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon16	access:public
__anon16::eflags	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon16	access:public
__anon16::flags	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon16	access:public
__anon16::h	stb_image.h	/^   int w,h;$/;"	m	struct:__anon16	access:public
__anon16::lflags	stb_image.h	/^   int lflags;$/;"	m	struct:__anon16	access:public
__anon16::line_size	stb_image.h	/^   int line_size;$/;"	m	struct:__anon16	access:public
__anon16::lpal	stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon16	access:public
__anon16::max_x	stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon16	access:public
__anon16::max_y	stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon16	access:public
__anon16::out	stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon16	access:public
__anon16::pal	stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon16	access:public
__anon16::parse	stb_image.h	/^   int parse, step;$/;"	m	struct:__anon16	access:public
__anon16::ratio	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon16	access:public
__anon16::start_x	stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon16	access:public
__anon16::start_y	stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon16	access:public
__anon16::step	stb_image.h	/^   int parse, step;$/;"	m	struct:__anon16	access:public
__anon16::transparent	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon16	access:public
__anon16::w	stb_image.h	/^   int w,h;$/;"	m	struct:__anon16	access:public
__anon2::eof	stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon2	access:public
__anon2::read	stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read $/;"	m	struct:__anon2	access:public
__anon2::skip	stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon2	access:public
__anon3::buffer_start	stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon3	access:public
__anon3::buflen	stb_image.h	/^   int buflen;$/;"	m	struct:__anon3	access:public
__anon3::img_buffer	stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon3	access:public
__anon3::img_buffer_end	stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon3	access:public
__anon3::img_buffer_original	stb_image.h	/^   stbi_uc *img_buffer_original;$/;"	m	struct:__anon3	access:public
__anon3::img_n	stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon3	access:public
__anon3::img_out_n	stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon3	access:public
__anon3::img_x	stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon3	access:public
__anon3::img_y	stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon3	access:public
__anon3::io	stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon3	access:public
__anon3::io_user_data	stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon3	access:public
__anon3::read_from_callbacks	stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon3	access:public
__anon5::code	stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon5	access:public
__anon5::delta	stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon5	access:public
__anon5::fast	stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon5	access:public
__anon5::maxcode	stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon5	access:public
__anon5::size	stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon5	access:public
__anon5::values	stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon5	access:public
__anon6::__anon7::data	stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon6::__anon7	access:public
__anon6::__anon7::dc_pred	stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon6::__anon7	access:public
__anon6::__anon7::h	stb_image.h	/^      int h,v;$/;"	m	struct:__anon6::__anon7	access:public
__anon6::__anon7::h2	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon6::__anon7	access:public
__anon6::__anon7::ha	stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon6::__anon7	access:public
__anon6::__anon7::hd	stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon6::__anon7	access:public
__anon6::__anon7::id	stb_image.h	/^      int id;$/;"	m	struct:__anon6::__anon7	access:public
__anon6::__anon7::linebuf	stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon6::__anon7	access:public
__anon6::__anon7::raw_data	stb_image.h	/^      void *raw_data;$/;"	m	struct:__anon6::__anon7	access:public
__anon6::__anon7::tq	stb_image.h	/^      int tq;$/;"	m	struct:__anon6::__anon7	access:public
__anon6::__anon7::v	stb_image.h	/^      int h,v;$/;"	m	struct:__anon6::__anon7	access:public
__anon6::__anon7::w2	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon6::__anon7	access:public
__anon6::__anon7::x	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon6::__anon7	access:public
__anon6::__anon7::y	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon6::__anon7	access:public
__anon6::code_bits	stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon6	access:public
__anon6::code_buffer	stb_image.h	/^   stbi__uint32         code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon6	access:public
__anon6::dequant	stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon6	access:public
__anon6::dequant2	stb_image.h	/^   unsigned short dequant2[4][64];$/;"	m	struct:__anon6	access:public
__anon6::huff_ac	stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon6	access:public
__anon6::huff_dc	stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon6	access:public
__anon6::img_comp	stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon6	typeref:struct:__anon6::__anon7	access:public
__anon6::img_h_max	stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon6	access:public
__anon6::img_mcu_h	stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon6	access:public
__anon6::img_mcu_w	stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon6	access:public
__anon6::img_mcu_x	stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon6	access:public
__anon6::img_mcu_y	stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon6	access:public
__anon6::img_v_max	stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon6	access:public
__anon6::marker	stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon6	access:public
__anon6::nomore	stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon6	access:public
__anon6::order	stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon6	access:public
__anon6::restart_interval	stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon6	access:public
__anon6::s	stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon6	access:public
__anon6::scan_n	stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon6	access:public
__anon6::todo	stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon6	access:public
__anon8::hs	stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon8	access:public
__anon8::line0	stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon8	access:public
__anon8::line1	stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon8	access:public
__anon8::resample	stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon8	access:public
__anon8::vs	stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon8	access:public
__anon8::w_lores	stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion $/;"	m	struct:__anon8	access:public
__anon8::ypos	stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon8	access:public
__anon8::ystep	stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon8	access:public
__anon9::fast	stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon9	access:public
__anon9::firstcode	stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon9	access:public
__anon9::firstsymbol	stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon9	access:public
__anon9::maxcode	stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon9	access:public
__anon9::size	stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon9	access:public
__anon9::value	stb_image.h	/^   stbi__uint16 value[288]; $/;"	m	struct:__anon9	access:public
__glcorearb_h_	glcorearb.h	2;"	d
_format	Bitmap.h	/^        Format _format;$/;"	m	class:tdogl::Bitmap	access:private
_getPixelOffset	Bitmap.h	/^        static void _getPixelOffset(unsigned col, unsigned row, unsigned width, unsigned height, Format format);$/;"	p	class:tdogl::Bitmap	access:private	signature:(unsigned col, unsigned row, unsigned width, unsigned height, Format format)
_height	Bitmap.h	/^        unsigned _height;$/;"	m	class:tdogl::Bitmap	access:private
_object	Texture.h	/^        GLuint _object;$/;"	m	class:tdogl::Texture	access:private
_originalHeight	Texture.h	/^        GLfloat _originalHeight;$/;"	m	class:tdogl::Texture	access:private
_originalWidth	Texture.h	/^        GLfloat _originalWidth;$/;"	m	class:tdogl::Texture	access:private
_pixels	Bitmap.h	/^        unsigned char* _pixels;$/;"	m	class:tdogl::Bitmap	access:private
_set	Bitmap.cpp	/^void Bitmap::_set(unsigned width, $/;"	f	class:Bitmap	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels)
_set	Bitmap.h	/^        void _set(unsigned width, unsigned height, Format format, const unsigned char* pixels);$/;"	p	class:tdogl::Bitmap	access:private	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels)
_width	Bitmap.h	/^        unsigned _width;$/;"	m	class:tdogl::Bitmap	access:private
angle	sprite3d.h	/^	float angle;$/;"	m	class:Sprite3D	access:private
aspect	camera.h	/^	float aspect;	\/\/ aspect Ratio$/;"	m	class:Camera	access:private
attrconf	mesh.h	/^	AttribConfig attrconf;$/;"	m	class:Mesh	access:protected
back	app.h	/^		bool left, right, forward, back;$/;"	m	struct:App::Input	access:public
bgindex	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon16	access:public
bichoentity	app.h	/^	Entity bichoentity;$/;"	m	class:App	access:private
bichosprite	app.h	/^	Sprite3D bichosprite;$/;"	m	class:App	access:private
bitmapFromFile	Bitmap.cpp	/^Bitmap Bitmap::bitmapFromFile(std::string filePath) {$/;"	f	class:Bitmap	signature:(std::string filePath)
bitmapFromFile	Bitmap.h	/^        static Bitmap bitmapFromFile(std::string filePath);$/;"	p	class:tdogl::Bitmap	access:public	signature:(std::string filePath)
block	renderer.h	/^	Block block;$/;"	m	class:Renderer	access:private
block_type	map.h	/^		int block_type;$/;"	m	struct:Map::BlockData	access:public
blockprog	renderer.h	/^	Program quadprog, blockprog, planeprog;$/;"	m	class:Renderer	access:private
body	entity.h	/^	b2Body* body;$/;"	m	class:Entity	access:private
buffer_start	stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon3	access:public
buflen	stb_image.h	/^   int buflen;$/;"	m	struct:__anon3	access:public
cam	app.h	/^	Camera cam;$/;"	m	class:App	access:private
caminput	app.h	/^	} caminput;$/;"	m	class:App	typeref:struct:App::Input	access:private
canvas	app.h	/^	Canvas* canvas;$/;"	m	class:App	access:private
capacity	dynamicarray.h	/^	size_t capacity;$/;"	m	class:DynamicArray	access:private
channel	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon14	access:public
code	stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon5	access:public
code_bits	stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon6	access:public
code_buffer	stb_image.h	/^   stbi__uint32         code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon6	access:public
code_buffer	stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon10	access:public
codes	stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon16	access:public
color_table	stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon16	access:public
colors	block.h	/^	static const GLfloat colors[];$/;"	m	class:Block	access:public
cols	matriz.h	/^	int rows, cols;$/;"	m	class:Matrix2D	access:private
contactlistener	physics.h	/^	ContactListener contactlistener;$/;"	m	class:Physics	access:private
coord	app.h	/^	float coord;$/;"	m	class:App	access:private
copyRectFromBitmap	Bitmap.cpp	/^void Bitmap::copyRectFromBitmap(const Bitmap& src, $/;"	f	class:Bitmap	signature:(const Bitmap& src, unsigned srcCol, unsigned srcRow, unsigned destCol, unsigned destRow, unsigned width, unsigned height)
copyRectFromBitmap	Bitmap.h	/^        void copyRectFromBitmap(const Bitmap& src, $/;"	p	class:tdogl::Bitmap	access:public	signature:(const Bitmap& src, unsigned srcCol, unsigned srcRow, unsigned destCol, unsigned destRow, unsigned width, unsigned height)
ctx	sdlcontext.h	/^  SDL_GLContext ctx;$/;"	m	class:Render::SDL::Context	access:private
cube_fog_range	renderer.h	/^	float cube_fog_range;$/;"	m	class:Renderer	access:private
cur_x	stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon16	access:public
cur_y	stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon16	access:public
current	context.h	/^  static Context* current;$/;"	m	class:Render::Context	access:public
current_frame	sprite3d.h	/^	cml::vector2f \/* i? *\/ current_frame, num_frames;$/;"	m	class:Sprite3D	access:private
data	canvas.h	/^	Matrix2D<Color> data;$/;"	m	class:Canvas	access:private
data	color.h	/^	uint8_t data[4];$/;"	m	class:Color	access:private
data	dynamicarray.h	/^	T* data;$/;"	m	class:DynamicArray	access:private
data	matriz.h	/^	T* data;$/;"	m	class:Matrix2D	access:private
data	stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon6::__anon7	access:public
dc_pred	stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon6::__anon7	access:public
decode_jpeg_header	stb_image.h	/^static int decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f	signature:(stbi__jpeg *z, int scan)
decode_jpeg_image	stb_image.h	/^static int decode_jpeg_image(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
delta	stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon5	access:public
dequant	stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon6	access:public
dequant2	stb_image.h	/^   unsigned short dequant2[4][64];$/;"	m	struct:__anon6	access:public
dict	shader.cpp	/^const GLenum Shader::dict[] = {$/;"	m	class:Shader	file:
dict	shader.h	/^	static const GLenum dict[];$/;"	m	class:Shader	access:private
dmouse_x	app.h	/^	int dmouse_x, dmouse_y;$/;"	m	class:App	access:private
dmouse_y	app.h	/^	int dmouse_x, dmouse_y;$/;"	m	class:App	access:private
eflags	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon16	access:public
entities	app.h	/^	DynamicArray<Entity*> entities;$/;"	m	class:App	access:private
eof	stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon2	access:public
expanded	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon12	access:public
farClip	camera.h	/^	float farClip;	\/\/ Far clipping plane distance$/;"	m	class:Camera	access:private
fast	stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon9	access:public
fast	stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon5	access:public
fieldOfView	camera.h	/^	float fieldOfView;		\/\/ Field of View Angle$/;"	m	class:Camera	access:private
filetobuf	shader.cpp	/^char* filetobuf(const char *file)$/;"	f	signature:(const char *file)
filetobuf	shader.h	/^char* filetobuf(const char *file);$/;"	p	signature:(const char *file)
first	stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon15	access:public
first_row_filter	stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
firstcode	stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon9	access:public
firstsymbol	stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon9	access:public
flags	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon16	access:public
flipVertically	Bitmap.cpp	/^void Bitmap::flipVertically() {$/;"	f	class:Bitmap	signature:()
flipVertically	Bitmap.h	/^        void flipVertically();$/;"	p	class:tdogl::Bitmap	access:public	signature:()
float2fixed	stb_image.h	1781;"	d
floatdist	random.h	/^	std::uniform_real_distribution<float> floatdist;$/;"	m	class:RNG	access:private
format	Bitmap.cpp	/^Bitmap::Format Bitmap::format() const {$/;"	f	class:Bitmap	signature:() const
format	Bitmap.h	/^        Format format() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
forward	app.h	/^		bool left, right, forward, back;$/;"	m	struct:App::Input	access:public
frag	program.h	/^	Shader frag;$/;"	m	class:Program	access:private
frames	fpscounter.h	/^	int frames;$/;"	m	class:FPSCounter	access:private
gen	random.h	/^	std::mt19937 gen;$/;"	m	class:RNG	access:private
getPixel	Bitmap.cpp	/^unsigned char* Bitmap::getPixel(unsigned int column, unsigned int row) const {$/;"	f	class:Bitmap	signature:(unsigned int column, unsigned int row) const
getPixel	Bitmap.h	/^        unsigned char* getPixel(unsigned int column, unsigned int row) const;$/;"	p	class:tdogl::Bitmap	access:public	signature:(unsigned int column, unsigned int row) const
gl	Texture.h	/^    	Context *gl;$/;"	m	class:tdogl::Texture	access:private
gl	renderer.h	/^	Render::Context* gl;$/;"	m	class:Renderer	access:private
gl	sdlglapp.h	/^	Render::SDL::Context* gl;$/;"	m	class:SDLGLApp	access:protected
glActiveShaderProgram	glcorearb.h	/^GLAPI void APIENTRY glActiveShaderProgram (GLuint pipeline, GLuint program);$/;"	p	signature:(GLuint pipeline, GLuint program)
glActiveTexture	glcorearb.h	/^GLAPI void APIENTRY glActiveTexture (GLenum texture);$/;"	p	signature:(GLenum texture)
glAttachShader	glcorearb.h	/^GLAPI void APIENTRY glAttachShader (GLuint program, GLuint shader);$/;"	p	signature:(GLuint program, GLuint shader)
glBeginConditionalRender	glcorearb.h	/^GLAPI void APIENTRY glBeginConditionalRender (GLuint id, GLenum mode);$/;"	p	signature:(GLuint id, GLenum mode)
glBeginQuery	glcorearb.h	/^GLAPI void APIENTRY glBeginQuery (GLenum target, GLuint id);$/;"	p	signature:(GLenum target, GLuint id)
glBeginQueryIndexed	glcorearb.h	/^GLAPI void APIENTRY glBeginQueryIndexed (GLenum target, GLuint index, GLuint id);$/;"	p	signature:(GLenum target, GLuint index, GLuint id)
glBeginTransformFeedback	glcorearb.h	/^GLAPI void APIENTRY glBeginTransformFeedback (GLenum primitiveMode);$/;"	p	signature:(GLenum primitiveMode)
glBindAttribLocation	glcorearb.h	/^GLAPI void APIENTRY glBindAttribLocation (GLuint program, GLuint index, const GLchar *name);$/;"	p	signature:(GLuint program, GLuint index, const GLchar *name)
glBindBuffer	glcorearb.h	/^GLAPI void APIENTRY glBindBuffer (GLenum target, GLuint buffer);$/;"	p	signature:(GLenum target, GLuint buffer)
glBindBufferBase	glcorearb.h	/^GLAPI void APIENTRY glBindBufferBase (GLenum target, GLuint index, GLuint buffer);$/;"	p	signature:(GLenum target, GLuint index, GLuint buffer)
glBindBufferRange	glcorearb.h	/^GLAPI void APIENTRY glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);$/;"	p	signature:(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
glBindBuffersBase	glcorearb.h	/^GLAPI void APIENTRY glBindBuffersBase (GLenum target, GLuint first, GLsizei count, const GLuint *buffers);$/;"	p	signature:(GLenum target, GLuint first, GLsizei count, const GLuint *buffers)
glBindBuffersRange	glcorearb.h	/^GLAPI void APIENTRY glBindBuffersRange (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);$/;"	p	signature:(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
glBindFragDataLocation	glcorearb.h	/^GLAPI void APIENTRY glBindFragDataLocation (GLuint program, GLuint color, const GLchar *name);$/;"	p	signature:(GLuint program, GLuint color, const GLchar *name)
glBindFragDataLocationIndexed	glcorearb.h	/^GLAPI void APIENTRY glBindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);$/;"	p	signature:(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
glBindFramebuffer	glcorearb.h	/^GLAPI void APIENTRY glBindFramebuffer (GLenum target, GLuint framebuffer);$/;"	p	signature:(GLenum target, GLuint framebuffer)
glBindImageTexture	glcorearb.h	/^GLAPI void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);$/;"	p	signature:(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
glBindImageTextures	glcorearb.h	/^GLAPI void APIENTRY glBindImageTextures (GLuint first, GLsizei count, const GLuint *textures);$/;"	p	signature:(GLuint first, GLsizei count, const GLuint *textures)
glBindProgramPipeline	glcorearb.h	/^GLAPI void APIENTRY glBindProgramPipeline (GLuint pipeline);$/;"	p	signature:(GLuint pipeline)
glBindRenderbuffer	glcorearb.h	/^GLAPI void APIENTRY glBindRenderbuffer (GLenum target, GLuint renderbuffer);$/;"	p	signature:(GLenum target, GLuint renderbuffer)
glBindSampler	glcorearb.h	/^GLAPI void APIENTRY glBindSampler (GLuint unit, GLuint sampler);$/;"	p	signature:(GLuint unit, GLuint sampler)
glBindSamplers	glcorearb.h	/^GLAPI void APIENTRY glBindSamplers (GLuint first, GLsizei count, const GLuint *samplers);$/;"	p	signature:(GLuint first, GLsizei count, const GLuint *samplers)
glBindTexture	glcorearb.h	/^GLAPI void APIENTRY glBindTexture (GLenum target, GLuint texture);$/;"	p	signature:(GLenum target, GLuint texture)
glBindTextures	glcorearb.h	/^GLAPI void APIENTRY glBindTextures (GLuint first, GLsizei count, const GLuint *textures);$/;"	p	signature:(GLuint first, GLsizei count, const GLuint *textures)
glBindTransformFeedback	glcorearb.h	/^GLAPI void APIENTRY glBindTransformFeedback (GLenum target, GLuint id);$/;"	p	signature:(GLenum target, GLuint id)
glBindVertexArray	glcorearb.h	/^GLAPI void APIENTRY glBindVertexArray (GLuint array);$/;"	p	signature:(GLuint array)
glBindVertexBuffer	glcorearb.h	/^GLAPI void APIENTRY glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);$/;"	p	signature:(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
glBindVertexBuffers	glcorearb.h	/^GLAPI void APIENTRY glBindVertexBuffers (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);$/;"	p	signature:(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
glBlendColor	glcorearb.h	/^GLAPI void APIENTRY glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	p	signature:(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
glBlendEquation	glcorearb.h	/^GLAPI void APIENTRY glBlendEquation (GLenum mode);$/;"	p	signature:(GLenum mode)
glBlendEquationSeparate	glcorearb.h	/^GLAPI void APIENTRY glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha);$/;"	p	signature:(GLenum modeRGB, GLenum modeAlpha)
glBlendEquationSeparatei	glcorearb.h	/^GLAPI void APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha);$/;"	p	signature:(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
glBlendEquationSeparateiARB	glcorearb.h	/^GLAPI void APIENTRY glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha);$/;"	p	signature:(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
glBlendEquationi	glcorearb.h	/^GLAPI void APIENTRY glBlendEquationi (GLuint buf, GLenum mode);$/;"	p	signature:(GLuint buf, GLenum mode)
glBlendEquationiARB	glcorearb.h	/^GLAPI void APIENTRY glBlendEquationiARB (GLuint buf, GLenum mode);$/;"	p	signature:(GLuint buf, GLenum mode)
glBlendFunc	glcorearb.h	/^GLAPI void APIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor);$/;"	p	signature:(GLenum sfactor, GLenum dfactor)
glBlendFuncSeparate	glcorearb.h	/^GLAPI void APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);$/;"	p	signature:(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
glBlendFuncSeparatei	glcorearb.h	/^GLAPI void APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);$/;"	p	signature:(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
glBlendFuncSeparateiARB	glcorearb.h	/^GLAPI void APIENTRY glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);$/;"	p	signature:(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
glBlendFunci	glcorearb.h	/^GLAPI void APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum dst);$/;"	p	signature:(GLuint buf, GLenum src, GLenum dst)
glBlendFunciARB	glcorearb.h	/^GLAPI void APIENTRY glBlendFunciARB (GLuint buf, GLenum src, GLenum dst);$/;"	p	signature:(GLuint buf, GLenum src, GLenum dst)
glBlitFramebuffer	glcorearb.h	/^GLAPI void APIENTRY glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);$/;"	p	signature:(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
glBufferData	glcorearb.h	/^GLAPI void APIENTRY glBufferData (GLenum target, GLsizeiptr size, const void *data, GLenum usage);$/;"	p	signature:(GLenum target, GLsizeiptr size, const void *data, GLenum usage)
glBufferStorage	glcorearb.h	/^GLAPI void APIENTRY glBufferStorage (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);$/;"	p	signature:(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)
glBufferSubData	glcorearb.h	/^GLAPI void APIENTRY glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);$/;"	p	signature:(GLenum target, GLintptr offset, GLsizeiptr size, const void *data)
glCheckFramebufferStatus	glcorearb.h	/^GLAPI GLenum APIENTRY glCheckFramebufferStatus (GLenum target);$/;"	p	signature:(GLenum target)
glClampColor	glcorearb.h	/^GLAPI void APIENTRY glClampColor (GLenum target, GLenum clamp);$/;"	p	signature:(GLenum target, GLenum clamp)
glClear	glcorearb.h	/^GLAPI void APIENTRY glClear (GLbitfield mask);$/;"	p	signature:(GLbitfield mask)
glClearBufferData	glcorearb.h	/^GLAPI void APIENTRY glClearBufferData (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);$/;"	p	signature:(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data)
glClearBufferSubData	glcorearb.h	/^GLAPI void APIENTRY glClearBufferSubData (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);$/;"	p	signature:(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)
glClearBufferfi	glcorearb.h	/^GLAPI void APIENTRY glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);$/;"	p	signature:(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
glClearBufferfv	glcorearb.h	/^GLAPI void APIENTRY glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat *value);$/;"	p	signature:(GLenum buffer, GLint drawbuffer, const GLfloat *value)
glClearBufferiv	glcorearb.h	/^GLAPI void APIENTRY glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint *value);$/;"	p	signature:(GLenum buffer, GLint drawbuffer, const GLint *value)
glClearBufferuiv	glcorearb.h	/^GLAPI void APIENTRY glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint *value);$/;"	p	signature:(GLenum buffer, GLint drawbuffer, const GLuint *value)
glClearColor	glcorearb.h	/^GLAPI void APIENTRY glClearColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	p	signature:(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
glClearDepth	glcorearb.h	/^GLAPI void APIENTRY glClearDepth (GLdouble depth);$/;"	p	signature:(GLdouble depth)
glClearDepthf	glcorearb.h	/^GLAPI void APIENTRY glClearDepthf (GLfloat d);$/;"	p	signature:(GLfloat d)
glClearStencil	glcorearb.h	/^GLAPI void APIENTRY glClearStencil (GLint s);$/;"	p	signature:(GLint s)
glClearTexImage	glcorearb.h	/^GLAPI void APIENTRY glClearTexImage (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);$/;"	p	signature:(GLuint texture, GLint level, GLenum format, GLenum type, const void *data)
glClearTexSubImage	glcorearb.h	/^GLAPI void APIENTRY glClearTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);$/;"	p	signature:(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)
glClientWaitSync	glcorearb.h	/^GLAPI GLenum APIENTRY glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	p	signature:(GLsync sync, GLbitfield flags, GLuint64 timeout)
glColorMask	glcorearb.h	/^GLAPI void APIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);$/;"	p	signature:(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
glColorMaski	glcorearb.h	/^GLAPI void APIENTRY glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);$/;"	p	signature:(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
glCompileShader	glcorearb.h	/^GLAPI void APIENTRY glCompileShader (GLuint shader);$/;"	p	signature:(GLuint shader)
glCompileShaderIncludeARB	glcorearb.h	/^GLAPI void APIENTRY glCompileShaderIncludeARB (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);$/;"	p	signature:(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length)
glCompressedTexImage1D	glcorearb.h	/^GLAPI void APIENTRY glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);$/;"	p	signature:(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)
glCompressedTexImage2D	glcorearb.h	/^GLAPI void APIENTRY glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);$/;"	p	signature:(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)
glCompressedTexImage3D	glcorearb.h	/^GLAPI void APIENTRY glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);$/;"	p	signature:(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)
glCompressedTexSubImage1D	glcorearb.h	/^GLAPI void APIENTRY glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)
glCompressedTexSubImage2D	glcorearb.h	/^GLAPI void APIENTRY glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)
glCompressedTexSubImage3D	glcorearb.h	/^GLAPI void APIENTRY glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
glCopyBufferSubData	glcorearb.h	/^GLAPI void APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);$/;"	p	signature:(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
glCopyImageSubData	glcorearb.h	/^GLAPI void APIENTRY glCopyImageSubData (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);$/;"	p	signature:(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
glCopyTexImage1D	glcorearb.h	/^GLAPI void APIENTRY glCopyTexImage1D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);$/;"	p	signature:(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
glCopyTexImage2D	glcorearb.h	/^GLAPI void APIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);$/;"	p	signature:(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
glCopyTexSubImage1D	glcorearb.h	/^GLAPI void APIENTRY glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
glCopyTexSubImage2D	glcorearb.h	/^GLAPI void APIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
glCopyTexSubImage3D	glcorearb.h	/^GLAPI void APIENTRY glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
glCreateProgram	glcorearb.h	/^GLAPI GLuint APIENTRY glCreateProgram (void);$/;"	p	signature:(void)
glCreateShader	glcorearb.h	/^GLAPI GLuint APIENTRY glCreateShader (GLenum type);$/;"	p	signature:(GLenum type)
glCreateShaderProgramv	glcorearb.h	/^GLAPI GLuint APIENTRY glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar *const*strings);$/;"	p	signature:(GLenum type, GLsizei count, const GLchar *const*strings)
glCreateSyncFromCLeventARB	glcorearb.h	/^GLAPI GLsync APIENTRY glCreateSyncFromCLeventARB (struct _cl_context *context, struct _cl_event *event, GLbitfield flags);$/;"	p	signature:(struct _cl_context *context, struct _cl_event *event, GLbitfield flags)
glCullFace	glcorearb.h	/^GLAPI void APIENTRY glCullFace (GLenum mode);$/;"	p	signature:(GLenum mode)
glDebugMessageCallback	glcorearb.h	/^GLAPI void APIENTRY glDebugMessageCallback (GLDEBUGPROC callback, const void *userParam);$/;"	p	signature:(GLDEBUGPROC callback, const void *userParam)
glDebugMessageCallbackARB	glcorearb.h	/^GLAPI void APIENTRY glDebugMessageCallbackARB (GLDEBUGPROCARB callback, const void *userParam);$/;"	p	signature:(GLDEBUGPROCARB callback, const void *userParam)
glDebugMessageControl	glcorearb.h	/^GLAPI void APIENTRY glDebugMessageControl (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);$/;"	p	signature:(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
glDebugMessageControlARB	glcorearb.h	/^GLAPI void APIENTRY glDebugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);$/;"	p	signature:(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
glDebugMessageInsert	glcorearb.h	/^GLAPI void APIENTRY glDebugMessageInsert (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);$/;"	p	signature:(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
glDebugMessageInsertARB	glcorearb.h	/^GLAPI void APIENTRY glDebugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);$/;"	p	signature:(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
glDeleteBuffers	glcorearb.h	/^GLAPI void APIENTRY glDeleteBuffers (GLsizei n, const GLuint *buffers);$/;"	p	signature:(GLsizei n, const GLuint *buffers)
glDeleteFramebuffers	glcorearb.h	/^GLAPI void APIENTRY glDeleteFramebuffers (GLsizei n, const GLuint *framebuffers);$/;"	p	signature:(GLsizei n, const GLuint *framebuffers)
glDeleteNamedStringARB	glcorearb.h	/^GLAPI void APIENTRY glDeleteNamedStringARB (GLint namelen, const GLchar *name);$/;"	p	signature:(GLint namelen, const GLchar *name)
glDeleteProgram	glcorearb.h	/^GLAPI void APIENTRY glDeleteProgram (GLuint program);$/;"	p	signature:(GLuint program)
glDeleteProgramPipelines	glcorearb.h	/^GLAPI void APIENTRY glDeleteProgramPipelines (GLsizei n, const GLuint *pipelines);$/;"	p	signature:(GLsizei n, const GLuint *pipelines)
glDeleteQueries	glcorearb.h	/^GLAPI void APIENTRY glDeleteQueries (GLsizei n, const GLuint *ids);$/;"	p	signature:(GLsizei n, const GLuint *ids)
glDeleteRenderbuffers	glcorearb.h	/^GLAPI void APIENTRY glDeleteRenderbuffers (GLsizei n, const GLuint *renderbuffers);$/;"	p	signature:(GLsizei n, const GLuint *renderbuffers)
glDeleteSamplers	glcorearb.h	/^GLAPI void APIENTRY glDeleteSamplers (GLsizei count, const GLuint *samplers);$/;"	p	signature:(GLsizei count, const GLuint *samplers)
glDeleteShader	glcorearb.h	/^GLAPI void APIENTRY glDeleteShader (GLuint shader);$/;"	p	signature:(GLuint shader)
glDeleteSync	glcorearb.h	/^GLAPI void APIENTRY glDeleteSync (GLsync sync);$/;"	p	signature:(GLsync sync)
glDeleteTextures	glcorearb.h	/^GLAPI void APIENTRY glDeleteTextures (GLsizei n, const GLuint *textures);$/;"	p	signature:(GLsizei n, const GLuint *textures)
glDeleteTransformFeedbacks	glcorearb.h	/^GLAPI void APIENTRY glDeleteTransformFeedbacks (GLsizei n, const GLuint *ids);$/;"	p	signature:(GLsizei n, const GLuint *ids)
glDeleteVertexArrays	glcorearb.h	/^GLAPI void APIENTRY glDeleteVertexArrays (GLsizei n, const GLuint *arrays);$/;"	p	signature:(GLsizei n, const GLuint *arrays)
glDepthFunc	glcorearb.h	/^GLAPI void APIENTRY glDepthFunc (GLenum func);$/;"	p	signature:(GLenum func)
glDepthMask	glcorearb.h	/^GLAPI void APIENTRY glDepthMask (GLboolean flag);$/;"	p	signature:(GLboolean flag)
glDepthRange	glcorearb.h	/^GLAPI void APIENTRY glDepthRange (GLdouble near, GLdouble far);$/;"	p	signature:(GLdouble near, GLdouble far)
glDepthRangeArrayv	glcorearb.h	/^GLAPI void APIENTRY glDepthRangeArrayv (GLuint first, GLsizei count, const GLdouble *v);$/;"	p	signature:(GLuint first, GLsizei count, const GLdouble *v)
glDepthRangeIndexed	glcorearb.h	/^GLAPI void APIENTRY glDepthRangeIndexed (GLuint index, GLdouble n, GLdouble f);$/;"	p	signature:(GLuint index, GLdouble n, GLdouble f)
glDepthRangef	glcorearb.h	/^GLAPI void APIENTRY glDepthRangef (GLfloat n, GLfloat f);$/;"	p	signature:(GLfloat n, GLfloat f)
glDetachShader	glcorearb.h	/^GLAPI void APIENTRY glDetachShader (GLuint program, GLuint shader);$/;"	p	signature:(GLuint program, GLuint shader)
glDisable	glcorearb.h	/^GLAPI void APIENTRY glDisable (GLenum cap);$/;"	p	signature:(GLenum cap)
glDisableVertexAttribArray	glcorearb.h	/^GLAPI void APIENTRY glDisableVertexAttribArray (GLuint index);$/;"	p	signature:(GLuint index)
glDisablei	glcorearb.h	/^GLAPI void APIENTRY glDisablei (GLenum target, GLuint index);$/;"	p	signature:(GLenum target, GLuint index)
glDispatchCompute	glcorearb.h	/^GLAPI void APIENTRY glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);$/;"	p	signature:(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
glDispatchComputeGroupSizeARB	glcorearb.h	/^GLAPI void APIENTRY glDispatchComputeGroupSizeARB (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);$/;"	p	signature:(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
glDispatchComputeIndirect	glcorearb.h	/^GLAPI void APIENTRY glDispatchComputeIndirect (GLintptr indirect);$/;"	p	signature:(GLintptr indirect)
glDrawArrays	glcorearb.h	/^GLAPI void APIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count);$/;"	p	signature:(GLenum mode, GLint first, GLsizei count)
glDrawArraysIndirect	glcorearb.h	/^GLAPI void APIENTRY glDrawArraysIndirect (GLenum mode, const void *indirect);$/;"	p	signature:(GLenum mode, const void *indirect)
glDrawArraysInstanced	glcorearb.h	/^GLAPI void APIENTRY glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);$/;"	p	signature:(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
glDrawArraysInstancedBaseInstance	glcorearb.h	/^GLAPI void APIENTRY glDrawArraysInstancedBaseInstance (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);$/;"	p	signature:(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
glDrawBuffer	glcorearb.h	/^GLAPI void APIENTRY glDrawBuffer (GLenum mode);$/;"	p	signature:(GLenum mode)
glDrawBuffers	glcorearb.h	/^GLAPI void APIENTRY glDrawBuffers (GLsizei n, const GLenum *bufs);$/;"	p	signature:(GLsizei n, const GLenum *bufs)
glDrawElements	glcorearb.h	/^GLAPI void APIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum type, const void *indices);$/;"	p	signature:(GLenum mode, GLsizei count, GLenum type, const void *indices)
glDrawElementsBaseVertex	glcorearb.h	/^GLAPI void APIENTRY glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);$/;"	p	signature:(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)
glDrawElementsIndirect	glcorearb.h	/^GLAPI void APIENTRY glDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect);$/;"	p	signature:(GLenum mode, GLenum type, const void *indirect)
glDrawElementsInstanced	glcorearb.h	/^GLAPI void APIENTRY glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);$/;"	p	signature:(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)
glDrawElementsInstancedBaseInstance	glcorearb.h	/^GLAPI void APIENTRY glDrawElementsInstancedBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);$/;"	p	signature:(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)
glDrawElementsInstancedBaseVertex	glcorearb.h	/^GLAPI void APIENTRY glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);$/;"	p	signature:(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)
glDrawElementsInstancedBaseVertexBaseInstance	glcorearb.h	/^GLAPI void APIENTRY glDrawElementsInstancedBaseVertexBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);$/;"	p	signature:(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
glDrawRangeElements	glcorearb.h	/^GLAPI void APIENTRY glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);$/;"	p	signature:(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)
glDrawRangeElementsBaseVertex	glcorearb.h	/^GLAPI void APIENTRY glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);$/;"	p	signature:(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)
glDrawTransformFeedback	glcorearb.h	/^GLAPI void APIENTRY glDrawTransformFeedback (GLenum mode, GLuint id);$/;"	p	signature:(GLenum mode, GLuint id)
glDrawTransformFeedbackInstanced	glcorearb.h	/^GLAPI void APIENTRY glDrawTransformFeedbackInstanced (GLenum mode, GLuint id, GLsizei instancecount);$/;"	p	signature:(GLenum mode, GLuint id, GLsizei instancecount)
glDrawTransformFeedbackStream	glcorearb.h	/^GLAPI void APIENTRY glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream);$/;"	p	signature:(GLenum mode, GLuint id, GLuint stream)
glDrawTransformFeedbackStreamInstanced	glcorearb.h	/^GLAPI void APIENTRY glDrawTransformFeedbackStreamInstanced (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);$/;"	p	signature:(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)
glEnable	glcorearb.h	/^GLAPI void APIENTRY glEnable (GLenum cap);$/;"	p	signature:(GLenum cap)
glEnableVertexAttribArray	glcorearb.h	/^GLAPI void APIENTRY glEnableVertexAttribArray (GLuint index);$/;"	p	signature:(GLuint index)
glEnablei	glcorearb.h	/^GLAPI void APIENTRY glEnablei (GLenum target, GLuint index);$/;"	p	signature:(GLenum target, GLuint index)
glEndConditionalRender	glcorearb.h	/^GLAPI void APIENTRY glEndConditionalRender (void);$/;"	p	signature:(void)
glEndQuery	glcorearb.h	/^GLAPI void APIENTRY glEndQuery (GLenum target);$/;"	p	signature:(GLenum target)
glEndQueryIndexed	glcorearb.h	/^GLAPI void APIENTRY glEndQueryIndexed (GLenum target, GLuint index);$/;"	p	signature:(GLenum target, GLuint index)
glEndTransformFeedback	glcorearb.h	/^GLAPI void APIENTRY glEndTransformFeedback (void);$/;"	p	signature:(void)
glFenceSync	glcorearb.h	/^GLAPI GLsync APIENTRY glFenceSync (GLenum condition, GLbitfield flags);$/;"	p	signature:(GLenum condition, GLbitfield flags)
glFinish	glcorearb.h	/^GLAPI void APIENTRY glFinish (void);$/;"	p	signature:(void)
glFlush	glcorearb.h	/^GLAPI void APIENTRY glFlush (void);$/;"	p	signature:(void)
glFlushMappedBufferRange	glcorearb.h	/^GLAPI void APIENTRY glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length);$/;"	p	signature:(GLenum target, GLintptr offset, GLsizeiptr length)
glFramebufferParameteri	glcorearb.h	/^GLAPI void APIENTRY glFramebufferParameteri (GLenum target, GLenum pname, GLint param);$/;"	p	signature:(GLenum target, GLenum pname, GLint param)
glFramebufferRenderbuffer	glcorearb.h	/^GLAPI void APIENTRY glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);$/;"	p	signature:(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
glFramebufferTexture	glcorearb.h	/^GLAPI void APIENTRY glFramebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level);$/;"	p	signature:(GLenum target, GLenum attachment, GLuint texture, GLint level)
glFramebufferTexture1D	glcorearb.h	/^GLAPI void APIENTRY glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	p	signature:(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
glFramebufferTexture2D	glcorearb.h	/^GLAPI void APIENTRY glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	p	signature:(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
glFramebufferTexture3D	glcorearb.h	/^GLAPI void APIENTRY glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);$/;"	p	signature:(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
glFramebufferTextureLayer	glcorearb.h	/^GLAPI void APIENTRY glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);$/;"	p	signature:(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
glFrontFace	glcorearb.h	/^GLAPI void APIENTRY glFrontFace (GLenum mode);$/;"	p	signature:(GLenum mode)
glGenBuffers	glcorearb.h	/^GLAPI void APIENTRY glGenBuffers (GLsizei n, GLuint *buffers);$/;"	p	signature:(GLsizei n, GLuint *buffers)
glGenFramebuffers	glcorearb.h	/^GLAPI void APIENTRY glGenFramebuffers (GLsizei n, GLuint *framebuffers);$/;"	p	signature:(GLsizei n, GLuint *framebuffers)
glGenProgramPipelines	glcorearb.h	/^GLAPI void APIENTRY glGenProgramPipelines (GLsizei n, GLuint *pipelines);$/;"	p	signature:(GLsizei n, GLuint *pipelines)
glGenQueries	glcorearb.h	/^GLAPI void APIENTRY glGenQueries (GLsizei n, GLuint *ids);$/;"	p	signature:(GLsizei n, GLuint *ids)
glGenRenderbuffers	glcorearb.h	/^GLAPI void APIENTRY glGenRenderbuffers (GLsizei n, GLuint *renderbuffers);$/;"	p	signature:(GLsizei n, GLuint *renderbuffers)
glGenSamplers	glcorearb.h	/^GLAPI void APIENTRY glGenSamplers (GLsizei count, GLuint *samplers);$/;"	p	signature:(GLsizei count, GLuint *samplers)
glGenTextures	glcorearb.h	/^GLAPI void APIENTRY glGenTextures (GLsizei n, GLuint *textures);$/;"	p	signature:(GLsizei n, GLuint *textures)
glGenTransformFeedbacks	glcorearb.h	/^GLAPI void APIENTRY glGenTransformFeedbacks (GLsizei n, GLuint *ids);$/;"	p	signature:(GLsizei n, GLuint *ids)
glGenVertexArrays	glcorearb.h	/^GLAPI void APIENTRY glGenVertexArrays (GLsizei n, GLuint *arrays);$/;"	p	signature:(GLsizei n, GLuint *arrays)
glGenerateMipmap	glcorearb.h	/^GLAPI void APIENTRY glGenerateMipmap (GLenum target);$/;"	p	signature:(GLenum target)
glGetActiveAtomicCounterBufferiv	glcorearb.h	/^GLAPI void APIENTRY glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);$/;"	p	signature:(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
glGetActiveAttrib	glcorearb.h	/^GLAPI void APIENTRY glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);$/;"	p	signature:(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
glGetActiveSubroutineName	glcorearb.h	/^GLAPI void APIENTRY glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);$/;"	p	signature:(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)
glGetActiveSubroutineUniformName	glcorearb.h	/^GLAPI void APIENTRY glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);$/;"	p	signature:(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)
glGetActiveSubroutineUniformiv	glcorearb.h	/^GLAPI void APIENTRY glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);$/;"	p	signature:(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)
glGetActiveUniform	glcorearb.h	/^GLAPI void APIENTRY glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);$/;"	p	signature:(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
glGetActiveUniformBlockName	glcorearb.h	/^GLAPI void APIENTRY glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);$/;"	p	signature:(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
glGetActiveUniformBlockiv	glcorearb.h	/^GLAPI void APIENTRY glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);$/;"	p	signature:(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
glGetActiveUniformName	glcorearb.h	/^GLAPI void APIENTRY glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);$/;"	p	signature:(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
glGetActiveUniformsiv	glcorearb.h	/^GLAPI void APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);$/;"	p	signature:(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
glGetAttachedShaders	glcorearb.h	/^GLAPI void APIENTRY glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);$/;"	p	signature:(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
glGetAttribLocation	glcorearb.h	/^GLAPI GLint APIENTRY glGetAttribLocation (GLuint program, const GLchar *name);$/;"	p	signature:(GLuint program, const GLchar *name)
glGetBooleani_v	glcorearb.h	/^GLAPI void APIENTRY glGetBooleani_v (GLenum target, GLuint index, GLboolean *data);$/;"	p	signature:(GLenum target, GLuint index, GLboolean *data)
glGetBooleanv	glcorearb.h	/^GLAPI void APIENTRY glGetBooleanv (GLenum pname, GLboolean *data);$/;"	p	signature:(GLenum pname, GLboolean *data)
glGetBufferParameteri64v	glcorearb.h	/^GLAPI void APIENTRY glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint64 *params)
glGetBufferParameteriv	glcorearb.h	/^GLAPI void APIENTRY glGetBufferParameteriv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glGetBufferPointerv	glcorearb.h	/^GLAPI void APIENTRY glGetBufferPointerv (GLenum target, GLenum pname, void **params);$/;"	p	signature:(GLenum target, GLenum pname, void **params)
glGetBufferSubData	glcorearb.h	/^GLAPI void APIENTRY glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, void *data);$/;"	p	signature:(GLenum target, GLintptr offset, GLsizeiptr size, void *data)
glGetCompressedTexImage	glcorearb.h	/^GLAPI void APIENTRY glGetCompressedTexImage (GLenum target, GLint level, void *img);$/;"	p	signature:(GLenum target, GLint level, void *img)
glGetDebugMessageLog	glcorearb.h	/^GLAPI GLuint APIENTRY glGetDebugMessageLog (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);$/;"	p	signature:(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
glGetDebugMessageLogARB	glcorearb.h	/^GLAPI GLuint APIENTRY glGetDebugMessageLogARB (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);$/;"	p	signature:(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
glGetDoublei_v	glcorearb.h	/^GLAPI void APIENTRY glGetDoublei_v (GLenum target, GLuint index, GLdouble *data);$/;"	p	signature:(GLenum target, GLuint index, GLdouble *data)
glGetDoublev	glcorearb.h	/^GLAPI void APIENTRY glGetDoublev (GLenum pname, GLdouble *data);$/;"	p	signature:(GLenum pname, GLdouble *data)
glGetError	glcorearb.h	/^GLAPI GLenum APIENTRY glGetError (void);$/;"	p	signature:(void)
glGetFloati_v	glcorearb.h	/^GLAPI void APIENTRY glGetFloati_v (GLenum target, GLuint index, GLfloat *data);$/;"	p	signature:(GLenum target, GLuint index, GLfloat *data)
glGetFloatv	glcorearb.h	/^GLAPI void APIENTRY glGetFloatv (GLenum pname, GLfloat *data);$/;"	p	signature:(GLenum pname, GLfloat *data)
glGetFragDataIndex	glcorearb.h	/^GLAPI GLint APIENTRY glGetFragDataIndex (GLuint program, const GLchar *name);$/;"	p	signature:(GLuint program, const GLchar *name)
glGetFragDataLocation	glcorearb.h	/^GLAPI GLint APIENTRY glGetFragDataLocation (GLuint program, const GLchar *name);$/;"	p	signature:(GLuint program, const GLchar *name)
glGetFramebufferAttachmentParameteriv	glcorearb.h	/^GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum attachment, GLenum pname, GLint *params)
glGetFramebufferParameteriv	glcorearb.h	/^GLAPI void APIENTRY glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glGetGraphicsResetStatusARB	glcorearb.h	/^GLAPI GLenum APIENTRY glGetGraphicsResetStatusARB (void);$/;"	p	signature:(void)
glGetImageHandleARB	glcorearb.h	/^GLAPI GLuint64 APIENTRY glGetImageHandleARB (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);$/;"	p	signature:(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
glGetInteger64i_v	glcorearb.h	/^GLAPI void APIENTRY glGetInteger64i_v (GLenum target, GLuint index, GLint64 *data);$/;"	p	signature:(GLenum target, GLuint index, GLint64 *data)
glGetInteger64v	glcorearb.h	/^GLAPI void APIENTRY glGetInteger64v (GLenum pname, GLint64 *data);$/;"	p	signature:(GLenum pname, GLint64 *data)
glGetIntegeri_v	glcorearb.h	/^GLAPI void APIENTRY glGetIntegeri_v (GLenum target, GLuint index, GLint *data);$/;"	p	signature:(GLenum target, GLuint index, GLint *data)
glGetIntegerv	glcorearb.h	/^GLAPI void APIENTRY glGetIntegerv (GLenum pname, GLint *data);$/;"	p	signature:(GLenum pname, GLint *data)
glGetInternalformati64v	glcorearb.h	/^GLAPI void APIENTRY glGetInternalformati64v (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);$/;"	p	signature:(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
glGetInternalformativ	glcorearb.h	/^GLAPI void APIENTRY glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);$/;"	p	signature:(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
glGetMultisamplefv	glcorearb.h	/^GLAPI void APIENTRY glGetMultisamplefv (GLenum pname, GLuint index, GLfloat *val);$/;"	p	signature:(GLenum pname, GLuint index, GLfloat *val)
glGetNamedStringARB	glcorearb.h	/^GLAPI void APIENTRY glGetNamedStringARB (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);$/;"	p	signature:(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
glGetNamedStringivARB	glcorearb.h	/^GLAPI void APIENTRY glGetNamedStringivARB (GLint namelen, const GLchar *name, GLenum pname, GLint *params);$/;"	p	signature:(GLint namelen, const GLchar *name, GLenum pname, GLint *params)
glGetObjectLabel	glcorearb.h	/^GLAPI void APIENTRY glGetObjectLabel (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);$/;"	p	signature:(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
glGetObjectPtrLabel	glcorearb.h	/^GLAPI void APIENTRY glGetObjectPtrLabel (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);$/;"	p	signature:(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
glGetPointerv	glcorearb.h	/^GLAPI void APIENTRY glGetPointerv (GLenum pname, void **params);$/;"	p	signature:(GLenum pname, void **params)
glGetProgramBinary	glcorearb.h	/^GLAPI void APIENTRY glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);$/;"	p	signature:(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)
glGetProgramInfoLog	glcorearb.h	/^GLAPI void APIENTRY glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	p	signature:(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
glGetProgramInterfaceiv	glcorearb.h	/^GLAPI void APIENTRY glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint *params);$/;"	p	signature:(GLuint program, GLenum programInterface, GLenum pname, GLint *params)
glGetProgramPipelineInfoLog	glcorearb.h	/^GLAPI void APIENTRY glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	p	signature:(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
glGetProgramPipelineiv	glcorearb.h	/^GLAPI void APIENTRY glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint *params);$/;"	p	signature:(GLuint pipeline, GLenum pname, GLint *params)
glGetProgramResourceIndex	glcorearb.h	/^GLAPI GLuint APIENTRY glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar *name);$/;"	p	signature:(GLuint program, GLenum programInterface, const GLchar *name)
glGetProgramResourceLocation	glcorearb.h	/^GLAPI GLint APIENTRY glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar *name);$/;"	p	signature:(GLuint program, GLenum programInterface, const GLchar *name)
glGetProgramResourceLocationIndex	glcorearb.h	/^GLAPI GLint APIENTRY glGetProgramResourceLocationIndex (GLuint program, GLenum programInterface, const GLchar *name);$/;"	p	signature:(GLuint program, GLenum programInterface, const GLchar *name)
glGetProgramResourceName	glcorearb.h	/^GLAPI void APIENTRY glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);$/;"	p	signature:(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
glGetProgramResourceiv	glcorearb.h	/^GLAPI void APIENTRY glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);$/;"	p	signature:(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
glGetProgramStageiv	glcorearb.h	/^GLAPI void APIENTRY glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint *values);$/;"	p	signature:(GLuint program, GLenum shadertype, GLenum pname, GLint *values)
glGetProgramiv	glcorearb.h	/^GLAPI void APIENTRY glGetProgramiv (GLuint program, GLenum pname, GLint *params);$/;"	p	signature:(GLuint program, GLenum pname, GLint *params)
glGetQueryIndexediv	glcorearb.h	/^GLAPI void APIENTRY glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLuint index, GLenum pname, GLint *params)
glGetQueryObjecti64v	glcorearb.h	/^GLAPI void APIENTRY glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 *params);$/;"	p	signature:(GLuint id, GLenum pname, GLint64 *params)
glGetQueryObjectiv	glcorearb.h	/^GLAPI void APIENTRY glGetQueryObjectiv (GLuint id, GLenum pname, GLint *params);$/;"	p	signature:(GLuint id, GLenum pname, GLint *params)
glGetQueryObjectui64v	glcorearb.h	/^GLAPI void APIENTRY glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 *params);$/;"	p	signature:(GLuint id, GLenum pname, GLuint64 *params)
glGetQueryObjectuiv	glcorearb.h	/^GLAPI void APIENTRY glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint *params);$/;"	p	signature:(GLuint id, GLenum pname, GLuint *params)
glGetQueryiv	glcorearb.h	/^GLAPI void APIENTRY glGetQueryiv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glGetRenderbufferParameteriv	glcorearb.h	/^GLAPI void APIENTRY glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glGetSamplerParameterIiv	glcorearb.h	/^GLAPI void APIENTRY glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint *params);$/;"	p	signature:(GLuint sampler, GLenum pname, GLint *params)
glGetSamplerParameterIuiv	glcorearb.h	/^GLAPI void APIENTRY glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint *params);$/;"	p	signature:(GLuint sampler, GLenum pname, GLuint *params)
glGetSamplerParameterfv	glcorearb.h	/^GLAPI void APIENTRY glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat *params);$/;"	p	signature:(GLuint sampler, GLenum pname, GLfloat *params)
glGetSamplerParameteriv	glcorearb.h	/^GLAPI void APIENTRY glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint *params);$/;"	p	signature:(GLuint sampler, GLenum pname, GLint *params)
glGetShaderInfoLog	glcorearb.h	/^GLAPI void APIENTRY glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	p	signature:(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
glGetShaderPrecisionFormat	glcorearb.h	/^GLAPI void APIENTRY glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);$/;"	p	signature:(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
glGetShaderSource	glcorearb.h	/^GLAPI void APIENTRY glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);$/;"	p	signature:(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
glGetShaderiv	glcorearb.h	/^GLAPI void APIENTRY glGetShaderiv (GLuint shader, GLenum pname, GLint *params);$/;"	p	signature:(GLuint shader, GLenum pname, GLint *params)
glGetString	glcorearb.h	/^GLAPI const GLubyte *APIENTRY glGetString (GLenum name);$/;"	p	signature:(GLenum name)
glGetStringi	glcorearb.h	/^GLAPI const GLubyte *APIENTRY glGetStringi (GLenum name, GLuint index);$/;"	p	signature:(GLenum name, GLuint index)
glGetSubroutineIndex	glcorearb.h	/^GLAPI GLuint APIENTRY glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar *name);$/;"	p	signature:(GLuint program, GLenum shadertype, const GLchar *name)
glGetSubroutineUniformLocation	glcorearb.h	/^GLAPI GLint APIENTRY glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar *name);$/;"	p	signature:(GLuint program, GLenum shadertype, const GLchar *name)
glGetSynciv	glcorearb.h	/^GLAPI void APIENTRY glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);$/;"	p	signature:(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
glGetTexImage	glcorearb.h	/^GLAPI void APIENTRY glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, void *pixels);$/;"	p	signature:(GLenum target, GLint level, GLenum format, GLenum type, void *pixels)
glGetTexLevelParameterfv	glcorearb.h	/^GLAPI void APIENTRY glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum target, GLint level, GLenum pname, GLfloat *params)
glGetTexLevelParameteriv	glcorearb.h	/^GLAPI void APIENTRY glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLint level, GLenum pname, GLint *params)
glGetTexParameterIiv	glcorearb.h	/^GLAPI void APIENTRY glGetTexParameterIiv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glGetTexParameterIuiv	glcorearb.h	/^GLAPI void APIENTRY glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLuint *params)
glGetTexParameterfv	glcorearb.h	/^GLAPI void APIENTRY glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum target, GLenum pname, GLfloat *params)
glGetTexParameteriv	glcorearb.h	/^GLAPI void APIENTRY glGetTexParameteriv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glGetTextureHandleARB	glcorearb.h	/^GLAPI GLuint64 APIENTRY glGetTextureHandleARB (GLuint texture);$/;"	p	signature:(GLuint texture)
glGetTextureSamplerHandleARB	glcorearb.h	/^GLAPI GLuint64 APIENTRY glGetTextureSamplerHandleARB (GLuint texture, GLuint sampler);$/;"	p	signature:(GLuint texture, GLuint sampler)
glGetTransformFeedbackVarying	glcorearb.h	/^GLAPI void APIENTRY glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);$/;"	p	signature:(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
glGetUniformBlockIndex	glcorearb.h	/^GLAPI GLuint APIENTRY glGetUniformBlockIndex (GLuint program, const GLchar *uniformBlockName);$/;"	p	signature:(GLuint program, const GLchar *uniformBlockName)
glGetUniformIndices	glcorearb.h	/^GLAPI void APIENTRY glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);$/;"	p	signature:(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices)
glGetUniformLocation	glcorearb.h	/^GLAPI GLint APIENTRY glGetUniformLocation (GLuint program, const GLchar *name);$/;"	p	signature:(GLuint program, const GLchar *name)
glGetUniformSubroutineuiv	glcorearb.h	/^GLAPI void APIENTRY glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint *params);$/;"	p	signature:(GLenum shadertype, GLint location, GLuint *params)
glGetUniformdv	glcorearb.h	/^GLAPI void APIENTRY glGetUniformdv (GLuint program, GLint location, GLdouble *params);$/;"	p	signature:(GLuint program, GLint location, GLdouble *params)
glGetUniformfv	glcorearb.h	/^GLAPI void APIENTRY glGetUniformfv (GLuint program, GLint location, GLfloat *params);$/;"	p	signature:(GLuint program, GLint location, GLfloat *params)
glGetUniformiv	glcorearb.h	/^GLAPI void APIENTRY glGetUniformiv (GLuint program, GLint location, GLint *params);$/;"	p	signature:(GLuint program, GLint location, GLint *params)
glGetUniformuiv	glcorearb.h	/^GLAPI void APIENTRY glGetUniformuiv (GLuint program, GLint location, GLuint *params);$/;"	p	signature:(GLuint program, GLint location, GLuint *params)
glGetVertexAttribIiv	glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribIiv (GLuint index, GLenum pname, GLint *params);$/;"	p	signature:(GLuint index, GLenum pname, GLint *params)
glGetVertexAttribIuiv	glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint *params);$/;"	p	signature:(GLuint index, GLenum pname, GLuint *params)
glGetVertexAttribLdv	glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble *params);$/;"	p	signature:(GLuint index, GLenum pname, GLdouble *params)
glGetVertexAttribLui64vARB	glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribLui64vARB (GLuint index, GLenum pname, GLuint64EXT *params);$/;"	p	signature:(GLuint index, GLenum pname, GLuint64EXT *params)
glGetVertexAttribPointerv	glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribPointerv (GLuint index, GLenum pname, void **pointer);$/;"	p	signature:(GLuint index, GLenum pname, void **pointer)
glGetVertexAttribdv	glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble *params);$/;"	p	signature:(GLuint index, GLenum pname, GLdouble *params)
glGetVertexAttribfv	glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat *params);$/;"	p	signature:(GLuint index, GLenum pname, GLfloat *params)
glGetVertexAttribiv	glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribiv (GLuint index, GLenum pname, GLint *params);$/;"	p	signature:(GLuint index, GLenum pname, GLint *params)
glGetnCompressedTexImageARB	glcorearb.h	/^GLAPI void APIENTRY glGetnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, void *img);$/;"	p	signature:(GLenum target, GLint lod, GLsizei bufSize, void *img)
glGetnTexImageARB	glcorearb.h	/^GLAPI void APIENTRY glGetnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);$/;"	p	signature:(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img)
glGetnUniformdvARB	glcorearb.h	/^GLAPI void APIENTRY glGetnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);$/;"	p	signature:(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
glGetnUniformfvARB	glcorearb.h	/^GLAPI void APIENTRY glGetnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);$/;"	p	signature:(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
glGetnUniformivARB	glcorearb.h	/^GLAPI void APIENTRY glGetnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint *params);$/;"	p	signature:(GLuint program, GLint location, GLsizei bufSize, GLint *params)
glGetnUniformuivARB	glcorearb.h	/^GLAPI void APIENTRY glGetnUniformuivARB (GLuint program, GLint location, GLsizei bufSize, GLuint *params);$/;"	p	signature:(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
glHint	glcorearb.h	/^GLAPI void APIENTRY glHint (GLenum target, GLenum mode);$/;"	p	signature:(GLenum target, GLenum mode)
glInvalidateBufferData	glcorearb.h	/^GLAPI void APIENTRY glInvalidateBufferData (GLuint buffer);$/;"	p	signature:(GLuint buffer)
glInvalidateBufferSubData	glcorearb.h	/^GLAPI void APIENTRY glInvalidateBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr length);$/;"	p	signature:(GLuint buffer, GLintptr offset, GLsizeiptr length)
glInvalidateFramebuffer	glcorearb.h	/^GLAPI void APIENTRY glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments);$/;"	p	signature:(GLenum target, GLsizei numAttachments, const GLenum *attachments)
glInvalidateSubFramebuffer	glcorearb.h	/^GLAPI void APIENTRY glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
glInvalidateTexImage	glcorearb.h	/^GLAPI void APIENTRY glInvalidateTexImage (GLuint texture, GLint level);$/;"	p	signature:(GLuint texture, GLint level)
glInvalidateTexSubImage	glcorearb.h	/^GLAPI void APIENTRY glInvalidateTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);$/;"	p	signature:(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
glIsBuffer	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsBuffer (GLuint buffer);$/;"	p	signature:(GLuint buffer)
glIsEnabled	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsEnabled (GLenum cap);$/;"	p	signature:(GLenum cap)
glIsEnabledi	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsEnabledi (GLenum target, GLuint index);$/;"	p	signature:(GLenum target, GLuint index)
glIsFramebuffer	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsFramebuffer (GLuint framebuffer);$/;"	p	signature:(GLuint framebuffer)
glIsImageHandleResidentARB	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsImageHandleResidentARB (GLuint64 handle);$/;"	p	signature:(GLuint64 handle)
glIsNamedStringARB	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsNamedStringARB (GLint namelen, const GLchar *name);$/;"	p	signature:(GLint namelen, const GLchar *name)
glIsProgram	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsProgram (GLuint program);$/;"	p	signature:(GLuint program)
glIsProgramPipeline	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsProgramPipeline (GLuint pipeline);$/;"	p	signature:(GLuint pipeline)
glIsQuery	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsQuery (GLuint id);$/;"	p	signature:(GLuint id)
glIsRenderbuffer	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsRenderbuffer (GLuint renderbuffer);$/;"	p	signature:(GLuint renderbuffer)
glIsSampler	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsSampler (GLuint sampler);$/;"	p	signature:(GLuint sampler)
glIsShader	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsShader (GLuint shader);$/;"	p	signature:(GLuint shader)
glIsSync	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsSync (GLsync sync);$/;"	p	signature:(GLsync sync)
glIsTexture	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsTexture (GLuint texture);$/;"	p	signature:(GLuint texture)
glIsTextureHandleResidentARB	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsTextureHandleResidentARB (GLuint64 handle);$/;"	p	signature:(GLuint64 handle)
glIsTransformFeedback	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsTransformFeedback (GLuint id);$/;"	p	signature:(GLuint id)
glIsVertexArray	glcorearb.h	/^GLAPI GLboolean APIENTRY glIsVertexArray (GLuint array);$/;"	p	signature:(GLuint array)
glLineWidth	glcorearb.h	/^GLAPI void APIENTRY glLineWidth (GLfloat width);$/;"	p	signature:(GLfloat width)
glLinkProgram	glcorearb.h	/^GLAPI void APIENTRY glLinkProgram (GLuint program);$/;"	p	signature:(GLuint program)
glLogicOp	glcorearb.h	/^GLAPI void APIENTRY glLogicOp (GLenum opcode);$/;"	p	signature:(GLenum opcode)
glMakeImageHandleNonResidentARB	glcorearb.h	/^GLAPI void APIENTRY glMakeImageHandleNonResidentARB (GLuint64 handle);$/;"	p	signature:(GLuint64 handle)
glMakeImageHandleResidentARB	glcorearb.h	/^GLAPI void APIENTRY glMakeImageHandleResidentARB (GLuint64 handle, GLenum access);$/;"	p	signature:(GLuint64 handle, GLenum access)
glMakeTextureHandleNonResidentARB	glcorearb.h	/^GLAPI void APIENTRY glMakeTextureHandleNonResidentARB (GLuint64 handle);$/;"	p	signature:(GLuint64 handle)
glMakeTextureHandleResidentARB	glcorearb.h	/^GLAPI void APIENTRY glMakeTextureHandleResidentARB (GLuint64 handle);$/;"	p	signature:(GLuint64 handle)
glMapBuffer	glcorearb.h	/^GLAPI void *APIENTRY glMapBuffer (GLenum target, GLenum access);$/;"	p	signature:(GLenum target, GLenum access)
glMapBufferRange	glcorearb.h	/^GLAPI void *APIENTRY glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);$/;"	p	signature:(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
glMemoryBarrier	glcorearb.h	/^GLAPI void APIENTRY glMemoryBarrier (GLbitfield barriers);$/;"	p	signature:(GLbitfield barriers)
glMinSampleShading	glcorearb.h	/^GLAPI void APIENTRY glMinSampleShading (GLfloat value);$/;"	p	signature:(GLfloat value)
glMinSampleShadingARB	glcorearb.h	/^GLAPI void APIENTRY glMinSampleShadingARB (GLfloat value);$/;"	p	signature:(GLfloat value)
glMultiDrawArrays	glcorearb.h	/^GLAPI void APIENTRY glMultiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);$/;"	p	signature:(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount)
glMultiDrawArraysIndirect	glcorearb.h	/^GLAPI void APIENTRY glMultiDrawArraysIndirect (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);$/;"	p	signature:(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)
glMultiDrawArraysIndirectCountARB	glcorearb.h	/^GLAPI void APIENTRY glMultiDrawArraysIndirectCountARB (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);$/;"	p	signature:(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
glMultiDrawElements	glcorearb.h	/^GLAPI void APIENTRY glMultiDrawElements (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);$/;"	p	signature:(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount)
glMultiDrawElementsBaseVertex	glcorearb.h	/^GLAPI void APIENTRY glMultiDrawElementsBaseVertex (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);$/;"	p	signature:(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex)
glMultiDrawElementsIndirect	glcorearb.h	/^GLAPI void APIENTRY glMultiDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);$/;"	p	signature:(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)
glMultiDrawElementsIndirectCountARB	glcorearb.h	/^GLAPI void APIENTRY glMultiDrawElementsIndirectCountARB (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);$/;"	p	signature:(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
glNamedStringARB	glcorearb.h	/^GLAPI void APIENTRY glNamedStringARB (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);$/;"	p	signature:(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
glObjectLabel	glcorearb.h	/^GLAPI void APIENTRY glObjectLabel (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);$/;"	p	signature:(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
glObjectPtrLabel	glcorearb.h	/^GLAPI void APIENTRY glObjectPtrLabel (const void *ptr, GLsizei length, const GLchar *label);$/;"	p	signature:(const void *ptr, GLsizei length, const GLchar *label)
glPatchParameterfv	glcorearb.h	/^GLAPI void APIENTRY glPatchParameterfv (GLenum pname, const GLfloat *values);$/;"	p	signature:(GLenum pname, const GLfloat *values)
glPatchParameteri	glcorearb.h	/^GLAPI void APIENTRY glPatchParameteri (GLenum pname, GLint value);$/;"	p	signature:(GLenum pname, GLint value)
glPauseTransformFeedback	glcorearb.h	/^GLAPI void APIENTRY glPauseTransformFeedback (void);$/;"	p	signature:(void)
glPixelStoref	glcorearb.h	/^GLAPI void APIENTRY glPixelStoref (GLenum pname, GLfloat param);$/;"	p	signature:(GLenum pname, GLfloat param)
glPixelStorei	glcorearb.h	/^GLAPI void APIENTRY glPixelStorei (GLenum pname, GLint param);$/;"	p	signature:(GLenum pname, GLint param)
glPointParameterf	glcorearb.h	/^GLAPI void APIENTRY glPointParameterf (GLenum pname, GLfloat param);$/;"	p	signature:(GLenum pname, GLfloat param)
glPointParameterfv	glcorearb.h	/^GLAPI void APIENTRY glPointParameterfv (GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum pname, const GLfloat *params)
glPointParameteri	glcorearb.h	/^GLAPI void APIENTRY glPointParameteri (GLenum pname, GLint param);$/;"	p	signature:(GLenum pname, GLint param)
glPointParameteriv	glcorearb.h	/^GLAPI void APIENTRY glPointParameteriv (GLenum pname, const GLint *params);$/;"	p	signature:(GLenum pname, const GLint *params)
glPointSize	glcorearb.h	/^GLAPI void APIENTRY glPointSize (GLfloat size);$/;"	p	signature:(GLfloat size)
glPolygonMode	glcorearb.h	/^GLAPI void APIENTRY glPolygonMode (GLenum face, GLenum mode);$/;"	p	signature:(GLenum face, GLenum mode)
glPolygonOffset	glcorearb.h	/^GLAPI void APIENTRY glPolygonOffset (GLfloat factor, GLfloat units);$/;"	p	signature:(GLfloat factor, GLfloat units)
glPopDebugGroup	glcorearb.h	/^GLAPI void APIENTRY glPopDebugGroup (void);$/;"	p	signature:(void)
glPrimitiveRestartIndex	glcorearb.h	/^GLAPI void APIENTRY glPrimitiveRestartIndex (GLuint index);$/;"	p	signature:(GLuint index)
glProgramBinary	glcorearb.h	/^GLAPI void APIENTRY glProgramBinary (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);$/;"	p	signature:(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)
glProgramParameteri	glcorearb.h	/^GLAPI void APIENTRY glProgramParameteri (GLuint program, GLenum pname, GLint value);$/;"	p	signature:(GLuint program, GLenum pname, GLint value)
glProgramUniform1d	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1d (GLuint program, GLint location, GLdouble v0);$/;"	p	signature:(GLuint program, GLint location, GLdouble v0)
glProgramUniform1dv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLdouble *value)
glProgramUniform1f	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1f (GLuint program, GLint location, GLfloat v0);$/;"	p	signature:(GLuint program, GLint location, GLfloat v0)
glProgramUniform1fv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLfloat *value)
glProgramUniform1i	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1i (GLuint program, GLint location, GLint v0);$/;"	p	signature:(GLuint program, GLint location, GLint v0)
glProgramUniform1iv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLint *value)
glProgramUniform1ui	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1ui (GLuint program, GLint location, GLuint v0);$/;"	p	signature:(GLuint program, GLint location, GLuint v0)
glProgramUniform1uiv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLuint *value)
glProgramUniform2d	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1);$/;"	p	signature:(GLuint program, GLint location, GLdouble v0, GLdouble v1)
glProgramUniform2dv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLdouble *value)
glProgramUniform2f	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1);$/;"	p	signature:(GLuint program, GLint location, GLfloat v0, GLfloat v1)
glProgramUniform2fv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLfloat *value)
glProgramUniform2i	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1);$/;"	p	signature:(GLuint program, GLint location, GLint v0, GLint v1)
glProgramUniform2iv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLint *value)
glProgramUniform2ui	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1);$/;"	p	signature:(GLuint program, GLint location, GLuint v0, GLuint v1)
glProgramUniform2uiv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLuint *value)
glProgramUniform3d	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);$/;"	p	signature:(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)
glProgramUniform3dv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLdouble *value)
glProgramUniform3f	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	p	signature:(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
glProgramUniform3fv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLfloat *value)
glProgramUniform3i	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);$/;"	p	signature:(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
glProgramUniform3iv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLint *value)
glProgramUniform3ui	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	p	signature:(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
glProgramUniform3uiv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLuint *value)
glProgramUniform4d	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);$/;"	p	signature:(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)
glProgramUniform4dv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLdouble *value)
glProgramUniform4f	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);$/;"	p	signature:(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
glProgramUniform4fv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLfloat *value)
glProgramUniform4i	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);$/;"	p	signature:(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
glProgramUniform4iv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLint *value)
glProgramUniform4ui	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);$/;"	p	signature:(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
glProgramUniform4uiv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLuint *value)
glProgramUniformHandleui64ARB	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformHandleui64ARB (GLuint program, GLint location, GLuint64 value);$/;"	p	signature:(GLuint program, GLint location, GLuint64 value)
glProgramUniformHandleui64vARB	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformHandleui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *values);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLuint64 *values)
glProgramUniformMatrix2dv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix2fv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix2x3dv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix2x3fv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix2x4dv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix2x4fv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix3dv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix3fv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix3x2dv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix3x2fv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix3x4dv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix3x4fv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix4dv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix4fv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix4x2dv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix4x2fv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix4x3dv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix4x3fv	glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProvokingVertex	glcorearb.h	/^GLAPI void APIENTRY glProvokingVertex (GLenum mode);$/;"	p	signature:(GLenum mode)
glPushDebugGroup	glcorearb.h	/^GLAPI void APIENTRY glPushDebugGroup (GLenum source, GLuint id, GLsizei length, const GLchar *message);$/;"	p	signature:(GLenum source, GLuint id, GLsizei length, const GLchar *message)
glQueryCounter	glcorearb.h	/^GLAPI void APIENTRY glQueryCounter (GLuint id, GLenum target);$/;"	p	signature:(GLuint id, GLenum target)
glReadBuffer	glcorearb.h	/^GLAPI void APIENTRY glReadBuffer (GLenum mode);$/;"	p	signature:(GLenum mode)
glReadPixels	glcorearb.h	/^GLAPI void APIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)
glReadnPixelsARB	glcorearb.h	/^GLAPI void APIENTRY glReadnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)
glReleaseShaderCompiler	glcorearb.h	/^GLAPI void APIENTRY glReleaseShaderCompiler (void);$/;"	p	signature:(void)
glRenderbufferStorage	glcorearb.h	/^GLAPI void APIENTRY glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);$/;"	p	signature:(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
glRenderbufferStorageMultisample	glcorearb.h	/^GLAPI void APIENTRY glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	p	signature:(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
glResumeTransformFeedback	glcorearb.h	/^GLAPI void APIENTRY glResumeTransformFeedback (void);$/;"	p	signature:(void)
glSampleCoverage	glcorearb.h	/^GLAPI void APIENTRY glSampleCoverage (GLfloat value, GLboolean invert);$/;"	p	signature:(GLfloat value, GLboolean invert)
glSampleMaski	glcorearb.h	/^GLAPI void APIENTRY glSampleMaski (GLuint maskNumber, GLbitfield mask);$/;"	p	signature:(GLuint maskNumber, GLbitfield mask)
glSamplerParameterIiv	glcorearb.h	/^GLAPI void APIENTRY glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint *param);$/;"	p	signature:(GLuint sampler, GLenum pname, const GLint *param)
glSamplerParameterIuiv	glcorearb.h	/^GLAPI void APIENTRY glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint *param);$/;"	p	signature:(GLuint sampler, GLenum pname, const GLuint *param)
glSamplerParameterf	glcorearb.h	/^GLAPI void APIENTRY glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param);$/;"	p	signature:(GLuint sampler, GLenum pname, GLfloat param)
glSamplerParameterfv	glcorearb.h	/^GLAPI void APIENTRY glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat *param);$/;"	p	signature:(GLuint sampler, GLenum pname, const GLfloat *param)
glSamplerParameteri	glcorearb.h	/^GLAPI void APIENTRY glSamplerParameteri (GLuint sampler, GLenum pname, GLint param);$/;"	p	signature:(GLuint sampler, GLenum pname, GLint param)
glSamplerParameteriv	glcorearb.h	/^GLAPI void APIENTRY glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint *param);$/;"	p	signature:(GLuint sampler, GLenum pname, const GLint *param)
glScissor	glcorearb.h	/^GLAPI void APIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height)
glScissorArrayv	glcorearb.h	/^GLAPI void APIENTRY glScissorArrayv (GLuint first, GLsizei count, const GLint *v);$/;"	p	signature:(GLuint first, GLsizei count, const GLint *v)
glScissorIndexed	glcorearb.h	/^GLAPI void APIENTRY glScissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);$/;"	p	signature:(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
glScissorIndexedv	glcorearb.h	/^GLAPI void APIENTRY glScissorIndexedv (GLuint index, const GLint *v);$/;"	p	signature:(GLuint index, const GLint *v)
glShaderBinary	glcorearb.h	/^GLAPI void APIENTRY glShaderBinary (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);$/;"	p	signature:(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length)
glShaderSource	glcorearb.h	/^GLAPI void APIENTRY glShaderSource (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);$/;"	p	signature:(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)
glShaderStorageBlockBinding	glcorearb.h	/^GLAPI void APIENTRY glShaderStorageBlockBinding (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);$/;"	p	signature:(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
glStencilFunc	glcorearb.h	/^GLAPI void APIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask);$/;"	p	signature:(GLenum func, GLint ref, GLuint mask)
glStencilFuncSeparate	glcorearb.h	/^GLAPI void APIENTRY glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask);$/;"	p	signature:(GLenum face, GLenum func, GLint ref, GLuint mask)
glStencilMask	glcorearb.h	/^GLAPI void APIENTRY glStencilMask (GLuint mask);$/;"	p	signature:(GLuint mask)
glStencilMaskSeparate	glcorearb.h	/^GLAPI void APIENTRY glStencilMaskSeparate (GLenum face, GLuint mask);$/;"	p	signature:(GLenum face, GLuint mask)
glStencilOp	glcorearb.h	/^GLAPI void APIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);$/;"	p	signature:(GLenum fail, GLenum zfail, GLenum zpass)
glStencilOpSeparate	glcorearb.h	/^GLAPI void APIENTRY glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);$/;"	p	signature:(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
glTexBuffer	glcorearb.h	/^GLAPI void APIENTRY glTexBuffer (GLenum target, GLenum internalformat, GLuint buffer);$/;"	p	signature:(GLenum target, GLenum internalformat, GLuint buffer)
glTexBufferRange	glcorearb.h	/^GLAPI void APIENTRY glTexBufferRange (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);$/;"	p	signature:(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
glTexImage1D	glcorearb.h	/^GLAPI void APIENTRY glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)
glTexImage2D	glcorearb.h	/^GLAPI void APIENTRY glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)
glTexImage2DMultisample	glcorearb.h	/^GLAPI void APIENTRY glTexImage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);$/;"	p	signature:(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
glTexImage3D	glcorearb.h	/^GLAPI void APIENTRY glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
glTexImage3DMultisample	glcorearb.h	/^GLAPI void APIENTRY glTexImage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);$/;"	p	signature:(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
glTexPageCommitmentARB	glcorearb.h	/^GLAPI void APIENTRY glTexPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident)
glTexParameterIiv	glcorearb.h	/^GLAPI void APIENTRY glTexParameterIiv (GLenum target, GLenum pname, const GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLint *params)
glTexParameterIuiv	glcorearb.h	/^GLAPI void APIENTRY glTexParameterIuiv (GLenum target, GLenum pname, const GLuint *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLuint *params)
glTexParameterf	glcorearb.h	/^GLAPI void APIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat param);$/;"	p	signature:(GLenum target, GLenum pname, GLfloat param)
glTexParameterfv	glcorearb.h	/^GLAPI void APIENTRY glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLfloat *params)
glTexParameteri	glcorearb.h	/^GLAPI void APIENTRY glTexParameteri (GLenum target, GLenum pname, GLint param);$/;"	p	signature:(GLenum target, GLenum pname, GLint param)
glTexParameteriv	glcorearb.h	/^GLAPI void APIENTRY glTexParameteriv (GLenum target, GLenum pname, const GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLint *params)
glTexStorage1D	glcorearb.h	/^GLAPI void APIENTRY glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);$/;"	p	signature:(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
glTexStorage2D	glcorearb.h	/^GLAPI void APIENTRY glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);$/;"	p	signature:(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
glTexStorage2DMultisample	glcorearb.h	/^GLAPI void APIENTRY glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);$/;"	p	signature:(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
glTexStorage3D	glcorearb.h	/^GLAPI void APIENTRY glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);$/;"	p	signature:(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
glTexStorage3DMultisample	glcorearb.h	/^GLAPI void APIENTRY glTexStorage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);$/;"	p	signature:(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
glTexSubImage1D	glcorearb.h	/^GLAPI void APIENTRY glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)
glTexSubImage2D	glcorearb.h	/^GLAPI void APIENTRY glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
glTexSubImage3D	glcorearb.h	/^GLAPI void APIENTRY glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
glTextureView	glcorearb.h	/^GLAPI void APIENTRY glTextureView (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);$/;"	p	signature:(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
glTransformFeedbackVaryings	glcorearb.h	/^GLAPI void APIENTRY glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);$/;"	p	signature:(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)
glUniform1d	glcorearb.h	/^GLAPI void APIENTRY glUniform1d (GLint location, GLdouble x);$/;"	p	signature:(GLint location, GLdouble x)
glUniform1dv	glcorearb.h	/^GLAPI void APIENTRY glUniform1dv (GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, const GLdouble *value)
glUniform1f	glcorearb.h	/^GLAPI void APIENTRY glUniform1f (GLint location, GLfloat v0);$/;"	p	signature:(GLint location, GLfloat v0)
glUniform1fv	glcorearb.h	/^GLAPI void APIENTRY glUniform1fv (GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, const GLfloat *value)
glUniform1i	glcorearb.h	/^GLAPI void APIENTRY glUniform1i (GLint location, GLint v0);$/;"	p	signature:(GLint location, GLint v0)
glUniform1iv	glcorearb.h	/^GLAPI void APIENTRY glUniform1iv (GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLint *value)
glUniform1ui	glcorearb.h	/^GLAPI void APIENTRY glUniform1ui (GLint location, GLuint v0);$/;"	p	signature:(GLint location, GLuint v0)
glUniform1uiv	glcorearb.h	/^GLAPI void APIENTRY glUniform1uiv (GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLuint *value)
glUniform2d	glcorearb.h	/^GLAPI void APIENTRY glUniform2d (GLint location, GLdouble x, GLdouble y);$/;"	p	signature:(GLint location, GLdouble x, GLdouble y)
glUniform2dv	glcorearb.h	/^GLAPI void APIENTRY glUniform2dv (GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, const GLdouble *value)
glUniform2f	glcorearb.h	/^GLAPI void APIENTRY glUniform2f (GLint location, GLfloat v0, GLfloat v1);$/;"	p	signature:(GLint location, GLfloat v0, GLfloat v1)
glUniform2fv	glcorearb.h	/^GLAPI void APIENTRY glUniform2fv (GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, const GLfloat *value)
glUniform2i	glcorearb.h	/^GLAPI void APIENTRY glUniform2i (GLint location, GLint v0, GLint v1);$/;"	p	signature:(GLint location, GLint v0, GLint v1)
glUniform2iv	glcorearb.h	/^GLAPI void APIENTRY glUniform2iv (GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLint *value)
glUniform2ui	glcorearb.h	/^GLAPI void APIENTRY glUniform2ui (GLint location, GLuint v0, GLuint v1);$/;"	p	signature:(GLint location, GLuint v0, GLuint v1)
glUniform2uiv	glcorearb.h	/^GLAPI void APIENTRY glUniform2uiv (GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLuint *value)
glUniform3d	glcorearb.h	/^GLAPI void APIENTRY glUniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLint location, GLdouble x, GLdouble y, GLdouble z)
glUniform3dv	glcorearb.h	/^GLAPI void APIENTRY glUniform3dv (GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, const GLdouble *value)
glUniform3f	glcorearb.h	/^GLAPI void APIENTRY glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	p	signature:(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
glUniform3fv	glcorearb.h	/^GLAPI void APIENTRY glUniform3fv (GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, const GLfloat *value)
glUniform3i	glcorearb.h	/^GLAPI void APIENTRY glUniform3i (GLint location, GLint v0, GLint v1, GLint v2);$/;"	p	signature:(GLint location, GLint v0, GLint v1, GLint v2)
glUniform3iv	glcorearb.h	/^GLAPI void APIENTRY glUniform3iv (GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLint *value)
glUniform3ui	glcorearb.h	/^GLAPI void APIENTRY glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	p	signature:(GLint location, GLuint v0, GLuint v1, GLuint v2)
glUniform3uiv	glcorearb.h	/^GLAPI void APIENTRY glUniform3uiv (GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLuint *value)
glUniform4d	glcorearb.h	/^GLAPI void APIENTRY glUniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	p	signature:(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
glUniform4dv	glcorearb.h	/^GLAPI void APIENTRY glUniform4dv (GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, const GLdouble *value)
glUniform4f	glcorearb.h	/^GLAPI void APIENTRY glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);$/;"	p	signature:(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
glUniform4fv	glcorearb.h	/^GLAPI void APIENTRY glUniform4fv (GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, const GLfloat *value)
glUniform4i	glcorearb.h	/^GLAPI void APIENTRY glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);$/;"	p	signature:(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
glUniform4iv	glcorearb.h	/^GLAPI void APIENTRY glUniform4iv (GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLint *value)
glUniform4ui	glcorearb.h	/^GLAPI void APIENTRY glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);$/;"	p	signature:(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
glUniform4uiv	glcorearb.h	/^GLAPI void APIENTRY glUniform4uiv (GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLuint *value)
glUniformBlockBinding	glcorearb.h	/^GLAPI void APIENTRY glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);$/;"	p	signature:(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
glUniformHandleui64ARB	glcorearb.h	/^GLAPI void APIENTRY glUniformHandleui64ARB (GLint location, GLuint64 value);$/;"	p	signature:(GLint location, GLuint64 value)
glUniformHandleui64vARB	glcorearb.h	/^GLAPI void APIENTRY glUniformHandleui64vARB (GLint location, GLsizei count, const GLuint64 *value);$/;"	p	signature:(GLint location, GLsizei count, const GLuint64 *value)
glUniformMatrix2dv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix2fv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix2x3dv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix2x3fv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix2x4dv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix2x4fv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix3dv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix3fv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix3x2dv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix3x2fv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix3x4dv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix3x4fv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix4dv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix4fv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix4x2dv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix4x2fv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix4x3dv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix4x3fv	glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformSubroutinesuiv	glcorearb.h	/^GLAPI void APIENTRY glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint *indices);$/;"	p	signature:(GLenum shadertype, GLsizei count, const GLuint *indices)
glUnmapBuffer	glcorearb.h	/^GLAPI GLboolean APIENTRY glUnmapBuffer (GLenum target);$/;"	p	signature:(GLenum target)
glUseProgram	glcorearb.h	/^GLAPI void APIENTRY glUseProgram (GLuint program);$/;"	p	signature:(GLuint program)
glUseProgramStages	glcorearb.h	/^GLAPI void APIENTRY glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program);$/;"	p	signature:(GLuint pipeline, GLbitfield stages, GLuint program)
glValidateProgram	glcorearb.h	/^GLAPI void APIENTRY glValidateProgram (GLuint program);$/;"	p	signature:(GLuint program)
glValidateProgramPipeline	glcorearb.h	/^GLAPI void APIENTRY glValidateProgramPipeline (GLuint pipeline);$/;"	p	signature:(GLuint pipeline)
glVertexAttrib1d	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib1d (GLuint index, GLdouble x);$/;"	p	signature:(GLuint index, GLdouble x)
glVertexAttrib1dv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib1dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttrib1f	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib1f (GLuint index, GLfloat x);$/;"	p	signature:(GLuint index, GLfloat x)
glVertexAttrib1fv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib1fv (GLuint index, const GLfloat *v);$/;"	p	signature:(GLuint index, const GLfloat *v)
glVertexAttrib1s	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib1s (GLuint index, GLshort x);$/;"	p	signature:(GLuint index, GLshort x)
glVertexAttrib1sv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib1sv (GLuint index, const GLshort *v);$/;"	p	signature:(GLuint index, const GLshort *v)
glVertexAttrib2d	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y);$/;"	p	signature:(GLuint index, GLdouble x, GLdouble y)
glVertexAttrib2dv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib2dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttrib2f	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y);$/;"	p	signature:(GLuint index, GLfloat x, GLfloat y)
glVertexAttrib2fv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib2fv (GLuint index, const GLfloat *v);$/;"	p	signature:(GLuint index, const GLfloat *v)
glVertexAttrib2s	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib2s (GLuint index, GLshort x, GLshort y);$/;"	p	signature:(GLuint index, GLshort x, GLshort y)
glVertexAttrib2sv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib2sv (GLuint index, const GLshort *v);$/;"	p	signature:(GLuint index, const GLshort *v)
glVertexAttrib3d	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLuint index, GLdouble x, GLdouble y, GLdouble z)
glVertexAttrib3dv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib3dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttrib3f	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z);$/;"	p	signature:(GLuint index, GLfloat x, GLfloat y, GLfloat z)
glVertexAttrib3fv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib3fv (GLuint index, const GLfloat *v);$/;"	p	signature:(GLuint index, const GLfloat *v)
glVertexAttrib3s	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z);$/;"	p	signature:(GLuint index, GLshort x, GLshort y, GLshort z)
glVertexAttrib3sv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib3sv (GLuint index, const GLshort *v);$/;"	p	signature:(GLuint index, const GLshort *v)
glVertexAttrib4Nbv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4Nbv (GLuint index, const GLbyte *v);$/;"	p	signature:(GLuint index, const GLbyte *v)
glVertexAttrib4Niv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4Niv (GLuint index, const GLint *v);$/;"	p	signature:(GLuint index, const GLint *v)
glVertexAttrib4Nsv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4Nsv (GLuint index, const GLshort *v);$/;"	p	signature:(GLuint index, const GLshort *v)
glVertexAttrib4Nub	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);$/;"	p	signature:(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
glVertexAttrib4Nubv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4Nubv (GLuint index, const GLubyte *v);$/;"	p	signature:(GLuint index, const GLubyte *v)
glVertexAttrib4Nuiv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4Nuiv (GLuint index, const GLuint *v);$/;"	p	signature:(GLuint index, const GLuint *v)
glVertexAttrib4Nusv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4Nusv (GLuint index, const GLushort *v);$/;"	p	signature:(GLuint index, const GLushort *v)
glVertexAttrib4bv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4bv (GLuint index, const GLbyte *v);$/;"	p	signature:(GLuint index, const GLbyte *v)
glVertexAttrib4d	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	p	signature:(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
glVertexAttrib4dv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttrib4f	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	p	signature:(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
glVertexAttrib4fv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4fv (GLuint index, const GLfloat *v);$/;"	p	signature:(GLuint index, const GLfloat *v)
glVertexAttrib4iv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4iv (GLuint index, const GLint *v);$/;"	p	signature:(GLuint index, const GLint *v)
glVertexAttrib4s	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);$/;"	p	signature:(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
glVertexAttrib4sv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4sv (GLuint index, const GLshort *v);$/;"	p	signature:(GLuint index, const GLshort *v)
glVertexAttrib4ubv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4ubv (GLuint index, const GLubyte *v);$/;"	p	signature:(GLuint index, const GLubyte *v)
glVertexAttrib4uiv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4uiv (GLuint index, const GLuint *v);$/;"	p	signature:(GLuint index, const GLuint *v)
glVertexAttrib4usv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4usv (GLuint index, const GLushort *v);$/;"	p	signature:(GLuint index, const GLushort *v)
glVertexAttribBinding	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribBinding (GLuint attribindex, GLuint bindingindex);$/;"	p	signature:(GLuint attribindex, GLuint bindingindex)
glVertexAttribDivisor	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribDivisor (GLuint index, GLuint divisor);$/;"	p	signature:(GLuint index, GLuint divisor)
glVertexAttribFormat	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);$/;"	p	signature:(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
glVertexAttribI1i	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI1i (GLuint index, GLint x);$/;"	p	signature:(GLuint index, GLint x)
glVertexAttribI1iv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI1iv (GLuint index, const GLint *v);$/;"	p	signature:(GLuint index, const GLint *v)
glVertexAttribI1ui	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI1ui (GLuint index, GLuint x);$/;"	p	signature:(GLuint index, GLuint x)
glVertexAttribI1uiv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI1uiv (GLuint index, const GLuint *v);$/;"	p	signature:(GLuint index, const GLuint *v)
glVertexAttribI2i	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI2i (GLuint index, GLint x, GLint y);$/;"	p	signature:(GLuint index, GLint x, GLint y)
glVertexAttribI2iv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI2iv (GLuint index, const GLint *v);$/;"	p	signature:(GLuint index, const GLint *v)
glVertexAttribI2ui	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI2ui (GLuint index, GLuint x, GLuint y);$/;"	p	signature:(GLuint index, GLuint x, GLuint y)
glVertexAttribI2uiv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI2uiv (GLuint index, const GLuint *v);$/;"	p	signature:(GLuint index, const GLuint *v)
glVertexAttribI3i	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI3i (GLuint index, GLint x, GLint y, GLint z);$/;"	p	signature:(GLuint index, GLint x, GLint y, GLint z)
glVertexAttribI3iv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI3iv (GLuint index, const GLint *v);$/;"	p	signature:(GLuint index, const GLint *v)
glVertexAttribI3ui	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI3ui (GLuint index, GLuint x, GLuint y, GLuint z);$/;"	p	signature:(GLuint index, GLuint x, GLuint y, GLuint z)
glVertexAttribI3uiv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI3uiv (GLuint index, const GLuint *v);$/;"	p	signature:(GLuint index, const GLuint *v)
glVertexAttribI4bv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4bv (GLuint index, const GLbyte *v);$/;"	p	signature:(GLuint index, const GLbyte *v)
glVertexAttribI4i	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w);$/;"	p	signature:(GLuint index, GLint x, GLint y, GLint z, GLint w)
glVertexAttribI4iv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4iv (GLuint index, const GLint *v);$/;"	p	signature:(GLuint index, const GLint *v)
glVertexAttribI4sv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4sv (GLuint index, const GLshort *v);$/;"	p	signature:(GLuint index, const GLshort *v)
glVertexAttribI4ubv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4ubv (GLuint index, const GLubyte *v);$/;"	p	signature:(GLuint index, const GLubyte *v)
glVertexAttribI4ui	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);$/;"	p	signature:(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
glVertexAttribI4uiv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4uiv (GLuint index, const GLuint *v);$/;"	p	signature:(GLuint index, const GLuint *v)
glVertexAttribI4usv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4usv (GLuint index, const GLushort *v);$/;"	p	signature:(GLuint index, const GLushort *v)
glVertexAttribIFormat	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);$/;"	p	signature:(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
glVertexAttribIPointer	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);$/;"	p	signature:(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
glVertexAttribL1d	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL1d (GLuint index, GLdouble x);$/;"	p	signature:(GLuint index, GLdouble x)
glVertexAttribL1dv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL1dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttribL1ui64ARB	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL1ui64ARB (GLuint index, GLuint64EXT x);$/;"	p	signature:(GLuint index, GLuint64EXT x)
glVertexAttribL1ui64vARB	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL1ui64vARB (GLuint index, const GLuint64EXT *v);$/;"	p	signature:(GLuint index, const GLuint64EXT *v)
glVertexAttribL2d	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL2d (GLuint index, GLdouble x, GLdouble y);$/;"	p	signature:(GLuint index, GLdouble x, GLdouble y)
glVertexAttribL2dv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL2dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttribL3d	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLuint index, GLdouble x, GLdouble y, GLdouble z)
glVertexAttribL3dv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL3dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttribL4d	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	p	signature:(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
glVertexAttribL4dv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL4dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttribLFormat	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribLFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);$/;"	p	signature:(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
glVertexAttribLPointer	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);$/;"	p	signature:(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
glVertexAttribP1ui	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, GLuint value)
glVertexAttribP1uiv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
glVertexAttribP2ui	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, GLuint value)
glVertexAttribP2uiv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
glVertexAttribP3ui	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, GLuint value)
glVertexAttribP3uiv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
glVertexAttribP4ui	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, GLuint value)
glVertexAttribP4uiv	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
glVertexAttribPointer	glcorearb.h	/^GLAPI void APIENTRY glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);$/;"	p	signature:(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)
glVertexBindingDivisor	glcorearb.h	/^GLAPI void APIENTRY glVertexBindingDivisor (GLuint bindingindex, GLuint divisor);$/;"	p	signature:(GLuint bindingindex, GLuint divisor)
glViewport	glcorearb.h	/^GLAPI void APIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height)
glViewportArrayv	glcorearb.h	/^GLAPI void APIENTRY glViewportArrayv (GLuint first, GLsizei count, const GLfloat *v);$/;"	p	signature:(GLuint first, GLsizei count, const GLfloat *v)
glViewportIndexedf	glcorearb.h	/^GLAPI void APIENTRY glViewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);$/;"	p	signature:(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
glViewportIndexedfv	glcorearb.h	/^GLAPI void APIENTRY glViewportIndexedfv (GLuint index, const GLfloat *v);$/;"	p	signature:(GLuint index, const GLfloat *v)
glWaitSync	glcorearb.h	/^GLAPI void APIENTRY glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	p	signature:(GLsync sync, GLbitfield flags, GLuint64 timeout)
h	mapgen.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
h	stb_image.h	/^      int h,v;$/;"	m	struct:__anon6::__anon7	access:public
h	stb_image.h	/^   int w,h;$/;"	m	struct:__anon16	access:public
h2	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon6::__anon7	access:public
ha	stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon6::__anon7	access:public
handle	program.h	/^	GLuint handle;$/;"	m	class:Program	access:private
handle	shader.h	/^	GLuint handle;$/;"	m	class:Shader	access:private
hd	stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon6::__anon7	access:public
height	Bitmap.cpp	/^unsigned int Bitmap::height() const {$/;"	f	class:Bitmap	signature:() const
height	Bitmap.h	/^        unsigned height() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
height	quad.h	/^	int width, height;$/;"	m	class:Quad	access:private
horizontalAngle	camera.h	/^	float horizontalAngle;$/;"	m	class:Camera	access:private
hs	stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon8	access:public
huff_ac	stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon6	access:public
huff_dc	stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon6	access:public
id	stb_image.h	/^      int id;$/;"	m	struct:__anon6::__anon7	access:public
idata	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon12	access:public
img_buffer	stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon3	access:public
img_buffer_end	stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon3	access:public
img_buffer_original	stb_image.h	/^   stbi_uc *img_buffer_original;$/;"	m	struct:__anon3	access:public
img_comp	stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon6	typeref:struct:__anon6::__anon7	access:public
img_h_max	stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon6	access:public
img_mcu_h	stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon6	access:public
img_mcu_w	stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon6	access:public
img_mcu_x	stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon6	access:public
img_mcu_y	stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon6	access:public
img_n	stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon3	access:public
img_out_n	stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon3	access:public
img_v_max	stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon6	access:public
img_x	stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon3	access:public
img_y	stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon3	access:public
int32_t	glcorearb.h	/^typedef __int32 int32_t;$/;"	t
int32_t	glcorearb.h	/^typedef long int int32_t;$/;"	t
int64_t	glcorearb.h	/^typedef __int64 int64_t;$/;"	t
int64_t	glcorearb.h	/^typedef long int int64_t;$/;"	t
int64_t	glcorearb.h	/^typedef long long int int64_t;$/;"	t
intdist	random.h	/^	std::uniform_int_distribution<int> intdist;$/;"	m	class:RNG	access:private
io	stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon3	access:public
io_user_data	stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon3	access:public
left	app.h	/^		bool left, right, forward, back;$/;"	m	struct:App::Input	access:public
length	stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon11	access:public
lflags	stb_image.h	/^   int lflags;$/;"	m	struct:__anon16	access:public
line0	stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon8	access:public
line1	stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon8	access:public
line_size	stb_image.h	/^   int line_size;$/;"	m	struct:__anon16	access:public
linebuf	stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon6::__anon7	access:public
load_jpeg_image	stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f	signature:(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)
locations	program.h	/^	DynamicArray<GLuint> locations;$/;"	m	class:Program	access:private
lpal	stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon16	access:public
main	main.cpp	/^int main( int argc, char** argv )$/;"	f	signature:( int argc, char** argv )
mainGLContext	sdlglapp.h	/^	SDL_GLContext mainGLContext; \/\/ en sdlcontext?$/;"	m	class:SDLGLApp	access:protected
mainWindow	sdlglapp.h	/^	SDL_Window* mainWindow;$/;"	m	class:SDLGLApp	access:protected
map	app.h	/^	Map map;$/;"	m	class:App	access:private
map_data	map.h	/^	Matrix2D<int> map_data;$/;"	m	class:Map	access:private
map_height	mapgen.h	/^	int map_width, map_height;$/;"	m	struct:mapgen::Config	access:public
map_width	mapgen.h	/^	int map_width, map_height;$/;"	m	struct:mapgen::Config	access:public
mapgen	mapgen.cpp	/^namespace mapgen$/;"	n	file:
mapgen	mapgen.h	/^namespace mapgen$/;"	n
mapgen::Config	mapgen.h	/^struct Config$/;"	s	namespace:mapgen
mapgen::Config::Config	mapgen.h	/^	Config() :$/;"	f	struct:mapgen::Config	access:public	signature:()
mapgen::Config::map_height	mapgen.h	/^	int map_width, map_height;$/;"	m	struct:mapgen::Config	access:public
mapgen::Config::map_width	mapgen.h	/^	int map_width, map_height;$/;"	m	struct:mapgen::Config	access:public
mapgen::Config::num_rooms	mapgen.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::Config	access:public
mapgen::Config::overlap_control	mapgen.h	/^	bool overlap_control;$/;"	m	struct:mapgen::Config	access:public
mapgen::Config::room_max_height	mapgen.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::Config	access:public
mapgen::Config::room_max_width	mapgen.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::Config	access:public
mapgen::Config::room_min_height	mapgen.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::Config	access:public
mapgen::Config::room_min_width	mapgen.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::Config	access:public
mapgen::Decorate	mapgen.cpp	/^Map Decorate( Map map )$/;"	f	namespace:mapgen	signature:( Map map )
mapgen::Decorate	mapgen.h	/^Map Decorate( Map map );$/;"	p	namespace:mapgen	signature:( Map map )
mapgen::Fill	mapgen.cpp	/^void Fill( Map& map, Map::BlockType block )$/;"	f	namespace:mapgen	signature:( Map& map, Map::BlockType block )
mapgen::Fill	mapgen.h	/^void Fill( Map& map );$/;"	p	namespace:mapgen	signature:( Map& map )
mapgen::Flatten	mapgen.cpp	/^Map Flatten( Map map )$/;"	f	namespace:mapgen	signature:( Map map )
mapgen::Flatten	mapgen.h	/^Map Flatten( Map map );$/;"	p	namespace:mapgen	signature:( Map map )
mapgen::Generar	mapgen.cpp	/^Map Generar(  mapgen::Config cfg )$/;"	f	namespace:mapgen	signature:( mapgen::Config cfg )
mapgen::Generar	mapgen.h	/^Map Generar( mapgen::Config cfg );$/;"	p	namespace:mapgen	signature:( mapgen::Config cfg )
mapgen::HCorridor	mapgen.cpp	/^void HCorridor( Map& map, int x0, int x1, int y )$/;"	f	namespace:mapgen	signature:( Map& map, int x0, int x1, int y )
mapgen::HCorridor	mapgen.h	/^void HCorridor( Map& map, int x0, int x1, int y );$/;"	p	namespace:mapgen	signature:( Map& map, int x0, int x1, int y )
mapgen::RasterPaths	mapgen.cpp	/^void RasterPaths( DynamicArray<Room>& rooms, Map& map )$/;"	f	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map )
mapgen::RasterPaths	mapgen.h	/^void RasterPaths( DynamicArray<Room>& rooms, Map& map );$/;"	p	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map )
mapgen::RasterRooms	mapgen.cpp	/^void RasterRooms( DynamicArray<Room>& rooms, Map& map )$/;"	f	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map )
mapgen::RasterRooms	mapgen.h	/^void RasterRooms( DynamicArray<Room>& rooms, Map& map );$/;"	p	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map )
mapgen::Room	mapgen.h	/^struct Room$/;"	s	namespace:mapgen
mapgen::Room::Intersects	mapgen.h	/^	bool Intersects( Room& other )$/;"	f	struct:mapgen::Room	access:public	signature:( Room& other )
mapgen::Room::Room	mapgen.h	/^	Room( int x, int y, int w, int h ) { this->x = x; this->y = y; this->w = w; this->h = h; }$/;"	f	struct:mapgen::Room	access:public	signature:( int x, int y, int w, int h )
mapgen::Room::h	mapgen.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
mapgen::Room::w	mapgen.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
mapgen::Room::x	mapgen.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
mapgen::Room::y	mapgen.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
mapgen::VCorridor	mapgen.cpp	/^void VCorridor( Map& map, int y0, int y1, int x )$/;"	f	namespace:mapgen	signature:( Map& map, int y0, int y1, int x )
mapgen::VCorridor	mapgen.h	/^void VCorridor( Map& map, int y0, int y1, int x );$/;"	p	namespace:mapgen	signature:( Map& map, int y0, int y1, int x )
mapgen::rng	mapgen.cpp	/^RNG rng;$/;"	m	namespace:mapgen	file:
mapgen::sign	mapgen.cpp	/^int sign( int x )$/;"	f	namespace:mapgen	signature:( int x )
mapgen::sign	mapgen.h	/^int sign( int x );$/;"	p	namespace:mapgen	signature:( int x )
marker	stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon6	access:public
max_x	stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon16	access:public
max_y	stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon16	access:public
maxcode	stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon9	access:public
maxcode	stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon5	access:public
milis	fpscounter.h	/^	T milis;$/;"	m	class:FPSCounter	access:private
model_list	map.h	/^	DynamicArray<cml::matrix44f_c> model_list;$/;"	m	class:Map	access:private
nearClip	camera.h	/^	float nearClip;	\/\/ Near clipping plane distance$/;"	m	class:Camera	access:private
noise	texgen.cpp	/^void noise( Canvas& c, uint8_t r, uint8_t g, uint8_t b )$/;"	f	namespace:rzfx	signature:( Canvas& c, uint8_t r, uint8_t g, uint8_t b )
noise	texgen.h	/^void noise( Canvas& c, uint8_t r=255, uint8_t g=255, uint8_t b=255 );$/;"	p	namespace:rzfx	signature:( Canvas& c, uint8_t r=255, uint8_t g=255, uint8_t b=255 )
nomore	stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon6	access:public
norm	block.h	/^	static const GLfloat norm[];$/;"	m	class:Block	access:public
normals	mesh.h	/^	GLfloat* normals;$/;"	m	class:Mesh	access:protected
numElements	mesh.h	/^	size_t numElements;$/;"	m	class:Mesh	access:protected
num_bits	stb_image.h	/^   int num_bits;$/;"	m	struct:__anon10	access:public
num_frames	sprite3d.h	/^	cml::vector2f \/* i? *\/ current_frame, num_frames;$/;"	m	class:Sprite3D	access:private
num_rooms	mapgen.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::Config	access:public
numvbo	mesh.h	/^	GLsizei numvbo;$/;"	m	class:Mesh	access:protected
object	Texture.cpp	/^GLuint Texture::object() const$/;"	f	class:Texture	signature:() const
object	Texture.h	/^        GLuint object() const;$/;"	p	class:tdogl::Texture	access:public	signature:() const
operator +	color.h	/^	Color operator+( Color& other )$/;"	f	class:Color	access:public	signature:( Color& other )
operator =	Bitmap.cpp	/^Bitmap& Bitmap::operator = (const Bitmap& other) {$/;"	f	class:Bitmap	signature:(const Bitmap& other)
operator =	Bitmap.h	/^        Bitmap& operator = (const Bitmap& other);$/;"	p	class:tdogl::Bitmap	access:public	signature:(const Bitmap& other)
operator =	Texture.h	/^        const Texture& operator=(const Texture&);$/;"	p	class:tdogl::Texture	access:private	signature:(const Texture&)
operator =	canvas.h	/^	Canvas& operator=( const Canvas& other )$/;"	f	class:Canvas	access:public	signature:( const Canvas& other )
operator =	map.h	/^	Map& operator=( const Map& other )$/;"	f	class:Map	access:public	signature:( const Map& other )
operator =	matriz.h	/^	Matrix2D& operator=( const Matrix2D& other )$/;"	f	class:Matrix2D	access:public	signature:( const Matrix2D& other )
operator []	color.h	/^	uint8_t& operator[](size_t index)$/;"	f	class:Color	access:public	signature:(size_t index)
operator []	dynamicarray.h	/^	T& operator[]( size_t index )$/;"	f	class:DynamicArray	access:public	signature:( size_t index )
order	stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon6	access:public
originalHeight	Texture.cpp	/^GLfloat Texture::originalHeight() const$/;"	f	class:Texture	signature:() const
originalHeight	Texture.h	/^        GLfloat originalHeight() const;$/;"	p	class:tdogl::Texture	access:public	signature:() const
originalWidth	Texture.cpp	/^GLfloat Texture::originalWidth() const$/;"	f	class:Texture	signature:() const
originalWidth	Texture.h	/^        GLfloat originalWidth() const;$/;"	p	class:tdogl::Texture	access:public	signature:() const
out	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon12	access:public
out	stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon16	access:public
overlap_control	mapgen.h	/^	bool overlap_control;$/;"	m	struct:mapgen::Config	access:public
pal	stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon16	access:public
parse	stb_image.h	/^   int parse, step;$/;"	m	struct:__anon16	access:public
pbmp	app.h	/^	tdogl::Bitmap* pbmp;$/;"	m	class:App	access:private
persotex	app.h	/^	tdogl::Texture* persotex;$/;"	m	class:App	access:private
physics	app.h	/^	Physics physics;$/;"	m	class:App	access:private
pixelBuffer	Bitmap.cpp	/^unsigned char* Bitmap::pixelBuffer() const {$/;"	f	class:Bitmap	signature:() const
pixelBuffer	Bitmap.h	/^        unsigned char* pixelBuffer() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
plane	app.h	/^	Plane plane;$/;"	m	class:App	access:private
planeprog	renderer.h	/^	Program quadprog, blockprog, planeprog;$/;"	m	class:Renderer	access:private
playerBody	app.h	/^	b2Body* playerBody;$/;"	m	class:App	access:private
position	camera.h	/^	cml::vector3f position;$/;"	m	class:Camera	access:private
position	transform.h	/^	cml::vector3f position;$/;"	m	class:Transform	access:public
positionIterations	physics.h	/^	const int32 positionIterations = 2;$/;"	m	class:Physics	access:public
prefix	stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon15	access:public
profile	context.h	/^  const Profile profile;$/;"	m	class:Render::Context	access:public
projection	camera.h	/^	cml::matrix44f_c view, projection;$/;"	m	class:Camera	access:private
projection	renderer.h	/^	cml::matrix44f_c projection;$/;"	m	class:Renderer	access:private
quad	sprite3d.h	/^	Quad quad;$/;"	m	class:Sprite3D	access:private
quadprog	renderer.h	/^	Program quadprog, blockprog, planeprog;$/;"	m	class:Renderer	access:private
ratio	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon16	access:public
raw_data	stb_image.h	/^      void *raw_data;$/;"	m	struct:__anon6::__anon7	access:public
read	stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read $/;"	m	struct:__anon2	access:public
read_from_callbacks	stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon3	access:public
renderer	app.h	/^	Renderer renderer;$/;"	m	class:App	access:private
resample	stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon8	access:public
resample_row_1	stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
resample_row_func	stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
restart_interval	stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon6	access:public
right	app.h	/^		bool left, right, forward, back;$/;"	m	struct:App::Input	access:public
rng	app.h	/^	RNG rng;$/;"	m	class:App	access:private
rng	mapgen.cpp	/^RNG rng;$/;"	m	namespace:mapgen	file:
rng	texgen.cpp	/^RNG rng;$/;"	m	namespace:rzfx	file:
room_max_height	mapgen.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::Config	access:public
room_max_width	mapgen.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::Config	access:public
room_min_height	mapgen.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::Config	access:public
room_min_width	mapgen.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::Config	access:public
rotate90CounterClockwise	Bitmap.cpp	/^void Bitmap::rotate90CounterClockwise() {$/;"	f	class:Bitmap	signature:()
rotate90CounterClockwise	Bitmap.h	/^        void rotate90CounterClockwise();$/;"	p	class:tdogl::Bitmap	access:public	signature:()
rotation	transform.h	/^	cml::vector3f rotation;$/;"	m	class:Transform	access:public
rows	matriz.h	/^	int rows, cols;$/;"	m	class:Matrix2D	access:private
running	sdlglapp.h	/^	bool running;$/;"	m	class:SDLGLApp	access:private
rzfx	texgen.cpp	/^namespace rzfx$/;"	n	file:
rzfx	texgen.h	/^namespace rzfx$/;"	n
rzfx::noise	texgen.cpp	/^void noise( Canvas& c, uint8_t r, uint8_t g, uint8_t b )$/;"	f	namespace:rzfx	signature:( Canvas& c, uint8_t r, uint8_t g, uint8_t b )
rzfx::noise	texgen.h	/^void noise( Canvas& c, uint8_t r=255, uint8_t g=255, uint8_t b=255 );$/;"	p	namespace:rzfx	signature:( Canvas& c, uint8_t r=255, uint8_t g=255, uint8_t b=255 )
rzfx::rng	texgen.cpp	/^RNG rng;$/;"	m	namespace:rzfx	file:
rzfx::smooth	texgen.cpp	/^Color smooth( Canvas& c, double x, double y )$/;"	f	namespace:rzfx	signature:( Canvas& c, double x, double y )
rzfx::turbulence	texgen.cpp	/^Canvas turbulence( Canvas& in, Canvas& out )$/;"	f	namespace:rzfx	signature:( Canvas& in, Canvas& out )
rzfx::turbulence	texgen.h	/^void turbulence( Canvas& c );$/;"	p	namespace:rzfx	signature:( Canvas& c )
s	stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon12	access:public
s	stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon6	access:public
scan_n	stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon6	access:public
sdlwinflags	sdlglapp.h	/^	uint32_t sdlwinflags;$/;"	m	class:SDLGLApp	access:protected
seed	random.h	/^	void seed( uint32_t seed )$/;"	f	class:RNG	access:public	signature:( uint32_t seed )
setPixel	Bitmap.cpp	/^void Bitmap::setPixel(unsigned int column, unsigned int row, const unsigned char* pixel) {$/;"	f	class:Bitmap	signature:(unsigned int column, unsigned int row, const unsigned char* pixel)
setPixel	Bitmap.h	/^        void setPixel(unsigned int column, unsigned int row, const unsigned char* pixel);$/;"	p	class:tdogl::Bitmap	access:public	signature:(unsigned int column, unsigned int row, const unsigned char* pixel)
shift	app.h	/^		bool shift;$/;"	m	struct:App::Input	access:public
sign	mapgen.cpp	/^int sign( int x )$/;"	f	namespace:mapgen	signature:( int x )
sign	mapgen.h	/^int sign( int x );$/;"	p	namespace:mapgen	signature:( int x )
size	dynamicarray.h	/^	size_t size = 0;$/;"	m	class:DynamicArray	access:private
size	sprite3d.h	/^	cml::vector2f size;$/;"	m	class:Sprite3D	access:private
size	stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon5	access:public
size	stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon9	access:public
size	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon14	access:public
skip	stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon2	access:public
smooth	texgen.cpp	/^Color smooth( Canvas& c, double x, double y )$/;"	f	namespace:rzfx	signature:( Canvas& c, double x, double y )
sprite	entity.h	/^	Sprite3D* sprite;$/;"	m	class:Entity	access:private
sprite3d_fog_range	renderer.h	/^	float sprite3d_fog_range;$/;"	m	class:Renderer	access:private
start_x	stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon16	access:public
start_y	stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon16	access:public
stbi_YCbCr_to_RGB_run	stb_image.h	/^typedef void (*stbi_YCbCr_to_RGB_run)(stbi_uc *output, stbi_uc const  *y, stbi_uc const *cb, stbi_uc const *cr, int count, int step);$/;"	t
stbi__DNL	stb_image.h	1632;"	d
stbi__EOI	stb_image.h	1634;"	d
stbi__SOF	stb_image.h	1635;"	d
stbi__SOI	stb_image.h	1633;"	d
stbi__SOS	stb_image.h	1636;"	d
stbi__YCbCr_installed	stb_image.h	/^static stbi_YCbCr_to_RGB_run stbi__YCbCr_installed = stbi__YCbCr_to_RGB_row;$/;"	v
stbi__YCbCr_to_RGB_row	stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f	signature:(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)
stbi__at_eof	stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__bit_reverse	stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f	signature:(int v, int bits)
stbi__bitcount	stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f	signature:(unsigned int a)
stbi__bitreverse16	stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f	signature:(int n)
stbi__bmask	stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_info	stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__bmp_load	stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__bmp_load	stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__bmp_test	stb_image.h	/^static int      stbi__bmp_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__bmp_test	stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__bmp_test_raw	stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__build_huffman	stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f	signature:(stbi__huffman *h, int *count)
stbi__check_png_header	stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__clamp	stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f	signature:(int x)
stbi__cleanup_jpeg	stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__compute_huffman_codes	stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__compute_transparency	stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f	signature:(stbi__png *z, stbi_uc tc[3], int out_n)
stbi__compute_y	stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f	signature:(int r, int g, int b)
stbi__context	stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon3
stbi__convert_format	stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f	signature:(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)
stbi__copyval	stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f	signature:(int channel,stbi_uc *dest,const stbi_uc *src)
stbi__create_png_image	stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, int interlaced)$/;"	f	signature:(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, int interlaced)
stbi__create_png_image_raw	stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y)$/;"	f	signature:(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y)
stbi__de_iphone	stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f	signature:(stbi__png *z)
stbi__de_iphone_flag	stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__div16	stb_image.h	1744;"	d
stbi__div4	stb_image.h	1695;"	d
stbi__do_png	stb_image.h	/^static unsigned char *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp)$/;"	f	signature:(stbi__png *p, int *x, int *y, int *n, int req_comp)
stbi__do_zlib	stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f	signature:(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)
stbi__err	stb_image.h	/^static int stbi__err(const char *str)$/;"	f	signature:(const char *str)
stbi__err	stb_image.h	535;"	d
stbi__err	stb_image.h	537;"	d
stbi__err	stb_image.h	539;"	d
stbi__errpf	stb_image.h	542;"	d
stbi__errpuc	stb_image.h	543;"	d
stbi__expand_png_palette	stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f	signature:(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)
stbi__extend_receive	stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f	signature:(stbi__jpeg *j, int n)
stbi__f2f	stb_image.h	1242;"	d
stbi__fill_bits	stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f	signature:(stbi__zbuf *z)
stbi__fill_gif_background	stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g)$/;"	f	signature:(stbi__gif *g)
stbi__float2int	stb_image.h	934;"	d
stbi__fopen	stb_image.h	/^FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f	signature:(char const *filename, char const *mode)
stbi__fsh	stb_image.h	1243;"	d
stbi__g_failure_reason	stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get16le	stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get32be	stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get32le	stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get8	stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get_chunk_header	stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get_marker	stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__getn	stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f	signature:(stbi__context *s, stbi_uc *buffer, int n)
stbi__gif	stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon16
stbi__gif_header	stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f	signature:(stbi__context *s, stbi__gif *g, int *comp, int is_info)
stbi__gif_info	stb_image.h	/^static int      stbi__gif_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__gif_info	stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__gif_info_raw	stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__gif_load	stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__gif_load	stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__gif_load_next	stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, stbi__gif *g, int *comp, int req_comp)
stbi__gif_lzw	stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon15
stbi__gif_parse_colortable	stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f	signature:(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)
stbi__gif_test	stb_image.h	/^static int      stbi__gif_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__gif_test	stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__gif_test_raw	stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__grow_buffer_unsafe	stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__h2l_gamma_i	stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f	signature:(float *output, stbi_uc *input, int req_comp)
stbi__hdr_gettoken	stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f	signature:(stbi__context *z, char *buffer)
stbi__hdr_info	stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__hdr_load	stb_image.h	/^static float   *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__hdr_load	stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__hdr_test	stb_image.h	/^static int      stbi__hdr_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__hdr_test	stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f	signature:(stbi__context* s)
stbi__hdr_test_core	stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__hdr_to_ldr	stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f	signature:(float *data, int x, int y, int comp)
stbi__hdr_to_ldr	stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp);$/;"	p	signature:(float *data, int x, int y, int comp)
stbi__high_bit	stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f	signature:(unsigned int z)
stbi__huffman	stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon5
stbi__idct_block	stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64], stbi_dequantize_t *dequantize)$/;"	f	signature:(stbi_uc *out, int out_stride, short data[64], stbi_dequantize_t *dequantize)
stbi__idct_installed	stb_image.h	/^static stbi_idct_8x8 stbi__idct_installed = stbi__idct_block;$/;"	v
stbi__info_main	stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__init_zdefaults	stb_image.h	/^static void stbi__init_zdefaults(void)$/;"	f	signature:(void)
stbi__int16	stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__jpeg	stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon6
stbi__jpeg_decode_block	stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, int b)$/;"	f	signature:(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, int b)
stbi__jpeg_dezigzag	stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_huff_decode	stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f	signature:(stbi__jpeg *j, stbi__huffman *h)
stbi__jpeg_info	stb_image.h	/^static int      stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__jpeg_info	stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__jpeg_info_raw	stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f	signature:(stbi__jpeg *j, int *x, int *y, int *comp)
stbi__jpeg_load	stb_image.h	/^static stbi_uc *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__jpeg_load	stb_image.h	/^static unsigned char *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__jpeg_reset	stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__jpeg_test	stb_image.h	/^static int      stbi__jpeg_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__jpeg_test	stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__l2h_gamma	stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f	signature:(stbi_uc *data, int x, int y, int comp)
stbi__ldr_to_hdr	stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp);$/;"	p	signature:(stbi_uc *data, int x, int y, int comp)
stbi__out_gif_code	stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f	signature:(stbi__gif *g, stbi__uint16 code)
stbi__paeth	stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f	signature:(int a, int b, int c)
stbi__parse_entropy_coded_data	stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f	signature:(stbi__jpeg *z)
stbi__parse_huffman_block	stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__parse_png_file	stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f	signature:(stbi__png *z, int scan, int req_comp)
stbi__parse_uncomperssed_block	stb_image.h	/^static int stbi__parse_uncomperssed_block(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__parse_zlib	stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f	signature:(stbi__zbuf *a, int parse_header)
stbi__parse_zlib_header	stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__pic_info	stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__pic_is4	stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f	signature:(stbi__context *s,const char *str)
stbi__pic_load	stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__pic_load	stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp)$/;"	f	signature:(stbi__context *s,int *px,int *py,int *comp,int req_comp)
stbi__pic_load_core	stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f	signature:(stbi__context *s,int width,int height,int *comp, stbi_uc *result)
stbi__pic_packet	stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon14
stbi__pic_test	stb_image.h	/^static int      stbi__pic_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__pic_test	stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__pic_test_core	stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__png	stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon12
stbi__png_info	stb_image.h	/^static int      stbi__png_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__png_info	stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__png_info_raw	stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f	signature:(stbi__png *p, int *x, int *y, int *comp)
stbi__png_load	stb_image.h	/^static stbi_uc *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__png_load	stb_image.h	/^static unsigned char *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__png_test	stb_image.h	/^static int      stbi__png_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__png_test	stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__pngchunk	stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon11
stbi__process_frame_header	stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f	signature:(stbi__jpeg *z, int scan)
stbi__process_gif_raster	stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f	signature:(stbi__context *s, stbi__gif *g)
stbi__process_marker	stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f	signature:(stbi__jpeg *z, int m)
stbi__process_scan_header	stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f	signature:(stbi__jpeg *z)
stbi__psd_info	stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__psd_load	stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__psd_load	stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__psd_test	stb_image.h	/^static int      stbi__psd_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__psd_test	stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__readval	stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f	signature:(stbi__context *s, int channel, stbi_uc *dest)
stbi__refill_buffer	stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__refill_buffer	stb_image.h	/^static void stbi__refill_buffer(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__resample	stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon8
stbi__resample_row_generic	stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__resample_row_h_2	stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__resample_row_hv_2	stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__resample_row_v_2	stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__rewind	stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__shiftsigned	stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f	signature:(int v, int shift, int bits)
stbi__skip	stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f	signature:(stbi__context *s, int n)
stbi__start_callbacks	stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f	signature:(stbi__context *s, stbi_io_callbacks *c, void *user)
stbi__start_file	stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f	signature:(stbi__context *s, FILE *f)
stbi__start_mem	stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f	signature:(stbi__context *s, stbi_uc const *buffer, int len)
stbi__stdio_callbacks	stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f	signature:(void *user)
stbi__stdio_read	stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f	signature:(void *user, char *data, int size)
stbi__stdio_skip	stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f	signature:(void *user, int n)
stbi__tga_info	stb_image.h	/^static int      stbi__tga_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__tga_info	stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__tga_load	stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__tga_load	stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__tga_test	stb_image.h	/^static int      stbi__tga_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__tga_test	stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__uint16	stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__zbuf	stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon10
stbi__zbuild_huffman	stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, stbi_uc *sizelist, int num)$/;"	f	signature:(stbi__zhuffman *z, stbi_uc *sizelist, int num)
stbi__zdefault_distance	stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdefault_length	stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdist_base	stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, int n)  \/\/ need to make room for n bytes$/;"	f	signature:(stbi__zbuf *z, int n)
stbi__zget8	stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f	signature:(stbi__zbuf *z)
stbi__zhuffman	stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon9
stbi__zhuffman_decode	stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f	signature:(stbi__zbuf *a, stbi__zhuffman *z)
stbi__zlength_base	stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	stb_image.h	/^static int stbi__zlength_extra[31]= $/;"	v
stbi__zreceive	stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f	signature:(stbi__zbuf *z, int n)
stbi_convert_iphone_png_to_rgb	stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f	signature:(int flag_true_if_should_convert)
stbi_convert_iphone_png_to_rgb	stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert);$/;"	p	signature:(int flag_true_if_should_convert)
stbi_dequantize_t	stb_image.h	/^typedef stbi_uc stbi_dequantize_t;$/;"	t
stbi_dequantize_t	stb_image.h	/^typedef unsigned short stbi_dequantize_t;$/;"	t
stbi_failure_reason	stb_image.h	/^STBIDEF const char *stbi_failure_reason  (void); $/;"	p	signature:(void)
stbi_failure_reason	stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f	signature:(void)
stbi_hdr_to_ldr_gamma	stb_image.h	/^   STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma);$/;"	p	signature:(float gamma)
stbi_hdr_to_ldr_gamma	stb_image.h	/^void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f	signature:(float gamma)
stbi_hdr_to_ldr_scale	stb_image.h	/^   STBIDEF void   stbi_hdr_to_ldr_scale(float scale);$/;"	p	signature:(float scale)
stbi_hdr_to_ldr_scale	stb_image.h	/^void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f	signature:(float scale)
stbi_idct_8x8	stb_image.h	/^typedef void (*stbi_idct_8x8)(stbi_uc *out, int out_stride, short data[64], unsigned short *dequantize);$/;"	t
stbi_image_free	stb_image.h	/^STBIDEF void     stbi_image_free      (void *retval_from_stbi_load);$/;"	p	signature:(void *retval_from_stbi_load)
stbi_image_free	stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f	signature:(void *retval_from_stbi_load)
stbi_info	stb_image.h	/^STBIDEF int      stbi_info            (char const *filename,     int *x, int *y, int *comp);$/;"	p	signature:(char const *filename, int *x, int *y, int *comp)
stbi_info	stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp)
stbi_info_from_callbacks	stb_image.h	/^STBIDEF int      stbi_info_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp);$/;"	p	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp)
stbi_info_from_callbacks	stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f	signature:(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)
stbi_info_from_file	stb_image.h	/^STBIDEF int      stbi_info_from_file  (FILE *f,                  int *x, int *y, int *comp);$/;"	p	signature:(FILE *f, int *x, int *y, int *comp)
stbi_info_from_file	stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp)
stbi_info_from_memory	stb_image.h	/^STBIDEF int      stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp);$/;"	p	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp)
stbi_info_from_memory	stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp)
stbi_inline	stb_image.h	365;"	d
stbi_inline	stb_image.h	367;"	d
stbi_inline	stb_image.h	370;"	d
stbi_install_YCbCr_to_RGB	stb_image.h	/^STBIDEF void stbi_install_YCbCr_to_RGB(stbi_YCbCr_to_RGB_run func)$/;"	f	signature:(stbi_YCbCr_to_RGB_run func)
stbi_install_YCbCr_to_RGB	stb_image.h	/^STBIDEF void stbi_install_YCbCr_to_RGB(stbi_YCbCr_to_RGB_run func);$/;"	p	signature:(stbi_YCbCr_to_RGB_run func)
stbi_install_idct	stb_image.h	/^STBIDEF void stbi_install_idct(stbi_idct_8x8 func)$/;"	f	signature:(stbi_idct_8x8 func)
stbi_install_idct	stb_image.h	/^STBIDEF void stbi_install_idct(stbi_idct_8x8 func);$/;"	p	signature:(stbi_idct_8x8 func)
stbi_io_callbacks	stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon2
stbi_is_hdr	stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f	signature:(char const *filename)
stbi_is_hdr	stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename);$/;"	p	signature:(char const *filename)
stbi_is_hdr_from_callbacks	stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user)
stbi_is_hdr_from_callbacks	stb_image.h	/^STBIDEF int    stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user);$/;"	p	signature:(stbi_io_callbacks const *clbk, void *user)
stbi_is_hdr_from_file	stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f	signature:(FILE *f)
stbi_is_hdr_from_file	stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f);$/;"	p	signature:(FILE *f)
stbi_is_hdr_from_memory	stb_image.h	/^STBIDEF int    stbi_is_hdr_from_memory(stbi_uc const *buffer, int len);$/;"	p	signature:(stbi_uc const *buffer, int len)
stbi_is_hdr_from_memory	stb_image.h	/^int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f	signature:(stbi_uc const *buffer, int len)
stbi_ldr_to_hdr_gamma	stb_image.h	/^   STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma);$/;"	p	signature:(float gamma)
stbi_ldr_to_hdr_gamma	stb_image.h	/^void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f	signature:(float gamma)
stbi_ldr_to_hdr_scale	stb_image.h	/^   STBIDEF void   stbi_ldr_to_hdr_scale(float scale);$/;"	p	signature:(float scale)
stbi_ldr_to_hdr_scale	stb_image.h	/^void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f	signature:(float scale)
stbi_load	stb_image.h	/^STBIDEF stbi_uc *stbi_load            (char const *filename,     int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_load	stb_image.h	/^STBIDEF unsigned char *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_load_from_callbacks	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks  (stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_load_from_callbacks	stb_image.h	/^unsigned char *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_load_from_file	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file  (FILE *f,                  int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_load_from_file	stb_image.h	/^STBIDEF unsigned char *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_load_from_memory	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_load_from_memory	stb_image.h	/^STBIDEF unsigned char *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_load_main	stb_image.h	/^static unsigned char *stbi_load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi_loadf	stb_image.h	/^   STBIDEF float *stbi_loadf            (char const *filename,   int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_loadf	stb_image.h	/^float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_callbacks	stb_image.h	/^   STBIDEF float *stbi_loadf_from_callbacks  (stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_callbacks	stb_image.h	/^float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_file	stb_image.h	/^   STBIDEF float *stbi_loadf_from_file  (FILE *f,                int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_file	stb_image.h	/^float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_memory	stb_image.h	/^   STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_memory	stb_image.h	/^float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_loadf_main	stb_image.h	/^float *stbi_loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi_lrot	stb_image.h	401;"	d
stbi_lrot	stb_image.h	403;"	d
stbi_set_unpremultiply_on_load	stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f	signature:(int flag_true_if_should_unpremultiply)
stbi_set_unpremultiply_on_load	stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply);$/;"	p	signature:(int flag_true_if_should_unpremultiply)
stbi_uc	stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_zlib_decode_buffer	stb_image.h	/^STBIDEF int   stbi_zlib_decode_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);$/;"	p	signature:(char *obuffer, int olen, const char *ibuffer, int ilen)
stbi_zlib_decode_buffer	stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f	signature:(char *obuffer, int olen, char const *ibuffer, int ilen)
stbi_zlib_decode_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f	signature:(char const *buffer, int len, int *outlen)
stbi_zlib_decode_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(const char *buffer, int len, int *outlen);$/;"	p	signature:(const char *buffer, int len, int *outlen)
stbi_zlib_decode_malloc_guesssize	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f	signature:(const char *buffer, int len, int initial_size, int *outlen)
stbi_zlib_decode_malloc_guesssize	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen);$/;"	p	signature:(const char *buffer, int len, int initial_size, int *outlen)
stbi_zlib_decode_malloc_guesssize_headerflag	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f	signature:(const char *buffer, int len, int initial_size, int *outlen, int parse_header)
stbi_zlib_decode_malloc_guesssize_headerflag	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header);$/;"	p	signature:(const char *buffer, int len, int initial_size, int *outlen, int parse_header)
stbi_zlib_decode_noheader_buffer	stb_image.h	/^STBIDEF int   stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);$/;"	p	signature:(char *obuffer, int olen, const char *ibuffer, int ilen)
stbi_zlib_decode_noheader_buffer	stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f	signature:(char *obuffer, int olen, const char *ibuffer, int ilen)
stbi_zlib_decode_noheader_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f	signature:(char const *buffer, int len, int *outlen)
stbi_zlib_decode_noheader_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(const char *buffer, int len, int *outlen);$/;"	p	signature:(const char *buffer, int len, int *outlen)
step	stb_image.h	/^   int parse, step;$/;"	m	struct:__anon16	access:public
suelotex	app.h	/^	tdogl::Texture* suelotex;$/;"	m	class:App	access:private
suffix	stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon15	access:public
tdogl	Bitmap.h	/^namespace tdogl {$/;"	n
tdogl	Texture.h	/^namespace tdogl {$/;"	n
tdogl::Bitmap	Bitmap.h	/^    class Bitmap {$/;"	c	namespace:tdogl
tdogl::Bitmap::Bitmap	Bitmap.h	/^        Bitmap(const Bitmap& other);$/;"	p	class:tdogl::Bitmap	access:public	signature:(const Bitmap& other)
tdogl::Bitmap::Bitmap	Bitmap.h	/^        Bitmap(unsigned width, $/;"	p	class:tdogl::Bitmap	access:public	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels = NULL)
tdogl::Bitmap::Format	Bitmap.h	/^        enum Format {$/;"	g	class:tdogl::Bitmap	access:public
tdogl::Bitmap::Format_Grayscale	Bitmap.h	/^            Format_Grayscale = 1, \/**< one channel: grayscale *\/$/;"	e	enum:tdogl::Bitmap::Format
tdogl::Bitmap::Format_GrayscaleAlpha	Bitmap.h	/^            Format_GrayscaleAlpha = 2, \/**< two channels: grayscale and alpha *\/$/;"	e	enum:tdogl::Bitmap::Format
tdogl::Bitmap::Format_RGB	Bitmap.h	/^            Format_RGB = 3, \/**< three channels: red, green, blue *\/$/;"	e	enum:tdogl::Bitmap::Format
tdogl::Bitmap::Format_RGBA	Bitmap.h	/^            Format_RGBA = 4 \/**< four channels: red, green, blue, alpha *\/$/;"	e	enum:tdogl::Bitmap::Format
tdogl::Bitmap::_format	Bitmap.h	/^        Format _format;$/;"	m	class:tdogl::Bitmap	access:private
tdogl::Bitmap::_getPixelOffset	Bitmap.h	/^        static void _getPixelOffset(unsigned col, unsigned row, unsigned width, unsigned height, Format format);$/;"	p	class:tdogl::Bitmap	access:private	signature:(unsigned col, unsigned row, unsigned width, unsigned height, Format format)
tdogl::Bitmap::_height	Bitmap.h	/^        unsigned _height;$/;"	m	class:tdogl::Bitmap	access:private
tdogl::Bitmap::_pixels	Bitmap.h	/^        unsigned char* _pixels;$/;"	m	class:tdogl::Bitmap	access:private
tdogl::Bitmap::_set	Bitmap.h	/^        void _set(unsigned width, unsigned height, Format format, const unsigned char* pixels);$/;"	p	class:tdogl::Bitmap	access:private	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels)
tdogl::Bitmap::_width	Bitmap.h	/^        unsigned _width;$/;"	m	class:tdogl::Bitmap	access:private
tdogl::Bitmap::bitmapFromFile	Bitmap.h	/^        static Bitmap bitmapFromFile(std::string filePath);$/;"	p	class:tdogl::Bitmap	access:public	signature:(std::string filePath)
tdogl::Bitmap::copyRectFromBitmap	Bitmap.h	/^        void copyRectFromBitmap(const Bitmap& src, $/;"	p	class:tdogl::Bitmap	access:public	signature:(const Bitmap& src, unsigned srcCol, unsigned srcRow, unsigned destCol, unsigned destRow, unsigned width, unsigned height)
tdogl::Bitmap::flipVertically	Bitmap.h	/^        void flipVertically();$/;"	p	class:tdogl::Bitmap	access:public	signature:()
tdogl::Bitmap::format	Bitmap.h	/^        Format format() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
tdogl::Bitmap::getPixel	Bitmap.h	/^        unsigned char* getPixel(unsigned int column, unsigned int row) const;$/;"	p	class:tdogl::Bitmap	access:public	signature:(unsigned int column, unsigned int row) const
tdogl::Bitmap::height	Bitmap.h	/^        unsigned height() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
tdogl::Bitmap::operator =	Bitmap.h	/^        Bitmap& operator = (const Bitmap& other);$/;"	p	class:tdogl::Bitmap	access:public	signature:(const Bitmap& other)
tdogl::Bitmap::pixelBuffer	Bitmap.h	/^        unsigned char* pixelBuffer() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
tdogl::Bitmap::rotate90CounterClockwise	Bitmap.h	/^        void rotate90CounterClockwise();$/;"	p	class:tdogl::Bitmap	access:public	signature:()
tdogl::Bitmap::setPixel	Bitmap.h	/^        void setPixel(unsigned int column, unsigned int row, const unsigned char* pixel);$/;"	p	class:tdogl::Bitmap	access:public	signature:(unsigned int column, unsigned int row, const unsigned char* pixel)
tdogl::Bitmap::width	Bitmap.h	/^        unsigned width() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
tdogl::Bitmap::~Bitmap	Bitmap.h	/^        ~Bitmap();$/;"	p	class:tdogl::Bitmap	access:public	signature:()
tdogl::Texture	Texture.h	/^    class Texture {$/;"	c	namespace:tdogl
tdogl::Texture::Context	Texture.h	/^    	typedef Render::Context Context;$/;"	t	class:tdogl::Texture	access:private
tdogl::Texture::Texture	Texture.h	/^        Texture(Context* gl, const Bitmap& bitmap,$/;"	p	class:tdogl::Texture	access:public	signature:(Context* gl, const Bitmap& bitmap, GLint minMagFiler = GL_NEAREST, GLint wrapMode = GL_CLAMP_TO_EDGE)
tdogl::Texture::Texture	Texture.h	/^        Texture(const Texture&);$/;"	p	class:tdogl::Texture	access:private	signature:(const Texture&)
tdogl::Texture::_object	Texture.h	/^        GLuint _object;$/;"	m	class:tdogl::Texture	access:private
tdogl::Texture::_originalHeight	Texture.h	/^        GLfloat _originalHeight;$/;"	m	class:tdogl::Texture	access:private
tdogl::Texture::_originalWidth	Texture.h	/^        GLfloat _originalWidth;$/;"	m	class:tdogl::Texture	access:private
tdogl::Texture::gl	Texture.h	/^    	Context *gl;$/;"	m	class:tdogl::Texture	access:private
tdogl::Texture::object	Texture.h	/^        GLuint object() const;$/;"	p	class:tdogl::Texture	access:public	signature:() const
tdogl::Texture::operator =	Texture.h	/^        const Texture& operator=(const Texture&);$/;"	p	class:tdogl::Texture	access:private	signature:(const Texture&)
tdogl::Texture::originalHeight	Texture.h	/^        GLfloat originalHeight() const;$/;"	p	class:tdogl::Texture	access:public	signature:() const
tdogl::Texture::originalWidth	Texture.h	/^        GLfloat originalWidth() const;$/;"	p	class:tdogl::Texture	access:public	signature:() const
tdogl::Texture::~Texture	Texture.h	/^        ~Texture();$/;"	p	class:tdogl::Texture	access:public	signature:()
techotex	app.h	/^	tdogl::Texture* techotex;$/;"	m	class:App	access:private
tex	sprite3d.h	/^	tdogl::Texture* tex;$/;"	m	class:Sprite3D	access:private
tex1	app.h	/^	tdogl::Texture* tex1;$/;"	m	class:App	access:private
tex2	app.h	/^	tdogl::Texture* tex2;$/;"	m	class:App	access:private
tex3	app.h	/^	tdogl::Texture* tex3;$/;"	m	class:App	access:private
timeStep	physics.h	/^	const float32 timeStep = 1.0f \/ 60.0f;$/;"	m	class:Physics	access:public
timer	app.h	/^	uint32_t timer;$/;"	m	class:App	access:private
todo	stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon6	access:public
tq	stb_image.h	/^      int tq;$/;"	m	struct:__anon6::__anon7	access:public
transform	entity.h	/^	Transform transform;$/;"	m	class:Entity	access:private
transparent	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon16	access:public
turbulence	texgen.cpp	/^Canvas turbulence( Canvas& in, Canvas& out )$/;"	f	namespace:rzfx	signature:( Canvas& in, Canvas& out )
turbulence	texgen.h	/^void turbulence( Canvas& c );$/;"	p	namespace:rzfx	signature:( Canvas& c )
type	stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon11	access:public
type	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon14	access:public
uint64_t	glcorearb.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	glcorearb.h	/^typedef unsigned long int uint64_t;$/;"	t
uint64_t	glcorearb.h	/^typedef unsigned long long int uint64_t;$/;"	t
uniform	random.h	/^	float uniform( )$/;"	f	class:RNG	access:public	signature:( )
uniform	random.h	/^	int uniform( int low, int high )$/;"	f	class:RNG	access:public	signature:( int low, int high )
uvs	mesh.h	/^	GLfloat* uvs;$/;"	m	class:Mesh	access:protected
v	stb_image.h	/^      int h,v;$/;"	m	struct:__anon6::__anon7	access:public
validate_uint32	stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
value	stb_image.h	/^   stbi__uint16 value[288]; $/;"	m	struct:__anon9	access:public
values	stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon5	access:public
vao	mesh.h	/^	GLuint vao;$/;"	m	class:Mesh	access:protected
vbo	mesh.h	/^	GLuint* vbo;$/;"	m	class:Mesh	access:protected
velocityIterations	physics.h	/^	const int32 velocityIterations = 6;$/;"	m	class:Physics	access:public
vert	block.h	/^	static const GLfloat vert[];$/;"	m	class:Block	access:public
vert	program.h	/^	Shader vert;$/;"	m	class:Program	access:private
verticalAngle	camera.h	/^	float verticalAngle;$/;"	m	class:Camera	access:private
vertices	mesh.h	/^	GLfloat* vertices;$/;"	m	class:Mesh	access:protected
view	camera.h	/^	cml::matrix44f_c view, projection;$/;"	m	class:Camera	access:private
view	renderer.h	/^	cml::matrix44f_c view;$/;"	m	class:Renderer	access:private
vs	stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon8	access:public
w	mapgen.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
w	stb_image.h	/^   int w,h;$/;"	m	struct:__anon16	access:public
w2	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon6::__anon7	access:public
w_lores	stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion $/;"	m	struct:__anon8	access:public
width	Bitmap.cpp	/^unsigned int Bitmap::width() const {$/;"	f	class:Bitmap	signature:() const
width	Bitmap.h	/^        unsigned width() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
width	quad.h	/^	int width, height;$/;"	m	class:Quad	access:private
winHeight	sdlglapp.h	/^	int winWidth, winHeight;$/;"	m	class:SDLGLApp	access:protected
winWidth	sdlglapp.h	/^	int winWidth, winHeight;$/;"	m	class:SDLGLApp	access:protected
world	physics.h	/^	b2World* world;$/;"	m	class:Physics	access:private
x	map.h	/^		int x, y;$/;"	m	struct:Map::BlockData	access:public
x	mapgen.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
x	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon6::__anon7	access:public
xaxis	app.h	/^		int xaxis, yaxis;$/;"	m	struct:App::Input	access:public
y	map.h	/^		int x, y;$/;"	m	struct:Map::BlockData	access:public
y	mapgen.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
y	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon6::__anon7	access:public
yaxis	app.h	/^		int xaxis, yaxis;$/;"	m	struct:App::Input	access:public
ypos	stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon8	access:public
ystep	stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon8	access:public
z_distance	stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon10	access:public
z_expandable	stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon10	access:public
z_length	stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon10	access:public
zbuffer	stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon10	access:public
zbuffer_end	stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon10	access:public
zout	stb_image.h	/^   char *zout;$/;"	m	struct:__anon10	access:public
zout_end	stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon10	access:public
zout_start	stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon10	access:public
~Bitmap	Bitmap.cpp	/^Bitmap::~Bitmap() {$/;"	f	class:Bitmap	signature:()
~Bitmap	Bitmap.h	/^        ~Bitmap();$/;"	p	class:tdogl::Bitmap	access:public	signature:()
~Context	context.h	/^  virtual ~Context(){}$/;"	f	class:Render::Context	access:public	signature:()
~Context	sdlcontext.cpp	/^Context::~Context()$/;"	f	class:Render::SDL::Context	signature:()
~Context	sdlcontext.h	/^  virtual ~Context();$/;"	p	class:Render::SDL::Context	access:public	signature:()
~DynamicArray	dynamicarray.h	/^	~DynamicArray( )$/;"	f	class:DynamicArray	access:public	signature:( )
~Matrix2D	matriz.h	/^	~Matrix2D()$/;"	f	class:Matrix2D	access:public	signature:()
~Mesh	mesh.h	/^	virtual ~Mesh()$/;"	f	class:Mesh	access:public	signature:()
~SDLGLApp	sdlglapp.cpp	/^SDLGLApp::~SDLGLApp()$/;"	f	class:SDLGLApp	signature:()
~SDLGLApp	sdlglapp.h	/^	virtual ~SDLGLApp ();$/;"	p	class:SDLGLApp	access:public	signature:()
~Texture	Texture.cpp	/^Texture::~Texture()$/;"	f	class:Texture	signature:()
~Texture	Texture.h	/^        ~Texture();$/;"	p	class:tdogl::Texture	access:public	signature:()
