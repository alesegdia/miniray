!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABULLET_MASK	physics/physics.h	/^	static const uint16_t ABULLET_MASK = CollisionLayer::MAP | CollisionLayer::ENEMY;$/;"	m	class:Physics	access:public
ALLY_BULLET	physics/layers.h	/^	ALLY_BULLET = 	0x0002,$/;"	e	enum:CollisionLayer
AMMO	entity/pickup.h	/^		AMMO, HEALTH, ITEM$/;"	e	enum:Pickup::Type
APIENTRY	render/glcorearb.h	47;"	d
APIENTRYP	render/glcorearb.h	50;"	d
ASSERT_CANVAS	texgen/texgen.cpp	45;"	d	file:
ASSETS_BASE_DIR	constants.h	6;"	d
ASSETS_PATH	constants.h	7;"	d
AStarSearch	ailib/stlastar.h	/^	AStarSearch( int MaxNodes ) :$/;"	f	class:AStarSearch	access:public	signature:( int MaxNodes )
AStarSearch	ailib/stlastar.h	/^	AStarSearch() :$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch	ailib/stlastar.h	/^template <class UserState> class AStarSearch$/;"	c
AStarSearch::AStarSearch	ailib/stlastar.h	/^	AStarSearch( int MaxNodes ) :$/;"	f	class:AStarSearch	access:public	signature:( int MaxNodes )
AStarSearch::AStarSearch	ailib/stlastar.h	/^	AStarSearch() :$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::AddSuccessor	ailib/stlastar.h	/^	bool AddSuccessor( UserState &State )$/;"	f	class:AStarSearch	access:public	signature:( UserState &State )
AStarSearch::AllocateNode	ailib/stlastar.h	/^	Node *AllocateNode()$/;"	f	class:AStarSearch	access:private	signature:()
AStarSearch::CancelSearch	ailib/stlastar.h	/^	void CancelSearch()$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::EnsureMemoryFreed	ailib/stlastar.h	/^	void EnsureMemoryFreed()$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::FreeAllNodes	ailib/stlastar.h	/^	void FreeAllNodes()$/;"	f	class:AStarSearch	access:private	signature:()
AStarSearch::FreeNode	ailib/stlastar.h	/^	void FreeNode( Node *node )$/;"	f	class:AStarSearch	access:private	signature:( Node *node )
AStarSearch::FreeSolutionNodes	ailib/stlastar.h	/^	void FreeSolutionNodes()$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::FreeUnusedNodes	ailib/stlastar.h	/^	void FreeUnusedNodes()$/;"	f	class:AStarSearch	access:private	signature:()
AStarSearch::GetClosedListNext	ailib/stlastar.h	/^	UserState *GetClosedListNext( float &f, float &g, float &h )$/;"	f	class:AStarSearch	access:public	signature:( float &f, float &g, float &h )
AStarSearch::GetClosedListNext	ailib/stlastar.h	/^	UserState *GetClosedListNext()$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::GetClosedListStart	ailib/stlastar.h	/^	UserState *GetClosedListStart( float &f, float &g, float &h )$/;"	f	class:AStarSearch	access:public	signature:( float &f, float &g, float &h )
AStarSearch::GetClosedListStart	ailib/stlastar.h	/^	UserState *GetClosedListStart()$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::GetOpenListNext	ailib/stlastar.h	/^	UserState *GetOpenListNext( float &f, float &g, float &h )$/;"	f	class:AStarSearch	access:public	signature:( float &f, float &g, float &h )
AStarSearch::GetOpenListNext	ailib/stlastar.h	/^	UserState *GetOpenListNext()$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::GetOpenListStart	ailib/stlastar.h	/^	UserState *GetOpenListStart( float &f, float &g, float &h )$/;"	f	class:AStarSearch	access:public	signature:( float &f, float &g, float &h )
AStarSearch::GetOpenListStart	ailib/stlastar.h	/^	UserState *GetOpenListStart()$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::GetSolutionCost	ailib/stlastar.h	/^	float GetSolutionCost()$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::GetSolutionEnd	ailib/stlastar.h	/^	UserState *GetSolutionEnd()$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::GetSolutionNext	ailib/stlastar.h	/^	UserState *GetSolutionNext()$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::GetSolutionPrev	ailib/stlastar.h	/^	UserState *GetSolutionPrev()$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::GetSolutionStart	ailib/stlastar.h	/^	UserState *GetSolutionStart()$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::GetStepCount	ailib/stlastar.h	/^	int GetStepCount() { return m_Steps; }$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::HeapCompare_f	ailib/stlastar.h	/^	class HeapCompare_f $/;"	c	class:AStarSearch	access:public
AStarSearch::HeapCompare_f::operator ()	ailib/stlastar.h	/^			bool operator() ( const Node *x, const Node *y ) const$/;"	f	class:AStarSearch::HeapCompare_f	access:public	signature:( const Node *x, const Node *y ) const
AStarSearch::Node	ailib/stlastar.h	/^	class Node$/;"	c	class:AStarSearch	access:public
AStarSearch::Node::Node	ailib/stlastar.h	/^			Node() :$/;"	f	class:AStarSearch::Node	access:public	signature:()
AStarSearch::Node::child	ailib/stlastar.h	/^			Node *child; \/\/ used after the search for the application to view the search in reverse$/;"	m	class:AStarSearch::Node	access:public
AStarSearch::Node::f	ailib/stlastar.h	/^			float f; \/\/ sum of cumulative cost of predecessors and self and heuristic$/;"	m	class:AStarSearch::Node	access:public
AStarSearch::Node::g	ailib/stlastar.h	/^			float g; \/\/ cost of this node + it's predecessors$/;"	m	class:AStarSearch::Node	access:public
AStarSearch::Node::h	ailib/stlastar.h	/^			float h; \/\/ heuristic estimate of distance to goal$/;"	m	class:AStarSearch::Node	access:public
AStarSearch::Node::m_UserState	ailib/stlastar.h	/^			UserState m_UserState;$/;"	m	class:AStarSearch::Node	access:public
AStarSearch::Node::parent	ailib/stlastar.h	/^			Node *parent; \/\/ used during the search to record the parent of successor nodes$/;"	m	class:AStarSearch::Node	access:public
AStarSearch::SEARCH_STATE_FAILED	ailib/stlastar.h	/^		SEARCH_STATE_FAILED,$/;"	e	enum:AStarSearch::__anon9
AStarSearch::SEARCH_STATE_INVALID	ailib/stlastar.h	/^		SEARCH_STATE_INVALID$/;"	e	enum:AStarSearch::__anon9
AStarSearch::SEARCH_STATE_NOT_INITIALISED	ailib/stlastar.h	/^		SEARCH_STATE_NOT_INITIALISED,$/;"	e	enum:AStarSearch::__anon9
AStarSearch::SEARCH_STATE_OUT_OF_MEMORY	ailib/stlastar.h	/^		SEARCH_STATE_OUT_OF_MEMORY,$/;"	e	enum:AStarSearch::__anon9
AStarSearch::SEARCH_STATE_SEARCHING	ailib/stlastar.h	/^		SEARCH_STATE_SEARCHING,$/;"	e	enum:AStarSearch::__anon9
AStarSearch::SEARCH_STATE_SUCCEEDED	ailib/stlastar.h	/^		SEARCH_STATE_SUCCEEDED,$/;"	e	enum:AStarSearch::__anon9
AStarSearch::SearchStep	ailib/stlastar.h	/^	unsigned int SearchStep()$/;"	f	class:AStarSearch	access:public	signature:()
AStarSearch::SetStartAndGoalStates	ailib/stlastar.h	/^	void SetStartAndGoalStates( UserState &Start, UserState &Goal )$/;"	f	class:AStarSearch	access:public	signature:( UserState &Start, UserState &Goal )
AStarSearch::iterDbgClosed	ailib/stlastar.h	/^	typename vector< Node * >::iterator iterDbgClosed;$/;"	m	class:AStarSearch	access:private
AStarSearch::iterDbgOpen	ailib/stlastar.h	/^	typename vector< Node * >::iterator iterDbgOpen;$/;"	m	class:AStarSearch	access:private
AStarSearch::m_AllocateNodeCount	ailib/stlastar.h	/^	int m_AllocateNodeCount;$/;"	m	class:AStarSearch	access:private
AStarSearch::m_CancelRequest	ailib/stlastar.h	/^	bool m_CancelRequest;$/;"	m	class:AStarSearch	access:private
AStarSearch::m_ClosedList	ailib/stlastar.h	/^	vector< Node * > m_ClosedList; $/;"	m	class:AStarSearch	access:private
AStarSearch::m_CurrentSolutionNode	ailib/stlastar.h	/^	Node *m_CurrentSolutionNode;$/;"	m	class:AStarSearch	access:private
AStarSearch::m_FixedSizeAllocator	ailib/stlastar.h	/^ 	FixedSizeAllocator<Node> m_FixedSizeAllocator;$/;"	m	class:AStarSearch	access:private
AStarSearch::m_Goal	ailib/stlastar.h	/^	Node *m_Goal;$/;"	m	class:AStarSearch	access:private
AStarSearch::m_OpenList	ailib/stlastar.h	/^	vector< Node *> m_OpenList;$/;"	m	class:AStarSearch	access:private
AStarSearch::m_Start	ailib/stlastar.h	/^	Node *m_Start;$/;"	m	class:AStarSearch	access:private
AStarSearch::m_State	ailib/stlastar.h	/^	unsigned int m_State;$/;"	m	class:AStarSearch	access:private
AStarSearch::m_Steps	ailib/stlastar.h	/^	int m_Steps;$/;"	m	class:AStarSearch	access:private
AStarSearch::m_Successors	ailib/stlastar.h	/^	vector< Node * > m_Successors;$/;"	m	class:AStarSearch	access:private
AStarState	ailib/stlastar.h	/^template <class T> class AStarState$/;"	c
AStarState::GetCost	ailib/stlastar.h	/^	virtual float GetCost( T &successor ) = 0; \/\/ Computes the cost of travelling from this node to the successor node$/;"	p	class:AStarState	access:public	signature:( T &successor )
AStarState::GetSuccessors	ailib/stlastar.h	/^	virtual bool GetSuccessors( AStarSearch<T> *astarsearch, T *parent_node ) = 0; \/\/ Retrieves all successors to this node and adds them via astarsearch.addSuccessor()$/;"	p	class:AStarState	access:public	signature:( AStarSearch<T> *astarsearch, T *parent_node )
AStarState::GoalDistanceEstimate	ailib/stlastar.h	/^	virtual float GoalDistanceEstimate( T &nodeGoal ) = 0; \/\/ Heuristic function which computes the estimated cost to the goal node$/;"	p	class:AStarState	access:public	signature:( T &nodeGoal )
AStarState::IsGoal	ailib/stlastar.h	/^	virtual bool IsGoal( T &nodeGoal ) = 0; \/\/ Returns true if this node is the goal node$/;"	p	class:AStarState	access:public	signature:( T &nodeGoal )
AStarState::IsSameState	ailib/stlastar.h	/^	virtual bool IsSameState( T &rhs ) = 0; \/\/ Returns true if this node is the same as the rhs node$/;"	p	class:AStarState	access:public	signature:( T &rhs )
AStarState::~AStarState	ailib/stlastar.h	/^	virtual ~AStarState() {}$/;"	f	class:AStarState	access:public	signature:()
ActiveTexture	render/context.h	/^  PFNGLACTIVETEXTUREPROC ActiveTexture;$/;"	m	class:Render::Context	access:public
Actor	entity/actor.h	/^class Actor : public Entity$/;"	c	inherits:Entity
Actor::ApplyLinearVelocity	entity/actor.h	/^	void ApplyLinearVelocity()$/;"	f	class:Actor	access:public	signature:()
Actor::BAD	entity/actor.h	/^	enum Faction { GOOD, BAD, NEUTRAL };$/;"	e	enum:Actor::Faction
Actor::Faction	entity/actor.h	/^	enum Faction { GOOD, BAD, NEUTRAL };$/;"	g	class:Actor	access:public
Actor::GOOD	entity/actor.h	/^	enum Faction { GOOD, BAD, NEUTRAL };$/;"	e	enum:Actor::Faction
Actor::NEUTRAL	entity/actor.h	/^	enum Faction { GOOD, BAD, NEUTRAL };$/;"	e	enum:Actor::Faction
Actor::__anon2::agi	entity/actor.h	/^	struct { float pwr, def, psi, dkm, agi; } stats;$/;"	m	struct:Actor::__anon2	access:public
Actor::__anon2::def	entity/actor.h	/^	struct { float pwr, def, psi, dkm, agi; } stats;$/;"	m	struct:Actor::__anon2	access:public
Actor::__anon2::dkm	entity/actor.h	/^	struct { float pwr, def, psi, dkm, agi; } stats;$/;"	m	struct:Actor::__anon2	access:public
Actor::__anon2::psi	entity/actor.h	/^	struct { float pwr, def, psi, dkm, agi; } stats;$/;"	m	struct:Actor::__anon2	access:public
Actor::__anon2::pwr	entity/actor.h	/^	struct { float pwr, def, psi, dkm, agi; } stats;$/;"	m	struct:Actor::__anon2	access:public
Actor::__anon3::current	entity/actor.h	/^	struct { int current, total; } hp;$/;"	m	struct:Actor::__anon3	access:public
Actor::__anon3::total	entity/actor.h	/^	struct { int current, total; } hp;$/;"	m	struct:Actor::__anon3	access:public
Actor::__anon4::duration	entity/actor.h	/^	struct { uint32_t duration, last_pain; } fallout;$/;"	m	struct:Actor::__anon4	access:public
Actor::__anon4::last_pain	entity/actor.h	/^	struct { uint32_t duration, last_pain; } fallout;$/;"	m	struct:Actor::__anon4	access:public
Actor::__anon5::confuse	entity/actor.h	/^	struct { uint32_t slow, freeze, confuse; } effect;$/;"	m	struct:Actor::__anon5	access:public
Actor::__anon5::freeze	entity/actor.h	/^	struct { uint32_t slow, freeze, confuse; } effect;$/;"	m	struct:Actor::__anon5	access:public
Actor::__anon5::slow	entity/actor.h	/^	struct { uint32_t slow, freeze, confuse; } effect;$/;"	m	struct:Actor::__anon5	access:public
Actor::attack	entity/actor.h	/^	bool attack;$/;"	m	class:Actor	access:public
Actor::effect	entity/actor.h	/^	struct { uint32_t slow, freeze, confuse; } effect;$/;"	m	class:Actor	typeref:struct:Actor::__anon5	access:public
Actor::faction	entity/actor.h	/^	Faction faction;$/;"	m	class:Actor	access:public
Actor::fallout	entity/actor.h	/^	struct { uint32_t duration, last_pain; } fallout;$/;"	m	class:Actor	typeref:struct:Actor::__anon4	access:public
Actor::hp	entity/actor.h	/^	struct { int current, total; } hp;$/;"	m	class:Actor	typeref:struct:Actor::__anon3	access:public
Actor::last_pain	entity/actor.h	/^	int last_pain;$/;"	m	class:Actor	access:public
Actor::move_direction	entity/actor.h	/^	cml::vector2f rotation_offset, move_direction;$/;"	m	class:Actor	access:public
Actor::rotation_offset	entity/actor.h	/^	cml::vector2f rotation_offset, move_direction;$/;"	m	class:Actor	access:public
Actor::stats	entity/actor.h	/^	struct { float pwr, def, psi, dkm, agi; } stats;$/;"	m	class:Actor	typeref:struct:Actor::__anon2	access:public
Actor::wep	entity/actor.h	/^	Weapon wep; \/\/ PUESTO AQUI PARA DEPURAR$/;"	m	class:Actor	access:public
Add	core/dynamicarray.h	/^	void Add( T item )$/;"	f	class:DynamicArray	access:public	signature:( T item )
Add	texgen/canvas.h	/^	void Add( Canvas& other )$/;"	f	class:Canvas	access:public	signature:( Canvas& other )
AddChild	core/transform.cpp	/^	for( int i = 0; i < this->children.Size(); i++ ) {$/;"	f	class:Transform	signature:(Transform* child)
AddChild	core/transform.h	/^	void AddChild( Transform* child );$/;"	p	class:Transform	access:public	signature:( Transform* child )
AddCubeBody	physics/physics.cpp	/^void Physics::AddCubeBody( float x, float y )$/;"	f	class:Physics	signature:( float x, float y )
AddCubeBody	physics/physics.h	/^	void AddCubeBody( float x, float y );$/;"	p	class:Physics	access:public	signature:( float x, float y )
AddFrame	render/animation.h	/^	void AddFrame( const Frame& f )$/;"	f	class:Animation	access:public	signature:( const Frame& f )
AddItem	entity/script/inventory.cpp	/^bool Inventory::AddItem( Item* item )$/;"	f	class:Inventory	signature:( Item* item )
AddItem	entity/script/inventory.h	/^	bool AddItem( Item* item );$/;"	p	class:Inventory	access:public	signature:( Item* item )
AddSuccessor	ailib/stlastar.h	/^	bool AddSuccessor( UserState &State )$/;"	f	class:AStarSearch	access:public	signature:( UserState &State )
Alloc	core/matrix2d.h	/^	void Alloc( int rows, int cols )$/;"	f	class:Matrix2D	access:public	signature:( int rows, int cols )
Alloc	render/mesh.h	/^	void Alloc( int num )$/;"	f	class:Mesh	access:protected	signature:( int num )
AllocEntity	entity/entityfactory.cpp	/^EntityType* EntityFactory::AllocEntity()$/;"	f	class:EntityFactory	signature:()
AllocEntity	entity/entityfactory.h	/^	EntityType* AllocEntity();$/;"	p	class:EntityFactory	access:public	signature:()
AllocPostQuad	render/renderer.h	/^	void AllocPostQuad()$/;"	f	class:Renderer	access:public	signature:()
AllocateNode	ailib/stlastar.h	/^	Node *AllocateNode()$/;"	f	class:AStarSearch	access:private	signature:()
Animation	render/animation.h	/^	Animation () {}$/;"	f	class:Animation	access:public	signature:()
Animation	render/animation.h	/^class Animation {$/;"	c
Animation::AddFrame	render/animation.h	/^	void AddFrame( const Frame& f )$/;"	f	class:Animation	access:public	signature:( const Frame& f )
Animation::Animation	render/animation.h	/^	Animation () {}$/;"	f	class:Animation	access:public	signature:()
Animation::Data	render/animation.h	/^	struct Data$/;"	s	class:Animation	access:public
Animation::Data::current	render/animation.h	/^		int current;$/;"	m	struct:Animation::Data	access:public
Animation::Data::next_frame	render/animation.h	/^		uint32_t next_frame;$/;"	m	struct:Animation::Data	access:public
Animation::Data::num_plays	render/animation.h	/^		int num_plays;$/;"	m	struct:Animation::Data	access:public
Animation::Frame	render/animation.h	/^	struct Frame$/;"	s	class:Animation	access:public
Animation::Frame::num	render/animation.h	/^		int num;$/;"	m	struct:Animation::Frame	access:public
Animation::Frame::time	render/animation.h	/^		int time;$/;"	m	struct:Animation::Frame	access:public
Animation::GetFrame	render/animation.h	/^	int GetFrame( const Data& d )$/;"	f	class:Animation	access:public	signature:( const Data& d )
Animation::Update	render/animation.h	/^	void Update( Data& d )$/;"	f	class:Animation	access:public	signature:( Data& d )
Animation::frames	render/animation.h	/^	DynamicArray<Frame> frames;$/;"	m	class:Animation	access:private
Animation::~Animation	render/animation.h	/^	virtual ~Animation () {}$/;"	f	class:Animation	access:public	signature:()
App	app/app.cpp	/^App::App() :$/;"	f	class:App	signature:()
App	app/app.h	/^	App();$/;"	p	class:App	access:public	signature:()
App	app/app.h	/^class App : public SDLGLApp$/;"	c	inherits:SDLGLApp
App::App	app/app.cpp	/^App::App() :$/;"	f	class:App	signature:()
App::App	app/app.h	/^	App();$/;"	p	class:App	access:public	signature:()
App::Cleanup	app/app.cpp	/^void App::Cleanup()$/;"	f	class:App	signature:()
App::Cleanup	app/app.h	/^	void Cleanup();$/;"	p	class:App	access:private	signature:()
App::GenThat	app/app.h	/^	void GenThat();$/;"	p	class:App	access:private	signature:()
App::HandleCamInput	app/app.h	/^	void HandleCamInput();$/;"	p	class:App	access:private	signature:()
App::HandleEvent	app/app.cpp	/^void App::HandleEvent(SDL_Event& event)$/;"	f	class:App	signature:(SDL_Event& event)
App::HandleEvent	app/app.h	/^	void HandleEvent(SDL_Event& event);$/;"	p	class:App	access:private	signature:(SDL_Event& event)
App::PurgeList	app/app.cpp	/^void App::PurgeList( DynamicArray<Entity*>& l )$/;"	f	class:App	signature:( DynamicArray<Entity*>& l )
App::PurgeList	app/app.h	/^	void PurgeList( DynamicArray<Entity*>& l );$/;"	p	class:App	access:private	signature:( DynamicArray<Entity*>& l )
App::Render	app/app.cpp	/^void App::Render()$/;"	f	class:App	signature:()
App::Render	app/app.h	/^	void Render();$/;"	p	class:App	access:private	signature:()
App::RenderMiniText	app/app.cpp	/^void App::RenderMiniText()$/;"	f	class:App	signature:()
App::RenderMiniText	app/app.h	/^	void RenderMiniText();$/;"	p	class:App	access:private	signature:()
App::RenderPlayerHP	app/app.cpp	/^void App::RenderPlayerHP()$/;"	f	class:App	signature:()
App::RenderPlayerHP	app/app.h	/^	void RenderPlayerHP();$/;"	p	class:App	access:private	signature:()
App::Setup	app/app.cpp	/^void App::Setup(int argc, char** argv)$/;"	f	class:App	signature:(int argc, char** argv)
App::Setup	app/app.h	/^	void Setup(int argc, char** argv);$/;"	p	class:App	access:private	signature:(int argc, char** argv)
App::SetupPlayer	app/app.cpp	/^void App::SetupPlayer()$/;"	f	class:App	signature:()
App::SetupPlayer	app/app.h	/^	void SetupPlayer();$/;"	p	class:App	access:private	signature:()
App::Update	app/app.cpp	/^void App::Update(uint32_t delta)$/;"	f	class:App	signature:(uint32_t delta)
App::Update	app/app.h	/^	void Update(uint32_t delta);$/;"	p	class:App	access:private	signature:(uint32_t delta)
App::UpdateActors	app/app.cpp	/^void App::UpdateActors( uint32_t delta )$/;"	f	class:App	signature:( uint32_t delta )
App::UpdateActors	app/app.h	/^	void UpdateActors( uint32_t delta );$/;"	p	class:App	access:private	signature:( uint32_t delta )
App::actors	app/app.h	/^	DynamicArray<Entity*> actors;				\/\/ list of actors$/;"	m	class:App	access:private
App::assets	app/app.h	/^	Assets assets;$/;"	m	class:App	access:private
App::bullets	app/app.h	/^	DynamicArray<Entity*> bullets;				\/\/ list of bullets$/;"	m	class:App	access:private
App::cam	app/app.h	/^	Camera cam;$/;"	m	class:App	access:private
App::coord	app/app.h	/^	float coord;$/;"	m	class:App	access:private
App::deltatime	app/app.h	/^	uint32_t deltatime;$/;"	m	class:App	access:private
App::efactory	app/app.h	/^	EntityFactory efactory;$/;"	m	class:App	access:private
App::font	app/app.h	/^	Font font;$/;"	m	class:App	access:private
App::map	app/app.h	/^	Map map;$/;"	m	class:App	access:private
App::mapdata	app/app.h	/^	mapgen::MapData mapdata;					\/\/ map generation data$/;"	m	class:App	access:private
App::physics	app/app.h	/^	Physics physics;$/;"	m	class:App	access:private
App::plane	app/app.h	/^	Plane plane;$/;"	m	class:App	access:private
App::player	app/app.h	/^	Player* player;								\/\/ player entity$/;"	m	class:App	access:private
App::playercontroller	app/app.h	/^	PlayerHumanController* playercontroller;	\/\/ player controller for input stuff$/;"	m	class:App	access:private
App::renderer	app/app.h	/^	Renderer renderer;$/;"	m	class:App	access:private
App::rng	app/app.h	/^	RNG rng;$/;"	m	class:App	access:private
App::sceneRoot	app/app.h	/^	Transform sceneRoot;$/;"	m	class:App	access:private
ApplyLinearVelocity	entity/actor.h	/^	void ApplyLinearVelocity()$/;"	f	class:Actor	access:public	signature:()
Assets	render/assets.h	/^class Assets {$/;"	c
Assets::LoadTexture	render/assets.h	/^	void LoadTexture( Render::Context* gl, const char* path, int texid )$/;"	f	class:Assets	access:public	signature:( Render::Context* gl, const char* path, int texid )
Assets::Prepare	render/assets.h	/^	void Prepare( Render::Context* gl )$/;"	f	class:Assets	access:public	signature:( Render::Context* gl )
Assets::Sprite	render/assets.h	/^	Sprite3D* Sprite( int spriteid )$/;"	f	class:Assets	access:public	signature:( int spriteid )
Assets::Texture	render/assets.h	/^	tdogl::Texture* Texture( int textureid )$/;"	f	class:Assets	access:public	signature:( int textureid )
Assets::sprites	render/assets.h	/^	Sprite3D sprites[S3D_MAX];$/;"	m	class:Assets	access:private
Assets::textures	render/assets.h	/^	tdogl::Texture* textures[TEX_MAX];$/;"	m	class:Assets	access:private
Assets::~Assets	render/assets.h	/^	~Assets(){$/;"	f	class:Assets	access:public	signature:()
AttachShader	render/context.h	/^  PFNGLATTACHSHADERPROC AttachShader;$/;"	m	class:Render::Context	access:public
AttribConfig	render/mesh.h	/^	enum class AttribConfig$/;"	c	class:Mesh	access:public
AverageRGB	render/Bitmap.cpp	/^inline unsigned char AverageRGB(unsigned char rgb[3]) {$/;"	f	signature:(unsigned char rgb[3])
BAD	entity/actor.h	/^	enum Faction { GOOD, BAD, NEUTRAL };$/;"	e	enum:Actor::Faction
BAT	entity/player.h	/^	float BAT;$/;"	m	class:Player	access:public
BAT_per_shot	entity/script/playerweapon.h	/^	float BAT_per_shot;$/;"	m	class:PlayerWeapon	access:public
BLOCK_FREE	map/map.h	/^	static const int BLOCK_FREE = 0;$/;"	m	class:Map	access:public
BLOCK_SOLID	map/map.h	/^	static const int BLOCK_SOLID = 1;$/;"	m	class:Map	access:public
BOUNDARY	physics/layers.h	/^	BOUNDARY = 		0x0001,$/;"	e	enum:CollisionLayer
BULLET	entity/entity.h	/^		BULLET,$/;"	e	enum:Entity::Type
Back	core/dynamicarray.h	/^	T& Back()$/;"	f	class:DynamicArray	access:public	signature:()
BatchSprite3D	render/renderer.h	/^	void BatchSprite3D()$/;"	f	class:Renderer	access:public	signature:()
BeginContact	physics/contactlistener.cpp	/^void ContactListener::BeginContact( b2Contact* contact )$/;"	f	class:ContactListener	signature:( b2Contact* contact )
BeginContact	physics/contactlistener.h	/^	void BeginContact( b2Contact* contact );$/;"	p	class:ContactListener	access:private	signature:( b2Contact* contact )
BindAttribLocation	render/context.h	/^  PFNGLBINDATTRIBLOCATIONPROC BindAttribLocation;$/;"	m	class:Render::Context	access:public
BindAttribLocation	render/program.h	/^	void BindAttribLocation( Render::Context* gl, GLuint loc, const char* shadervar )$/;"	f	class:Program	access:public	signature:( Render::Context* gl, GLuint loc, const char* shadervar )
BindBuffer	render/context.h	/^  PFNGLBINDBUFFERPROC BindBuffer;$/;"	m	class:Render::Context	access:public
BindFramebuffer	render/context.h	/^  PFNGLBINDFRAMEBUFFERPROC BindFramebuffer;$/;"	m	class:Render::Context	access:public
BindPostFBO	render/renderer.h	/^	void BindPostFBO()$/;"	f	class:Renderer	access:public	signature:()
BindRenderbuffer	render/context.h	/^  PFNGLBINDRENDERBUFFERPROC BindRenderbuffer;$/;"	m	class:Render::Context	access:public
BindTexture	render/context.h	/^  PFNGLBINDTEXTUREPROC BindTexture;$/;"	m	class:Render::Context	access:public
BindVP	render/renderer.h	/^	inline void BindVP( GLuint shaderprogram )$/;"	f	class:Renderer	access:public	signature:( GLuint shaderprogram )
BindVertexArray	render/context.h	/^  PFNGLBINDVERTEXARRAYPROC BindVertexArray;$/;"	m	class:Render::Context	access:public
BindVisionRange	render/renderer.h	/^	inline void BindVisionRange( GLuint shaderprogram )$/;"	f	class:Renderer	access:public	signature:( GLuint shaderprogram )
Bitmap	render/Bitmap.cpp	/^Bitmap::Bitmap(const Bitmap& other) :$/;"	f	class:Bitmap	signature:(const Bitmap& other)
Bitmap	render/Bitmap.cpp	/^Bitmap::Bitmap(unsigned width, $/;"	f	class:Bitmap	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels)
Bitmap	render/Bitmap.h	/^        Bitmap(const Bitmap& other);$/;"	p	class:tdogl::Bitmap	access:public	signature:(const Bitmap& other)
Bitmap	render/Bitmap.h	/^        Bitmap(unsigned width, $/;"	p	class:tdogl::Bitmap	access:public	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels = NULL)
Bitmap	render/Bitmap.h	/^    class Bitmap {$/;"	c	namespace:tdogl
Bitmap::Bitmap	render/Bitmap.cpp	/^Bitmap::Bitmap(const Bitmap& other) :$/;"	f	class:Bitmap	signature:(const Bitmap& other)
Bitmap::Bitmap	render/Bitmap.cpp	/^Bitmap::Bitmap(unsigned width, $/;"	f	class:Bitmap	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels)
Bitmap::_set	render/Bitmap.cpp	/^void Bitmap::_set(unsigned width, $/;"	f	class:Bitmap	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels)
Bitmap::bitmapFromFile	render/Bitmap.cpp	/^Bitmap Bitmap::bitmapFromFile(std::string filePath) {$/;"	f	class:Bitmap	signature:(std::string filePath)
Bitmap::copyRectFromBitmap	render/Bitmap.cpp	/^void Bitmap::copyRectFromBitmap(const Bitmap& src, $/;"	f	class:Bitmap	signature:(const Bitmap& src, unsigned srcCol, unsigned srcRow, unsigned destCol, unsigned destRow, unsigned width, unsigned height)
Bitmap::flipVertically	render/Bitmap.cpp	/^void Bitmap::flipVertically() {$/;"	f	class:Bitmap	signature:()
Bitmap::format	render/Bitmap.cpp	/^Bitmap::Format Bitmap::format() const {$/;"	f	class:Bitmap	signature:() const
Bitmap::getPixel	render/Bitmap.cpp	/^unsigned char* Bitmap::getPixel(unsigned int column, unsigned int row) const {$/;"	f	class:Bitmap	signature:(unsigned int column, unsigned int row) const
Bitmap::height	render/Bitmap.cpp	/^unsigned int Bitmap::height() const {$/;"	f	class:Bitmap	signature:() const
Bitmap::operator =	render/Bitmap.cpp	/^Bitmap& Bitmap::operator = (const Bitmap& other) {$/;"	f	class:Bitmap	signature:(const Bitmap& other)
Bitmap::pixelBuffer	render/Bitmap.cpp	/^unsigned char* Bitmap::pixelBuffer() const {$/;"	f	class:Bitmap	signature:() const
Bitmap::rotate90CounterClockwise	render/Bitmap.cpp	/^void Bitmap::rotate90CounterClockwise() {$/;"	f	class:Bitmap	signature:()
Bitmap::setPixel	render/Bitmap.cpp	/^void Bitmap::setPixel(unsigned int column, unsigned int row, const unsigned char* pixel) {$/;"	f	class:Bitmap	signature:(unsigned int column, unsigned int row, const unsigned char* pixel)
Bitmap::width	render/Bitmap.cpp	/^unsigned int Bitmap::width() const {$/;"	f	class:Bitmap	signature:() const
Bitmap::~Bitmap	render/Bitmap.cpp	/^Bitmap::~Bitmap() {$/;"	f	class:Bitmap	signature:()
Blackboard	ailib/blackboard.h	/^class Blackboard {$/;"	c
Blackboard::astarsearch	ailib/blackboard.h	/^	AStarSearch<MapSearchNode> astarsearch;$/;"	m	class:Blackboard	access:public
Blackboard::player	ailib/blackboard.h	/^	Player* player;$/;"	m	class:Blackboard	access:public
Blackboard::sharedmap	ailib/blackboard.h	/^	Matrix2D<float> sharedmap;$/;"	m	class:Blackboard	access:public
BlendFunc	render/context.h	/^  PFNGLBLENDFUNCPROC BlendFunc;$/;"	m	class:Render::Context	access:public
Block	render/block.h	/^	Block() :$/;"	f	class:Block	access:public	signature:()
Block	render/block.h	/^class Block : public Mesh$/;"	c	inherits:Mesh
Block::Block	render/block.h	/^	Block() :$/;"	f	class:Block	access:public	signature:()
Block::Prepare	render/block.h	/^	void Prepare( Render::Context* gl )$/;"	f	class:Block	access:public	signature:( Render::Context* gl )
Block::colors	render/block.h	/^	static const GLfloat colors[];$/;"	m	class:Block	access:public
Block::norm	render/block.h	/^	static const GLfloat norm[];$/;"	m	class:Block	access:public
Block::vert	render/block.h	/^	static const GLfloat vert[];$/;"	m	class:Block	access:public
BlockData	map/map.h	/^	struct BlockData$/;"	s	class:Map	access:private
BlockType	map/map.h	/^	typedef int BlockType;$/;"	t	class:Map	access:public
Bot	map/mapdata.h	/^	int Bot() { return y + floor(h\/2.f); }$/;"	f	struct:mapgen::Room	access:public	signature:()
BufferData	render/context.h	/^  PFNGLBUFFERDATAPROC BufferData;$/;"	m	class:Render::Context	access:public
Bullet	entity/bullet.h	/^	Bullet() {$/;"	f	class:Bullet	access:public	signature:()
Bullet	entity/bullet.h	/^class Bullet : public Entity {$/;"	c	inherits:Entity
Bullet::Bullet	entity/bullet.h	/^	Bullet() {$/;"	f	class:Bullet	access:public	signature:()
Bullet::dmg	entity/bullet.h	/^	float dmg;$/;"	m	class:Bullet	access:public
Bullet::effect	entity/bullet.h	/^	int effect;$/;"	m	class:Bullet	access:public
Bullet::element	entity/bullet.h	/^	int element;$/;"	m	class:Bullet	access:public
Bullet::owner	entity/bullet.h	/^	Actor* owner;$/;"	m	class:Bullet	access:public
Bullet::timer	entity/bullet.h	/^	uint32_t timer = 5;$/;"	m	class:Bullet	access:public
BulletController	entity/controller/bulletcontroller.h	/^class BulletController : public EntityController {$/;"	c	inherits:EntityController
BulletController::Step	entity/controller/bulletcontroller.h	/^	void Step( Entity* e, uint32_t delta )$/;"	f	class:BulletController	access:public	signature:( Entity* e, uint32_t delta )
CASE	render/stb_image.h	2521;"	d
CASE	render/stb_image.h	2534;"	d
CASE	render/stb_image.h	2537;"	d
CASE	render/stb_image.h	2550;"	d
CASE	render/stb_image.h	891;"	d
CASE	render/stb_image.h	909;"	d
COMBO	render/stb_image.h	890;"	d
Camera	render/camera.cpp	/^Camera::Camera() :$/;"	f	class:Camera	signature:()
Camera	render/camera.h	/^	Camera();$/;"	p	class:Camera	access:public	signature:()
Camera	render/camera.h	/^class Camera {$/;"	c
Camera::Camera	render/camera.cpp	/^Camera::Camera() :$/;"	f	class:Camera	signature:()
Camera::Camera	render/camera.h	/^	Camera();$/;"	p	class:Camera	access:public	signature:()
Camera::ComputeProjection	render/camera.cpp	/^void Camera::ComputeProjection()$/;"	f	class:Camera	signature:()
Camera::ComputeProjection	render/camera.h	/^	void ComputeProjection();$/;"	p	class:Camera	access:private	signature:()
Camera::ComputeView	render/camera.cpp	/^void Camera::ComputeView()$/;"	f	class:Camera	signature:()
Camera::ComputeView	render/camera.h	/^	void ComputeView();$/;"	p	class:Camera	access:private	signature:()
Camera::Forward	render/camera.cpp	/^cml::vector3f Camera::Forward() const$/;"	f	class:Camera	signature:() const
Camera::Forward	render/camera.h	/^	cml::vector3f Forward() const;$/;"	p	class:Camera	access:public	signature:() const
Camera::GetHorizontalAngle	render/camera.cpp	/^float Camera::GetHorizontalAngle() const$/;"	f	class:Camera	signature:() const
Camera::GetHorizontalAngle	render/camera.h	/^	float GetHorizontalAngle() const;$/;"	p	class:Camera	access:public	signature:() const
Camera::GetPosition	render/camera.cpp	/^const cml::vector3f& Camera::GetPosition() const$/;"	f	class:Camera	signature:() const
Camera::GetPosition	render/camera.h	/^	const cml::vector3f& GetPosition() const;$/;"	p	class:Camera	access:public	signature:() const
Camera::GetProjection	render/camera.cpp	/^const cml::matrix44f_c& Camera::GetProjection()$/;"	f	class:Camera	signature:()
Camera::GetProjection	render/camera.h	/^	const cml::matrix44f_c& GetProjection();$/;"	p	class:Camera	access:public	signature:()
Camera::GetVerticalAngle	render/camera.cpp	/^float Camera::GetVerticalAngle() const$/;"	f	class:Camera	signature:() const
Camera::GetVerticalAngle	render/camera.h	/^	float GetVerticalAngle() const;$/;"	p	class:Camera	access:public	signature:() const
Camera::GetView	render/camera.cpp	/^const cml::matrix44f_c& Camera::GetView()$/;"	f	class:Camera	signature:()
Camera::GetView	render/camera.h	/^	const cml::matrix44f_c& GetView();$/;"	p	class:Camera	access:public	signature:()
Camera::Matrix	render/camera.cpp	/^cml::matrix44f_c Camera::Matrix()$/;"	f	class:Camera	signature:()
Camera::Matrix	render/camera.h	/^	cml::matrix44f_c Matrix();$/;"	p	class:Camera	access:public	signature:()
Camera::OffsetAngle	render/camera.cpp	/^void Camera::OffsetAngle( float hor, float ver )$/;"	f	class:Camera	signature:( float hor, float ver )
Camera::OffsetAngle	render/camera.h	/^	void OffsetAngle( float hor, float ver );$/;"	p	class:Camera	access:public	signature:( float hor, float ver )
Camera::OffsetPosition	render/camera.cpp	/^void Camera::OffsetPosition( const cml::vector3f& offsetPosition )$/;"	f	class:Camera	signature:( const cml::vector3f& offsetPosition )
Camera::OffsetPosition	render/camera.h	/^	void OffsetPosition( const cml::vector3f& offsetPosition );$/;"	p	class:Camera	access:public	signature:( const cml::vector3f& offsetPosition )
Camera::Right	render/camera.cpp	/^cml::vector3f Camera::Right() const$/;"	f	class:Camera	signature:() const
Camera::Right	render/camera.h	/^	cml::vector3f Right() const;$/;"	p	class:Camera	access:public	signature:() const
Camera::SetAspect	render/camera.cpp	/^void Camera::SetAspect( float a )$/;"	f	class:Camera	signature:( float a )
Camera::SetAspect	render/camera.h	/^	void SetAspect( float a );$/;"	p	class:Camera	access:public	signature:( float a )
Camera::SetHorizontalAngle	render/camera.h	/^	void SetHorizontalAngle( float angle )$/;"	f	class:Camera	access:public	signature:( float angle )
Camera::SetPosition	render/camera.cpp	/^void Camera::SetPosition( const cml::vector3f& pos )$/;"	f	class:Camera	signature:( const cml::vector3f& pos )
Camera::SetPosition	render/camera.h	/^	void SetPosition( const cml::vector3f& pos );$/;"	p	class:Camera	access:public	signature:( const cml::vector3f& pos )
Camera::Up	render/camera.cpp	/^cml::vector3f Camera::Up() const$/;"	f	class:Camera	signature:() const
Camera::Up	render/camera.h	/^	cml::vector3f Up() const;$/;"	p	class:Camera	access:public	signature:() const
Camera::aspect	render/camera.h	/^	float aspect;	\/\/ aspect Ratio$/;"	m	class:Camera	access:private
Camera::farClip	render/camera.h	/^	float farClip;	\/\/ Far clipping plane distance$/;"	m	class:Camera	access:private
Camera::fieldOfView	render/camera.h	/^	float fieldOfView;		\/\/ Field of View Angle$/;"	m	class:Camera	access:private
Camera::horizontalAngle	render/camera.h	/^	float horizontalAngle;$/;"	m	class:Camera	access:private
Camera::nearClip	render/camera.h	/^	float nearClip;	\/\/ Near clipping plane distance$/;"	m	class:Camera	access:private
Camera::position	render/camera.h	/^	cml::vector3f position;$/;"	m	class:Camera	access:private
Camera::projection	render/camera.h	/^	cml::matrix44f_c view, projection;$/;"	m	class:Camera	access:private
Camera::verticalAngle	render/camera.h	/^	float verticalAngle;$/;"	m	class:Camera	access:private
Camera::view	render/camera.h	/^	cml::matrix44f_c view, projection;$/;"	m	class:Camera	access:private
CanMove	map/map.h	/^	bool CanMove( float x, float y, float blocksize = 2.f )$/;"	f	class:Map	access:public	signature:( float x, float y, float blocksize = 2.f )
CancelSearch	ailib/stlastar.h	/^	void CancelSearch()$/;"	f	class:AStarSearch	access:public	signature:()
Canvas	texgen/canvas.cpp	/^Canvas::Canvas( int w, int h )$/;"	f	class:Canvas	signature:( int w, int h )
Canvas	texgen/canvas.h	/^	Canvas( int w, int h );$/;"	p	class:Canvas	access:public	signature:( int w, int h )
Canvas	texgen/canvas.h	/^class Canvas$/;"	c
Canvas::Add	texgen/canvas.h	/^	void Add( Canvas& other )$/;"	f	class:Canvas	access:public	signature:( Canvas& other )
Canvas::Canvas	texgen/canvas.cpp	/^Canvas::Canvas( int w, int h )$/;"	f	class:Canvas	signature:( int w, int h )
Canvas::Canvas	texgen/canvas.h	/^	Canvas( int w, int h );$/;"	p	class:Canvas	access:public	signature:( int w, int h )
Canvas::Fill	texgen/canvas.cpp	/^void Canvas::Fill( Color c )$/;"	f	class:Canvas	signature:( Color c )
Canvas::Fill	texgen/canvas.h	/^	void Fill( Color c );$/;"	p	class:Canvas	access:public	signature:( Color c )
Canvas::GenClouds	texgen/canvas.h	/^	void GenClouds( RNG& rng, double Ldiv = 3, double zoom = 64, uint8_t H = 169, uint8_t S = 255, int base = 192 )$/;"	f	class:Canvas	access:public	signature:( RNG& rng, double Ldiv = 3, double zoom = 64, uint8_t H = 169, uint8_t S = 255, int base = 192 )
Canvas::GenPixelTurbulence	texgen/canvas.h	/^	void GenPixelTurbulence( RNG& rng, int light = 64, int rel = 32 )$/;"	f	class:Canvas	access:public	signature:( RNG& rng, int light = 64, int rel = 32 )
Canvas::GenTurbulence	texgen/canvas.h	/^	void GenTurbulence( RNG& rng, double zoom = 64, double base = 128, bool smooth = true )$/;"	f	class:Canvas	access:public	signature:( RNG& rng, double zoom = 64, double base = 128, bool smooth = true )
Canvas::Get	texgen/canvas.h	/^	Color Get( int x, int y )$/;"	f	class:Canvas	access:public	signature:( int x, int y )
Canvas::Height	texgen/canvas.h	/^	int Height()$/;"	f	class:Canvas	access:public	signature:()
Canvas::MakeNoise	texgen/canvas.h	/^	void MakeNoise( Matrix2D<float>& noise, RNG& rng, int w, int h )$/;"	f	class:Canvas	access:public	signature:( Matrix2D<float>& noise, RNG& rng, int w, int h )
Canvas::Plot	texgen/canvas.cpp	/^void Canvas::Plot( int x, int y, Color c )$/;"	f	class:Canvas	signature:( int x, int y, Color c )
Canvas::Plot	texgen/canvas.h	/^	void Plot( int x, int y, Color c );$/;"	p	class:Canvas	access:public	signature:( int x, int y, Color c )
Canvas::Raw	texgen/canvas.cpp	/^const void* Canvas::Raw()$/;"	f	class:Canvas	signature:()
Canvas::Raw	texgen/canvas.h	/^	const void* Raw();$/;"	p	class:Canvas	access:public	signature:()
Canvas::SmoothNoise	texgen/canvas.h	/^	double SmoothNoise( Matrix2D<float>& noise, double x, double y )$/;"	f	class:Canvas	access:public	signature:( Matrix2D<float>& noise, double x, double y )
Canvas::ToBitmap	texgen/canvas.h	/^	void ToBitmap( tdogl::Bitmap& bmp )$/;"	f	class:Canvas	access:public	signature:( tdogl::Bitmap& bmp )
Canvas::Turbulence	texgen/canvas.h	/^	double Turbulence( Matrix2D<float>& noise, double x, double y, double size, bool bifilter = true, double base = 128.0 )$/;"	f	class:Canvas	access:public	signature:( Matrix2D<float>& noise, double x, double y, double size, bool bifilter = true, double base = 128.0 )
Canvas::Width	texgen/canvas.h	/^	int Width()$/;"	f	class:Canvas	access:public	signature:()
Canvas::data	texgen/canvas.h	/^	Matrix2D<Color> data;$/;"	m	class:Canvas	access:private
Canvas::operator =	texgen/canvas.h	/^	Canvas& operator=( const Canvas& other )$/;"	f	class:Canvas	access:public	signature:( const Canvas& other )
CheckExtension	render/context.h	/^  virtual bool CheckExtension(const char*name) = 0;$/;"	p	class:Render::Context	access:protected	signature:(const char*name)
CheckExtension	render/sdlcontext.cpp	/^bool Context::CheckExtension(const char*name)$/;"	f	class:Render::SDL::Context	signature:(const char*name)
CheckExtension	render/sdlcontext.h	/^  bool CheckExtension(const char*name);$/;"	p	class:Render::SDL::Context	access:public	signature:(const char*name)
CheckHealth	entity/script/helpers.cpp	/^void CheckHealth( Actor* actor )$/;"	f	signature:( Actor* actor )
CheckHealth	entity/script/helpers.h	/^void CheckHealth( Actor* actor );$/;"	p	signature:( Actor* actor )
Cleanup	app/app.cpp	/^void App::Cleanup()$/;"	f	class:App	signature:()
Cleanup	app/app.h	/^	void Cleanup();$/;"	p	class:App	access:private	signature:()
Cleanup	app/sdlglapp.cpp	/^void SDLGLApp::Cleanup()$/;"	f	class:SDLGLApp	signature:()
Cleanup	app/sdlglapp.h	/^	virtual void Cleanup();$/;"	p	class:SDLGLApp	access:protected	signature:()
Cleanup	entity/entity.h	/^	void Cleanup()$/;"	f	class:Entity	access:public	signature:()
Cleanup	physics/physics.cpp	/^void Physics::Cleanup()$/;"	f	class:Physics	signature:()
Cleanup	physics/physics.h	/^	void Cleanup();$/;"	p	class:Physics	access:public	signature:()
Cleanup	render/sdlcontext.h	/^  void Cleanup()$/;"	f	class:Render::SDL::Context	access:public	signature:()
Clear	core/dynamicarray.h	/^	void Clear()$/;"	f	class:DynamicArray	access:public	signature:()
Clear	render/context.h	/^  PFNGLCLEARPROC Clear;$/;"	m	class:Render::Context	access:public
ClearChildren	entity/entityfactory.h	/^	void ClearChildren(Entity* e);$/;"	p	class:EntityFactory	access:public	signature:(Entity* e)
ClearColor	render/context.h	/^  PFNGLCLEARCOLORPROC ClearColor;$/;"	m	class:Render::Context	access:public
ClearVelocity	entity/entity.h	/^	void ClearVelocity()$/;"	f	class:Entity	access:public	signature:()
CollisionEnter	entity/entity.h	/^	void CollisionEnter( Entity* other )$/;"	f	class:Entity	access:public	signature:( Entity* other )
CollisionExit	entity/entity.h	/^	void CollisionExit( Entity* other )$/;"	f	class:Entity	access:public	signature:( Entity* other )
CollisionLayer	physics/layers.h	/^enum CollisionLayer$/;"	g
Color	texgen/color.h	/^	Color( uint8_t r=0, uint8_t g=0, uint8_t b=0, uint8_t a = 255 )$/;"	f	class:Color	access:public	signature:( uint8_t r=0, uint8_t g=0, uint8_t b=0, uint8_t a = 255 )
Color	texgen/color.h	/^class Color$/;"	c
Color::Color	texgen/color.h	/^	Color( uint8_t r=0, uint8_t g=0, uint8_t b=0, uint8_t a = 255 )$/;"	f	class:Color	access:public	signature:( uint8_t r=0, uint8_t g=0, uint8_t b=0, uint8_t a = 255 )
Color::data	texgen/color.h	/^	uint8_t data[4];$/;"	m	class:Color	access:private
Color::operator +	texgen/color.h	/^	Color operator+( Color& other )$/;"	f	class:Color	access:public	signature:( Color& other )
Color::operator []	texgen/color.h	/^	uint8_t& operator[](size_t index)$/;"	f	class:Color	access:public	signature:(size_t index)
Cols	core/matrix2d.h	/^	int Cols() { return cols; }$/;"	f	class:Matrix2D	access:public	signature:()
Compile	render/program.h	/^	void Compile( Render::Context* gl )$/;"	f	class:Program	access:public	signature:( Render::Context* gl )
CompileShader	render/context.h	/^  PFNGLCOMPILESHADERPROC CompileShader;$/;"	m	class:Render::Context	access:public
ComputeProjection	render/camera.cpp	/^void Camera::ComputeProjection()$/;"	f	class:Camera	signature:()
ComputeProjection	render/camera.h	/^	void ComputeProjection();$/;"	p	class:Camera	access:private	signature:()
ComputeView	render/camera.cpp	/^void Camera::ComputeView()$/;"	f	class:Camera	signature:()
ComputeView	render/camera.h	/^	void ComputeView();$/;"	p	class:Camera	access:private	signature:()
ConfigAttrib	render/mesh.h	/^	void ConfigAttrib( Render::Context* gl, GLuint location, size_t num_floats, size_t stride = 0, size_t offset = 0, int attrdivisor = 0 \/* 0 => NO INSTANCING *\/ )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl, GLuint location, size_t num_floats, size_t stride = 0, size_t offset = 0, int attrdivisor = 0 )
ConfigAttrib4fv	render/mesh.h	/^	void ConfigAttrib4fv( Render::Context* gl, GLuint location, int attrdivisor = 0 )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl, GLuint location, int attrdivisor = 0 )
ConfigXYZUV_INST	render/mesh.h	/^	void ConfigXYZUV_INST( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
ConfigXY_UV	render/mesh.h	/^	void ConfigXY_UV( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
ConstructDoors	map/mapgen.cpp	/^Map ConstructDoors( Map map )$/;"	f	namespace:mapgen	signature:( Map map )
ConstructRoomMap	map/mapgen.cpp	/^Map ConstructRoomMap( Map map, DynamicArray<Room>& rooms )$/;"	f	namespace:mapgen	signature:( Map map, DynamicArray<Room>& rooms )
ConstructRoomMap	map/mapgen.h	/^Map ConstructRoomMap( Map map, DynamicArray<Room>& rooms );$/;"	p	namespace:mapgen	signature:( Map map, DynamicArray<Room>& rooms )
ContactListener	physics/contactlistener.h	/^class ContactListener : public b2ContactListener$/;"	c	inherits:b2ContactListener
ContactListener::BeginContact	physics/contactlistener.cpp	/^void ContactListener::BeginContact( b2Contact* contact )$/;"	f	class:ContactListener	signature:( b2Contact* contact )
ContactListener::BeginContact	physics/contactlistener.h	/^	void BeginContact( b2Contact* contact );$/;"	p	class:ContactListener	access:private	signature:( b2Contact* contact )
ContactListener::EndContact	physics/contactlistener.cpp	/^void ContactListener::EndContact( b2Contact* contact )$/;"	f	class:ContactListener	signature:( b2Contact* contact )
ContactListener::EndContact	physics/contactlistener.h	/^	void EndContact( b2Contact* contact );$/;"	p	class:ContactListener	access:private	signature:( b2Contact* contact )
Context	render/Texture.h	/^    	typedef Render::Context Context;$/;"	t	class:tdogl::Texture	access:private
Context	render/context.h	/^  Context( Render::Context::Profile prof )$/;"	f	class:Render::Context	access:public	signature:( Render::Context::Profile prof )
Context	render/context.h	/^class Context {$/;"	c	namespace:Render
Context	render/sdlcontext.h	/^  Context( SDL_GLContext c, Render::Context::Profile prof ) :$/;"	f	class:Render::SDL::Context	access:public	signature:( SDL_GLContext c, Render::Context::Profile prof )
Context	render/sdlcontext.h	/^class Context : public Render::Context {$/;"	c	namespace:Render::SDL	inherits:Render::Context
ConverterFuncForFormats	render/Bitmap.cpp	/^static FormatConverterFunc ConverterFuncForFormats(Bitmap::Format srcFormat, Bitmap::Format destFormat){$/;"	f	file:	signature:(Bitmap::Format srcFormat, Bitmap::Format destFormat)
Core	render/context.h	/^    Core,$/;"	m	class:Render::Context::Profile	access:private
CreateBulletBody	physics/physics.cpp	/^b2Body* Physics::CreateBulletBody( float x, float y, CollisionLayer category, uint16_t mask )$/;"	f	class:Physics	signature:( float x, float y, CollisionLayer category, uint16_t mask )
CreateBulletBody	physics/physics.h	/^	b2Body* CreateBulletBody( float x, float y, CollisionLayer category, uint16_t mask );$/;"	p	class:Physics	access:public	signature:( float x, float y, CollisionLayer category, uint16_t mask )
CreateProgram	render/context.h	/^  PFNGLCREATEPROGRAMPROC CreateProgram;$/;"	m	class:Render::Context	access:public
CreateShader	render/context.h	/^  PFNGLCREATESHADERPROC CreateShader;$/;"	m	class:Render::Context	access:public
CreateSphereBody	physics/physics.cpp	/^b2Body* Physics::CreateSphereBody( float x, float y, CollisionLayer category, uint16_t mask )$/;"	f	class:Physics	signature:( float x, float y, CollisionLayer category, uint16_t mask )
CreateSphereBody	physics/physics.h	/^	b2Body* CreateSphereBody( float x, float y, CollisionLayer category = CollisionLayer::ENEMY, uint16_t mask = MOB_MASK );$/;"	p	class:Physics	access:public	signature:( float x, float y, CollisionLayer category = CollisionLayer::ENEMY, uint16_t mask = MOB_MASK )
CullFace	render/context.h	/^  PFNGLCULLFACEPROC CullFace;$/;"	m	class:Render::Context	access:public
CurrentFrame	render/sprite3d.h	/^	const cml::vector2f& CurrentFrame()$/;"	f	class:Sprite3D	access:public	signature:()
DISPATCH_SUCC	ailib/mapsearchnode.h	43;"	d
Data	render/animation.h	/^	struct Data$/;"	s	class:Animation	access:public
Debug	ailib/fsa.h	/^	void Debug()$/;"	f	class:FixedSizeAllocator	access:public	signature:()
Debug	core/matrix2d.h	/^	void Debug()$/;"	f	class:Matrix2D	access:public	signature:()
Debug	map/map.h	/^	void Debug()$/;"	f	class:Map	access:public	signature:()
Debug	map/mapdata.h	/^	void Debug()$/;"	f	struct:mapgen::Room	access:public	signature:()
DebugTransformController	entity/controller/debugtransformcontroller.h	/^class DebugTransformController : public EntityController {$/;"	c	inherits:EntityController
DebugTransformController::Step	entity/controller/debugtransformcontroller.h	/^	void Step( Entity* e, uint32_t delta )$/;"	f	class:DebugTransformController	access:public	signature:( Entity* e, uint32_t delta )
DebugTransformController::time	entity/controller/debugtransformcontroller.h	/^	uint32_t time = 0;$/;"	m	class:DebugTransformController	access:public
Decorate	map/mapgen.cpp	/^Map Decorate( Map map )$/;"	f	namespace:mapgen	signature:( Map map )
Decorate	map/mapgen.h	/^Map Decorate( Map map );$/;"	p	namespace:mapgen	signature:( Map map )
DeleteBuffers	render/context.h	/^  PFNGLDELETEBUFFERSPROC DeleteBuffers;$/;"	m	class:Render::Context	access:public
DeleteProgram	render/context.h	/^  PFNGLDELETEPROGRAMPROC DeleteProgram;$/;"	m	class:Render::Context	access:public
DeleteShader	render/context.h	/^  PFNGLDELETESHADERPROC DeleteShader;$/;"	m	class:Render::Context	access:public
DeleteTextures	render/context.h	/^  PFNGLDELETETEXTURESPROC DeleteTextures;$/;"	m	class:Render::Context	access:public
DeleteVertexArrays	render/context.h	/^  PFNGLDELETEVERTEXARRAYSPROC DeleteVertexArrays;$/;"	m	class:Render::Context	access:public
DepthFunc	render/context.h	/^  PFNGLDEPTHFUNCPROC DepthFunc;$/;"	m	class:Render::Context	access:public
DetachShader	render/context.h	/^  PFNGLDETACHSHADERPROC DetachShader;$/;"	m	class:Render::Context	access:public
Die	entity/entity.h	/^	void Die()$/;"	f	class:Entity	access:public	signature:()
Disable	render/context.h	/^  PFNGLDISABLEPROC Disable;$/;"	m	class:Render::Context	access:public
DisableVertexAttribArray	render/context.h	/^  PFNGLDISABLEVERTEXATTRIBARRAYPROC DisableVertexAttribArray;$/;"	m	class:Render::Context	access:public
Dispose	render/mesh.h	/^	void Dispose( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
Dispose	render/program.h	/^	void Dispose( Render::Context* gl )$/;"	f	class:Program	access:public	signature:( Render::Context* gl )
Dispose	render/renderer.h	/^	void Dispose()$/;"	f	class:Renderer	access:public	signature:()
Dispose	render/sprite3d.h	/^	void Dispose( Render::Context* gl )$/;"	f	class:Sprite3D	access:public	signature:( Render::Context* gl )
DoDropItem	entity/script/helpers.cpp	/^void DoDropItem( Actor* actor, RNG& rng, EntityFactory* entityfactory )$/;"	f	signature:( Actor* actor, RNG& rng, EntityFactory* entityfactory )
DoDropItem	entity/script/helpers.h	/^void DoDropItem( Actor* actor, RNG& rng, EntityFactory* entityfactory );$/;"	p	signature:( Actor* actor, RNG& rng, EntityFactory* entityfactory )
DoKeepDistanceAndShoot	entity/script/helpers.cpp	/^bool DoKeepDistanceAndShoot( Mob* mob, Player* player, uint32_t delta )$/;"	f	signature:( Mob* mob, Player* player, uint32_t delta )
DoKeepDistanceAndShoot	entity/script/helpers.h	/^bool DoKeepDistanceAndShoot( Mob* mob, Player* playerpos, uint32_t delta );$/;"	p	signature:( Mob* mob, Player* playerpos, uint32_t delta )
DoLogicAngleAdd	entity/script/helpers.cpp	/^void DoLogicAngleAdd( Actor* actor, float angle )$/;"	f	signature:( Actor* actor, float angle )
DoLogicAngleAdd	entity/script/helpers.h	/^void DoLogicAngleAdd( Actor* actor, float angle );$/;"	p	signature:( Actor* actor, float angle )
DoMove	entity/script/helpers.cpp	/^void DoMove( Actor* actor, cml::vector3f dir, float speed )$/;"	f	signature:( Actor* actor, cml::vector3f dir, float speed )
DoMove	entity/script/helpers.h	/^void DoMove( Actor* actor, cml::vector3f dir, float speed );$/;"	p	signature:( Actor* actor, cml::vector3f dir, float speed )
DoSensePlayer	entity/script/helpers.cpp	/^void DoSensePlayer( Mob* actor, Player* player )$/;"	f	signature:( Mob* actor, Player* player )
DoSensePlayer	entity/script/helpers.h	/^void DoSensePlayer( Mob* actor, Player* player );$/;"	p	signature:( Mob* actor, Player* player )
DoShoot	entity/script/helpers.cpp	/^bool DoShoot( Weapon* wp, bool shoot_key_pressed, uint32_t delta )$/;"	f	signature:( Weapon* wp, bool shoot_key_pressed, uint32_t delta )
DoShoot	entity/script/helpers.h	/^bool DoShoot( Weapon* wp, bool shoot_key_pressed, uint32_t delta );$/;"	p	signature:( Weapon* wp, bool shoot_key_pressed, uint32_t delta )
DrawArrays	render/context.h	/^  PFNGLDRAWARRAYSPROC DrawArrays;$/;"	m	class:Render::Context	access:public
DrawArraysInstanced	render/context.h	/^  PFNGLDRAWARRAYSINSTANCEDPROC DrawArraysInstanced;$/;"	m	class:Render::Context	access:public
DynamicArray	core/dynamicarray.h	/^	DynamicArray( size_t initial_size = INITIAL_SIZE )$/;"	f	class:DynamicArray	access:public	signature:( size_t initial_size = INITIAL_SIZE )
DynamicArray	core/dynamicarray.h	/^class DynamicArray$/;"	c
DynamicArray::Add	core/dynamicarray.h	/^	void Add( T item )$/;"	f	class:DynamicArray	access:public	signature:( T item )
DynamicArray::Back	core/dynamicarray.h	/^	T& Back()$/;"	f	class:DynamicArray	access:public	signature:()
DynamicArray::Clear	core/dynamicarray.h	/^	void Clear()$/;"	f	class:DynamicArray	access:public	signature:()
DynamicArray::DynamicArray	core/dynamicarray.h	/^	DynamicArray( size_t initial_size = INITIAL_SIZE )$/;"	f	class:DynamicArray	access:public	signature:( size_t initial_size = INITIAL_SIZE )
DynamicArray::GetRawData	core/dynamicarray.h	/^	T* GetRawData()$/;"	f	class:DynamicArray	access:public	signature:()
DynamicArray::INITIAL_SIZE	core/dynamicarray.h	/^	static const size_t INITIAL_SIZE = 20;$/;"	m	class:DynamicArray	access:private
DynamicArray::IsEmpty	core/dynamicarray.h	/^	bool IsEmpty()$/;"	f	class:DynamicArray	access:public	signature:()
DynamicArray::REALLOC_STEP	core/dynamicarray.h	/^	static const size_t REALLOC_STEP = 5;$/;"	m	class:DynamicArray	access:private
DynamicArray::Realloc	core/dynamicarray.h	/^	void Realloc( size_t realloc_step = REALLOC_STEP )$/;"	f	class:DynamicArray	access:private	signature:( size_t realloc_step = REALLOC_STEP )
DynamicArray::RemoveLast	core/dynamicarray.h	/^	void RemoveLast()$/;"	f	class:DynamicArray	access:public	signature:()
DynamicArray::Size	core/dynamicarray.h	/^	size_t Size()$/;"	f	class:DynamicArray	access:public	signature:()
DynamicArray::capacity	core/dynamicarray.h	/^	size_t capacity;$/;"	m	class:DynamicArray	access:private
DynamicArray::data	core/dynamicarray.h	/^	T* data;$/;"	m	class:DynamicArray	access:private
DynamicArray::operator []	core/dynamicarray.h	/^	T& operator[]( size_t index )$/;"	f	class:DynamicArray	access:public	signature:( size_t index )
DynamicArray::size	core/dynamicarray.h	/^	size_t size = 0;$/;"	m	class:DynamicArray	access:private
DynamicArray::~DynamicArray	core/dynamicarray.h	/^	~DynamicArray( )$/;"	f	class:DynamicArray	access:public	signature:( )
EBULLET_MASK	physics/physics.h	/^	static const uint16_t EBULLET_MASK = CollisionLayer::MAP | CollisionLayer::PLAYER; \/\/ | CollisionLayer::ALLY$/;"	m	class:Physics	access:public
ENEMY	physics/layers.h	/^	ENEMY =			0x0010,$/;"	e	enum:CollisionLayer
ENEMY_BULLET	physics/layers.h	/^	ENEMY_BULLET =	0x0008,$/;"	e	enum:CollisionLayer
Enable	render/context.h	/^  PFNGLENABLEPROC Enable;$/;"	m	class:Render::Context	access:public
EnableVertexAttribArray	render/context.h	/^  PFNGLENABLEVERTEXATTRIBARRAYPROC EnableVertexAttribArray;$/;"	m	class:Render::Context	access:public
EndContact	physics/contactlistener.cpp	/^void ContactListener::EndContact( b2Contact* contact )$/;"	f	class:ContactListener	signature:( b2Contact* contact )
EndContact	physics/contactlistener.h	/^	void EndContact( b2Contact* contact );$/;"	p	class:ContactListener	access:private	signature:( b2Contact* contact )
EnsureMemoryFreed	ailib/stlastar.h	/^	void EnsureMemoryFreed()$/;"	f	class:AStarSearch	access:public	signature:()
Entity	entity/entity.h	/^	Entity()$/;"	f	class:Entity	access:public	signature:()
Entity	entity/entity.h	/^class Entity$/;"	c
Entity::BULLET	entity/entity.h	/^		BULLET,$/;"	e	enum:Entity::Type
Entity::Cleanup	entity/entity.h	/^	void Cleanup()$/;"	f	class:Entity	access:public	signature:()
Entity::ClearVelocity	entity/entity.h	/^	void ClearVelocity()$/;"	f	class:Entity	access:public	signature:()
Entity::CollisionEnter	entity/entity.h	/^	void CollisionEnter( Entity* other )$/;"	f	class:Entity	access:public	signature:( Entity* other )
Entity::CollisionExit	entity/entity.h	/^	void CollisionExit( Entity* other )$/;"	f	class:Entity	access:public	signature:( Entity* other )
Entity::Die	entity/entity.h	/^	void Die()$/;"	f	class:Entity	access:public	signature:()
Entity::Entity	entity/entity.h	/^	Entity()$/;"	f	class:Entity	access:public	signature:()
Entity::GetAngleY	entity/entity.h	/^	float GetAngleY()$/;"	f	class:Entity	access:public	signature:()
Entity::GetPhysicBody	entity/entity.h	/^	b2Body* GetPhysicBody()$/;"	f	class:Entity	access:public	signature:()
Entity::GetQuadAngleY	entity/entity.h	/^	float GetQuadAngleY()$/;"	f	class:Entity	access:public	signature:()
Entity::GetSprite	entity/entity.h	/^	Sprite3D* GetSprite()$/;"	f	class:Entity	access:public	signature:()
Entity::GetTransform	entity/entity.h	/^	Transform& GetTransform()$/;"	f	class:Entity	access:public	signature:()
Entity::GetType	entity/entity.h	/^	Entity::Type GetType()$/;"	f	class:Entity	access:public	signature:()
Entity::IsAlive	entity/entity.h	/^	bool IsAlive()$/;"	f	class:Entity	access:public	signature:()
Entity::MOB	entity/entity.h	/^		MOB,$/;"	e	enum:Entity::Type
Entity::Model	entity/entity.h	/^	cml::matrix44f_c Model()$/;"	f	class:Entity	access:public	signature:()
Entity::OffsetRotationY	entity/entity.h	/^	void OffsetRotationY( float delta_angle )$/;"	f	class:Entity	access:public	signature:( float delta_angle )
Entity::PICKUP	entity/entity.h	/^		PICKUP$/;"	e	enum:Entity::Type
Entity::PLAYER	entity/entity.h	/^		PLAYER,$/;"	e	enum:Entity::Type
Entity::PhysicStep	entity/entity.h	/^	void PhysicStep()$/;"	f	class:Entity	access:public	signature:()
Entity::Prepare	entity/entity.h	/^	void Prepare( Sprite3D* sprite )$/;"	f	class:Entity	access:public	signature:( Sprite3D* sprite )
Entity::SetAngleY	entity/entity.h	/^	void SetAngleY( float angle )$/;"	f	class:Entity	access:public	signature:( float angle )
Entity::SetController	entity/entity.cpp	/^void Entity::SetController( EntityController* controller )$/;"	f	class:Entity	signature:( EntityController* controller )
Entity::SetController	entity/entity.h	/^	void SetController( EntityController* controller );$/;"	p	class:Entity	access:public	signature:( EntityController* controller )
Entity::SetLogicAngleY	entity/entity.h	/^	void SetLogicAngleY( float angle )$/;"	f	class:Entity	access:public	signature:( float angle )
Entity::SetPhysicBody	entity/entity.h	/^	void SetPhysicBody( b2Body* body )$/;"	f	class:Entity	access:public	signature:( b2Body* body )
Entity::SetQuadAngleY	entity/entity.h	/^	void SetQuadAngleY( float angle )$/;"	f	class:Entity	access:public	signature:( float angle )
Entity::SetSprite	entity/entity.h	/^	void SetSprite( Sprite3D* sprite )$/;"	f	class:Entity	access:public	signature:( Sprite3D* sprite )
Entity::SetType	entity/entity.h	/^	void SetType( Entity::Type t )$/;"	f	class:Entity	access:public	signature:( Entity::Type t )
Entity::Step	entity/entity.cpp	/^void Entity::Step( uint32_t delta )$/;"	f	class:Entity	signature:( uint32_t delta )
Entity::Step	entity/entity.h	/^	void Step( uint32_t delta );$/;"	p	class:Entity	access:public	signature:( uint32_t delta )
Entity::Type	entity/entity.h	/^	enum Type$/;"	g	class:Entity	access:public
Entity::TypeString	entity/entity.h	/^	const char* TypeString()$/;"	f	class:Entity	access:public	signature:()
Entity::body	entity/entity.h	/^	b2Body* body;$/;"	m	class:Entity	access:protected
Entity::controller	entity/entity.h	/^	EntityController* controller;$/;"	m	class:Entity	access:public
Entity::isAlive	entity/entity.h	/^	bool isAlive;$/;"	m	class:Entity	access:protected
Entity::sprite	entity/entity.h	/^	Sprite3D* sprite;$/;"	m	class:Entity	access:protected
Entity::transform	entity/entity.h	/^	Transform transform;$/;"	m	class:Entity	access:public
Entity::type	entity/entity.h	/^	Entity::Type type;$/;"	m	class:Entity	access:protected
EntityController	entity/controller/entitycontroller.h	/^class EntityController$/;"	c
EntityController::Prepare	entity/controller/entitycontroller.cpp	/^void EntityController::Prepare( EntityFactory *ef, Player* player )$/;"	f	class:EntityController	signature:( EntityFactory *ef, Player* player )
EntityController::Prepare	entity/controller/entitycontroller.h	/^	static void Prepare( EntityFactory* entityfactory, Player* player );$/;"	p	class:EntityController	access:public	signature:( EntityFactory* entityfactory, Player* player )
EntityController::Step	entity/controller/entitycontroller.h	/^	virtual void Step( Entity* e, uint32_t delta ) {}$/;"	f	class:EntityController	access:public	signature:( Entity* e, uint32_t delta )
EntityController::entityfactory	entity/controller/entitycontroller.cpp	/^EntityFactory* EntityController::entityfactory = NULL;$/;"	m	class:EntityController	file:
EntityController::entityfactory	entity/controller/entitycontroller.h	/^	static EntityFactory* entityfactory;$/;"	m	class:EntityController	access:protected
EntityController::player	entity/controller/entitycontroller.cpp	/^Player* EntityController::player = NULL;$/;"	m	class:EntityController	file:
EntityController::player	entity/controller/entitycontroller.h	/^	static Player* player;$/;"	m	class:EntityController	access:protected
EntityFactory	entity/entityfactory.cpp	/^EntityFactory::EntityFactory ()$/;"	f	class:EntityFactory	signature:()
EntityFactory	entity/entityfactory.h	/^	EntityFactory ();$/;"	p	class:EntityFactory	access:public	signature:()
EntityFactory	entity/entityfactory.h	/^class EntityFactory {$/;"	c
EntityFactory::AllocEntity	entity/entityfactory.cpp	/^EntityType* EntityFactory::AllocEntity()$/;"	f	class:EntityFactory	signature:()
EntityFactory::AllocEntity	entity/entityfactory.h	/^	EntityType* AllocEntity();$/;"	p	class:EntityFactory	access:public	signature:()
EntityFactory::ClearChildren	entity/entityfactory.h	/^	void ClearChildren(Entity* e);$/;"	p	class:EntityFactory	access:public	signature:(Entity* e)
EntityFactory::EntityFactory	entity/entityfactory.cpp	/^EntityFactory::EntityFactory ()$/;"	f	class:EntityFactory	signature:()
EntityFactory::EntityFactory	entity/entityfactory.h	/^	EntityFactory ();$/;"	p	class:EntityFactory	access:public	signature:()
EntityFactory::Prepare	entity/entityfactory.cpp	/^void EntityFactory::Prepare( Physics* physics, Assets* assets, DynamicArray<Entity*>* actorlist, DynamicArray<Entity*>* bulletlist, Transform* sceneRoot )$/;"	f	class:EntityFactory	signature:( Physics* physics, Assets* assets, DynamicArray<Entity*>* actorlist, DynamicArray<Entity*>* bulletlist, Transform* sceneRoot )
EntityFactory::Prepare	entity/entityfactory.h	/^	void Prepare($/;"	p	class:EntityFactory	access:public	signature:( Physics* physics, Assets* assets, DynamicArray<Entity*>* actorlist, DynamicArray<Entity*>* bulletlist, Transform* sceneRoot )
EntityFactory::RenderRest	entity/entityfactory.cpp	/^void EntityFactory::RenderRest( Renderer& renderer )$/;"	f	class:EntityFactory	signature:( Renderer& renderer )
EntityFactory::RenderRest	entity/entityfactory.h	/^	void RenderRest( Renderer& renderer );$/;"	p	class:EntityFactory	access:public	signature:( Renderer& renderer )
EntityFactory::SpawnBullet	entity/entityfactory.cpp	/^void EntityFactory::SpawnBullet( const cml::vector2f& pos, const cml::vector2f& dir, CollisionLayer col, uint16_t mask, Sprite3D* sprite, float time )$/;"	f	class:EntityFactory	signature:( const cml::vector2f& pos, const cml::vector2f& dir, CollisionLayer col, uint16_t mask, Sprite3D* sprite, float time )
EntityFactory::SpawnBullet	entity/entityfactory.h	/^	void SpawnBullet( const cml::vector2f& pos, const cml::vector2f& dir, CollisionLayer col, uint16_t mask, Sprite3D* sprite, float time );$/;"	p	class:EntityFactory	access:public	signature:( const cml::vector2f& pos, const cml::vector2f& dir, CollisionLayer col, uint16_t mask, Sprite3D* sprite, float time )
EntityFactory::SpawnEnemy	entity/entityfactory.cpp	/^Actor* EntityFactory::SpawnEnemy( float x, float y )$/;"	f	class:EntityFactory	signature:( float x, float y )
EntityFactory::SpawnEnemy	entity/entityfactory.h	/^	Actor* SpawnEnemy( float x, float y );$/;"	p	class:EntityFactory	access:public	signature:( float x, float y )
EntityFactory::SpawnEnemyBullet	entity/entityfactory.cpp	/^void EntityFactory::SpawnEnemyBullet( const cml::vector2f& pos, const cml::vector2f& dir, float time )$/;"	f	class:EntityFactory	signature:( const cml::vector2f& pos, const cml::vector2f& dir, float time )
EntityFactory::SpawnEnemyBullet	entity/entityfactory.h	/^	void SpawnEnemyBullet( const cml::vector2f& pos, const cml::vector2f& dir, float time );$/;"	p	class:EntityFactory	access:public	signature:( const cml::vector2f& pos, const cml::vector2f& dir, float time )
EntityFactory::SpawnPickup	entity/entityfactory.cpp	/^void EntityFactory::SpawnPickup( const cml::vector2f& pos )$/;"	f	class:EntityFactory	signature:( const cml::vector2f& pos )
EntityFactory::SpawnPickup	entity/entityfactory.h	/^	void SpawnPickup( const cml::vector2f& pos );$/;"	p	class:EntityFactory	access:public	signature:( const cml::vector2f& pos )
EntityFactory::SpawnPlayer	entity/entityfactory.cpp	/^Player* EntityFactory::SpawnPlayer( float x, float y ){$/;"	f	class:EntityFactory	signature:( float x, float y )
EntityFactory::SpawnPlayer	entity/entityfactory.h	/^	Player* SpawnPlayer( float x, float y );$/;"	p	class:EntityFactory	access:public	signature:( float x, float y )
EntityFactory::SpawnPlayerBullet	entity/entityfactory.cpp	/^void EntityFactory::SpawnPlayerBullet( cml::vector2f pos, cml::vector2f dir, float time )$/;"	f	class:EntityFactory	signature:( cml::vector2f pos, cml::vector2f dir, float time )
EntityFactory::SpawnPlayerBullet	entity/entityfactory.h	/^	void SpawnPlayerBullet( cml::vector2f pos, cml::vector2f dir, float time );$/;"	p	class:EntityFactory	access:public	signature:( cml::vector2f pos, cml::vector2f dir, float time )
EntityFactory::SpawnPlayerWeapon	entity/entityfactory.cpp	/^Entity* EntityFactory::SpawnPlayerWeapon(float x, float y)$/;"	f	class:EntityFactory	signature:(float x, float y)
EntityFactory::SpawnPlayerWeapon	entity/entityfactory.h	/^	Entity* SpawnPlayerWeapon( float x, float y );$/;"	p	class:EntityFactory	access:public	signature:( float x, float y )
EntityFactory::UpdateRest	entity/entityfactory.cpp	/^void EntityFactory::UpdateRest(uint32_t delta)$/;"	f	class:EntityFactory	signature:(uint32_t delta)
EntityFactory::UpdateRest	entity/entityfactory.h	/^	void UpdateRest( uint32_t delta );$/;"	p	class:EntityFactory	access:public	signature:( uint32_t delta )
EntityFactory::actorlist	entity/entityfactory.h	/^	DynamicArray<Entity*>* actorlist;$/;"	m	class:EntityFactory	access:private
EntityFactory::assets	entity/entityfactory.h	/^	Assets* assets;$/;"	m	class:EntityFactory	access:private
EntityFactory::bulletlist	entity/entityfactory.h	/^	DynamicArray<Entity*>* bulletlist;$/;"	m	class:EntityFactory	access:private
EntityFactory::physics	entity/entityfactory.h	/^	Physics* physics;$/;"	m	class:EntityFactory	access:private
EntityFactory::player	entity/entityfactory.h	/^	Player* player;$/;"	m	class:EntityFactory	access:private
EntityFactory::rest	entity/entityfactory.h	/^	DynamicArray<Entity*> rest;$/;"	m	class:EntityFactory	access:private
EntityFactory::sceneTree	entity/entityfactory.h	/^	Transform* sceneTree;$/;"	m	class:EntityFactory	access:private
EntityFactory::~EntityFactory	entity/entityfactory.cpp	/^EntityFactory::~EntityFactory ()$/;"	f	class:EntityFactory	signature:()
EntityFactory::~EntityFactory	entity/entityfactory.h	/^	virtual ~EntityFactory ();$/;"	p	class:EntityFactory	access:public	signature:()
Exec	app/sdlglapp.cpp	/^int SDLGLApp::Exec(int argc, char** argv)$/;"	f	class:SDLGLApp	signature:(int argc, char** argv)
Exec	app/sdlglapp.h	/^	int Exec(int argc, char** argv);$/;"	p	class:SDLGLApp	access:public	signature:(int argc, char** argv)
FAST_BITS	render/stb_image.h	989;"	d
FPS	core/fpscounter.h	/^	int FPS;$/;"	m	class:FPSCounter	access:private
FPSCounter	core/fpscounter.h	/^	FPSCounter()$/;"	f	class:FPSCounter	access:public	signature:()
FPSCounter	core/fpscounter.h	/^class FPSCounter$/;"	c
FPSCounter::FPS	core/fpscounter.h	/^	int FPS;$/;"	m	class:FPSCounter	access:private
FPSCounter::FPSCounter	core/fpscounter.h	/^	FPSCounter()$/;"	f	class:FPSCounter	access:public	signature:()
FPSCounter::GetFPS	core/fpscounter.h	/^	int GetFPS()$/;"	f	class:FPSCounter	access:public	signature:()
FPSCounter::Tick	core/fpscounter.h	/^	void Tick( T time )$/;"	f	class:FPSCounter	access:public	signature:( T time )
FPSCounter::frames	core/fpscounter.h	/^	int frames;$/;"	m	class:FPSCounter	access:private
FPSCounter::milis	core/fpscounter.h	/^	T milis;$/;"	m	class:FPSCounter	access:private
FRAGMENT	render/shader.h	/^	const static int FRAGMENT = 1;$/;"	m	class:Shader	access:public
FSA_DEFAULT_SIZE	ailib/fsa.h	/^		FSA_DEFAULT_SIZE = 100$/;"	e	enum:FixedSizeAllocator::__anon8
FSA_ELEMENT	ailib/fsa.h	/^	struct FSA_ELEMENT$/;"	s	class:FixedSizeAllocator	access:public
FSA_H	ailib/fsa.h	46;"	d
Faction	entity/actor.h	/^	enum Faction { GOOD, BAD, NEUTRAL };$/;"	g	class:Actor	access:public
FalloutSystem	entity/script/effectsystem.h	/^class FalloutSystem {$/;"	c
FalloutSystem::GetFalloutDamage	entity/script/effectsystem.h	/^	void GetFalloutDamage( Actor* actor )$/;"	f	class:FalloutSystem	access:private	signature:( Actor* actor )
FalloutSystem::Step	entity/script/effectsystem.h	/^	void Step( Entity* ent, uint32_t delta )$/;"	f	class:FalloutSystem	access:public	signature:( Entity* ent, uint32_t delta )
Fill	map/mapgen.cpp	/^void Fill( Map& map, Map::BlockType block )$/;"	f	namespace:mapgen	signature:( Map& map, Map::BlockType block )
Fill	map/mapgen.h	/^void Fill( Map& map );$/;"	p	namespace:mapgen	signature:( Map& map )
Fill	texgen/canvas.cpp	/^void Canvas::Fill( Color c )$/;"	f	class:Canvas	signature:( Color c )
Fill	texgen/canvas.h	/^	void Fill( Color c );$/;"	p	class:Canvas	access:public	signature:( Color c )
FixedSizeAllocator	ailib/fsa.h	/^	FixedSizeAllocator( unsigned int MaxElements = FSA_DEFAULT_SIZE ) :$/;"	f	class:FixedSizeAllocator	access:public	signature:( unsigned int MaxElements = FSA_DEFAULT_SIZE )
FixedSizeAllocator	ailib/fsa.h	/^template <class USER_TYPE> class FixedSizeAllocator$/;"	c
FixedSizeAllocator::Debug	ailib/fsa.h	/^	void Debug()$/;"	f	class:FixedSizeAllocator	access:public	signature:()
FixedSizeAllocator::FSA_DEFAULT_SIZE	ailib/fsa.h	/^		FSA_DEFAULT_SIZE = 100$/;"	e	enum:FixedSizeAllocator::__anon8
FixedSizeAllocator::FSA_ELEMENT	ailib/fsa.h	/^	struct FSA_ELEMENT$/;"	s	class:FixedSizeAllocator	access:public
FixedSizeAllocator::FSA_ELEMENT::UserType	ailib/fsa.h	/^		USER_TYPE UserType;$/;"	m	struct:FixedSizeAllocator::FSA_ELEMENT	access:public
FixedSizeAllocator::FSA_ELEMENT::pNext	ailib/fsa.h	/^		FSA_ELEMENT *pNext;$/;"	m	struct:FixedSizeAllocator::FSA_ELEMENT	access:public
FixedSizeAllocator::FSA_ELEMENT::pPrev	ailib/fsa.h	/^		FSA_ELEMENT *pPrev;$/;"	m	struct:FixedSizeAllocator::FSA_ELEMENT	access:public
FixedSizeAllocator::FixedSizeAllocator	ailib/fsa.h	/^	FixedSizeAllocator( unsigned int MaxElements = FSA_DEFAULT_SIZE ) :$/;"	f	class:FixedSizeAllocator	access:public	signature:( unsigned int MaxElements = FSA_DEFAULT_SIZE )
FixedSizeAllocator::GetFirst	ailib/fsa.h	/^	USER_TYPE *GetFirst()$/;"	f	class:FixedSizeAllocator	access:public	signature:()
FixedSizeAllocator::GetNext	ailib/fsa.h	/^	USER_TYPE *GetNext( USER_TYPE *node )$/;"	f	class:FixedSizeAllocator	access:public	signature:( USER_TYPE *node )
FixedSizeAllocator::alloc	ailib/fsa.h	/^	USER_TYPE *alloc()$/;"	f	class:FixedSizeAllocator	access:public	signature:()
FixedSizeAllocator::free	ailib/fsa.h	/^	void free( USER_TYPE *user_data )$/;"	f	class:FixedSizeAllocator	access:public	signature:( USER_TYPE *user_data )
FixedSizeAllocator::m_MaxElements	ailib/fsa.h	/^	unsigned int m_MaxElements;$/;"	m	class:FixedSizeAllocator	access:private
FixedSizeAllocator::m_pFirstFree	ailib/fsa.h	/^	FSA_ELEMENT *m_pFirstFree;$/;"	m	class:FixedSizeAllocator	access:private
FixedSizeAllocator::m_pFirstUsed	ailib/fsa.h	/^	FSA_ELEMENT *m_pFirstUsed;$/;"	m	class:FixedSizeAllocator	access:private
FixedSizeAllocator::m_pMemory	ailib/fsa.h	/^	FSA_ELEMENT *m_pMemory;$/;"	m	class:FixedSizeAllocator	access:private
FixedSizeAllocator::~FixedSizeAllocator	ailib/fsa.h	/^	~FixedSizeAllocator()$/;"	f	class:FixedSizeAllocator	access:public	signature:()
Flatten	map/mapgen.cpp	/^Map Flatten( Map map )$/;"	f	namespace:mapgen	signature:( Map map )
Flatten	map/mapgen.h	/^Map Flatten( Map map );$/;"	p	namespace:mapgen	signature:( Map map )
Font	render/font.h	/^class Font {$/;"	c
Font::Prepare	render/font.h	/^	void Prepare( Render::Context* gl, FT_Library& ft, const char* path, int height=48 )$/;"	f	class:Font	access:public	signature:( Render::Context* gl, FT_Library& ft, const char* path, int height=48 )
Font::SetSize	render/font.h	/^	void SetSize( int size )$/;"	f	class:Font	access:private	signature:( int size )
Font::Texture	render/font.h	/^	GLuint Texture() { return tex; }$/;"	f	class:Font	access:public	signature:()
Font::UpdateGPUQuads	render/font.h	/^	int UpdateGPUQuads( Render::Context* gl, const char* text, float x, float y, float sx, float sy )$/;"	f	class:Font	access:public	signature:( Render::Context* gl, const char* text, float x, float y, float sx, float sy )
Font::attribute_coord	render/font.h	/^	GLuint attribute_coord, uniform_tex;$/;"	m	class:Font	access:private
Font::c	render/font.h	/^	} c[128];$/;"	m	class:Font	typeref:struct:Font::character_info	access:private
Font::character_info	render/font.h	/^	struct character_info {$/;"	s	class:Font	access:private
Font::character_info::ax	render/font.h	/^		float ax; \/\/ advance.x$/;"	m	struct:Font::character_info	access:public
Font::character_info::ay	render/font.h	/^		float ay; \/\/ advance.y$/;"	m	struct:Font::character_info	access:public
Font::character_info::bh	render/font.h	/^		float bh; \/\/ bitmap.rows;$/;"	m	struct:Font::character_info	access:public
Font::character_info::bl	render/font.h	/^		float bl; \/\/ bitmap_left;$/;"	m	struct:Font::character_info	access:public
Font::character_info::bt	render/font.h	/^		float bt; \/\/ bitmap_top;$/;"	m	struct:Font::character_info	access:public
Font::character_info::bw	render/font.h	/^		float bw; \/\/ bitmap.width;$/;"	m	struct:Font::character_info	access:public
Font::character_info::tx	render/font.h	/^		float tx; \/\/ x offset of glyph in texture coordinates$/;"	m	struct:Font::character_info	access:public
Font::character_info::ty	render/font.h	/^		float ty; \/\/ y offset of glyph in texture coordinates$/;"	m	struct:Font::character_info	access:public
Font::face	render/font.h	/^	FT_Face face;$/;"	m	class:Font	access:private
Font::h	render/font.h	/^	int w, h;$/;"	m	class:Font	access:private
Font::tex	render/font.h	/^	GLuint tex;$/;"	m	class:Font	access:private
Font::uniform_tex	render/font.h	/^	GLuint attribute_coord, uniform_tex;$/;"	m	class:Font	access:private
Font::w	render/font.h	/^	int w, h;$/;"	m	class:Font	access:private
Format	render/Bitmap.h	/^        enum Format {$/;"	g	class:tdogl::Bitmap	access:public
FormatConverterFunc	render/Bitmap.cpp	/^typedef void(*FormatConverterFunc)(unsigned char*, unsigned char*);$/;"	t	file:
Format_Grayscale	render/Bitmap.h	/^            Format_Grayscale = 1, \/**< one channel: grayscale *\/$/;"	e	enum:tdogl::Bitmap::Format
Format_GrayscaleAlpha	render/Bitmap.h	/^            Format_GrayscaleAlpha = 2, \/**< two channels: grayscale and alpha *\/$/;"	e	enum:tdogl::Bitmap::Format
Format_RGB	render/Bitmap.h	/^            Format_RGB = 3, \/**< three channels: red, green, blue *\/$/;"	e	enum:tdogl::Bitmap::Format
Format_RGBA	render/Bitmap.h	/^            Format_RGBA = 4 \/**< four channels: red, green, blue, alpha *\/$/;"	e	enum:tdogl::Bitmap::Format
Forward	render/camera.cpp	/^cml::vector3f Camera::Forward() const$/;"	f	class:Camera	signature:() const
Forward	render/camera.h	/^	cml::vector3f Forward() const;$/;"	p	class:Camera	access:public	signature:() const
Frame	render/animation.h	/^	struct Frame$/;"	s	class:Animation	access:public
FrameSize	render/sprite3d.h	/^	const cml::vector2f& FrameSize()$/;"	f	class:Sprite3D	access:public	signature:()
FramebufferRenderbuffer	render/context.h	/^  PFNGLFRAMEBUFFERRENDERBUFFERPROC FramebufferRenderbuffer;$/;"	m	class:Render::Context	access:public
FramebufferTexture2D	render/context.h	/^  PFNGLFRAMEBUFFERTEXTURE2DPROC FramebufferTexture2D;$/;"	m	class:Render::Context	access:public
FreeAllNodes	ailib/stlastar.h	/^	void FreeAllNodes()$/;"	f	class:AStarSearch	access:private	signature:()
FreeNode	ailib/stlastar.h	/^	void FreeNode( Node *node )$/;"	f	class:AStarSearch	access:private	signature:( Node *node )
FreeSolutionNodes	ailib/stlastar.h	/^	void FreeSolutionNodes()$/;"	f	class:AStarSearch	access:public	signature:()
FreeUnusedNodes	ailib/stlastar.h	/^	void FreeUnusedNodes()$/;"	f	class:AStarSearch	access:private	signature:()
FrontFace	render/context.h	/^  PFNGLFRONTFACEPROC FrontFace;$/;"	m	class:Render::Context	access:public
GEOMETRY	render/shader.h	/^	const static int GEOMETRY = 2;$/;"	m	class:Shader	access:public
GLAPI	render/glcorearb.h	53;"	d
GLDEBUGPROC	render/glcorearb.h	/^typedef void (APIENTRY  *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);$/;"	t
GLDEBUGPROCARB	render/glcorearb.h	/^typedef void (APIENTRY  *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);$/;"	t
GLEXT_64_TYPES_DEFINED	render/glcorearb.h	1482;"	d
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS	render/glcorearb.h	2133;"	d
GL_ACTIVE_ATTRIBUTES	render/glcorearb.h	764;"	d
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	render/glcorearb.h	765;"	d
GL_ACTIVE_PROGRAM	render/glcorearb.h	1907;"	d
GL_ACTIVE_RESOURCES	render/glcorearb.h	2432;"	d
GL_ACTIVE_SUBROUTINES	render/glcorearb.h	1736;"	d
GL_ACTIVE_SUBROUTINE_MAX_LENGTH	render/glcorearb.h	1739;"	d
GL_ACTIVE_SUBROUTINE_UNIFORMS	render/glcorearb.h	1737;"	d
GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS	render/glcorearb.h	1738;"	d
GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH	render/glcorearb.h	1740;"	d
GL_ACTIVE_TEXTURE	render/glcorearb.h	516;"	d
GL_ACTIVE_UNIFORMS	render/glcorearb.h	761;"	d
GL_ACTIVE_UNIFORM_BLOCKS	render/glcorearb.h	1432;"	d
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH	render/glcorearb.h	1431;"	d
GL_ACTIVE_UNIFORM_MAX_LENGTH	render/glcorearb.h	762;"	d
GL_ACTIVE_VARIABLES	render/glcorearb.h	2448;"	d
GL_ALIASED_LINE_WIDTH_RANGE	render/glcorearb.h	469;"	d
GL_ALL_BARRIER_BITS	render/glcorearb.h	2148;"	d
GL_ALL_SHADER_BITS	render/glcorearb.h	1905;"	d
GL_ALPHA	render/glcorearb.h	358;"	d
GL_ALREADY_SIGNALED	render/glcorearb.h	1556;"	d
GL_ALWAYS	render/glcorearb.h	216;"	d
GL_AND	render/glcorearb.h	334;"	d
GL_AND_INVERTED	render/glcorearb.h	337;"	d
GL_AND_REVERSE	render/glcorearb.h	335;"	d
GL_ANY_SAMPLES_PASSED	render/glcorearb.h	1632;"	d
GL_ANY_SAMPLES_PASSED_CONSERVATIVE	render/glcorearb.h	2249;"	d
GL_ARB_ES2_compatibility	render/glcorearb.h	2627;"	d
GL_ARB_ES3_compatibility	render/glcorearb.h	2631;"	d
GL_ARB_arrays_of_arrays	render/glcorearb.h	2635;"	d
GL_ARB_base_instance	render/glcorearb.h	2639;"	d
GL_ARB_bindless_texture	render/glcorearb.h	2643;"	d
GL_ARB_blend_func_extended	render/glcorearb.h	2683;"	d
GL_ARB_buffer_storage	render/glcorearb.h	2687;"	d
GL_ARB_cl_event	render/glcorearb.h	2691;"	d
GL_ARB_clear_buffer_object	render/glcorearb.h	2703;"	d
GL_ARB_clear_texture	render/glcorearb.h	2707;"	d
GL_ARB_compressed_texture_pixel_storage	render/glcorearb.h	2711;"	d
GL_ARB_compute_shader	render/glcorearb.h	2715;"	d
GL_ARB_compute_variable_group_size	render/glcorearb.h	2720;"	d
GL_ARB_conservative_depth	render/glcorearb.h	2732;"	d
GL_ARB_copy_buffer	render/glcorearb.h	2736;"	d
GL_ARB_copy_image	render/glcorearb.h	2742;"	d
GL_ARB_debug_output	render/glcorearb.h	2746;"	d
GL_ARB_depth_buffer_float	render/glcorearb.h	2783;"	d
GL_ARB_depth_clamp	render/glcorearb.h	2787;"	d
GL_ARB_draw_buffers_blend	render/glcorearb.h	2791;"	d
GL_ARB_draw_elements_base_vertex	render/glcorearb.h	2805;"	d
GL_ARB_draw_indirect	render/glcorearb.h	2809;"	d
GL_ARB_enhanced_layouts	render/glcorearb.h	2813;"	d
GL_ARB_explicit_attrib_location	render/glcorearb.h	2817;"	d
GL_ARB_explicit_uniform_location	render/glcorearb.h	2821;"	d
GL_ARB_fragment_coord_conventions	render/glcorearb.h	2825;"	d
GL_ARB_fragment_layer_viewport	render/glcorearb.h	2829;"	d
GL_ARB_framebuffer_no_attachments	render/glcorearb.h	2833;"	d
GL_ARB_framebuffer_object	render/glcorearb.h	2837;"	d
GL_ARB_framebuffer_sRGB	render/glcorearb.h	2841;"	d
GL_ARB_get_program_binary	render/glcorearb.h	2845;"	d
GL_ARB_gpu_shader5	render/glcorearb.h	2849;"	d
GL_ARB_gpu_shader_fp64	render/glcorearb.h	2853;"	d
GL_ARB_half_float_vertex	render/glcorearb.h	2857;"	d
GL_ARB_imaging	render/glcorearb.h	2861;"	d
GL_ARB_indirect_parameters	render/glcorearb.h	2867;"	d
GL_ARB_internalformat_query	render/glcorearb.h	2879;"	d
GL_ARB_internalformat_query2	render/glcorearb.h	2883;"	d
GL_ARB_invalidate_subdata	render/glcorearb.h	2888;"	d
GL_ARB_map_buffer_alignment	render/glcorearb.h	2892;"	d
GL_ARB_map_buffer_range	render/glcorearb.h	2896;"	d
GL_ARB_multi_bind	render/glcorearb.h	2900;"	d
GL_ARB_multi_draw_indirect	render/glcorearb.h	2904;"	d
GL_ARB_occlusion_query2	render/glcorearb.h	2908;"	d
GL_ARB_program_interface_query	render/glcorearb.h	2912;"	d
GL_ARB_provoking_vertex	render/glcorearb.h	2916;"	d
GL_ARB_query_buffer_object	render/glcorearb.h	2920;"	d
GL_ARB_robust_buffer_access_behavior	render/glcorearb.h	2924;"	d
GL_ARB_robustness	render/glcorearb.h	2928;"	d
GL_ARB_robustness_isolation	render/glcorearb.h	2957;"	d
GL_ARB_sample_shading	render/glcorearb.h	2961;"	d
GL_ARB_sampler_objects	render/glcorearb.h	2971;"	d
GL_ARB_seamless_cube_map	render/glcorearb.h	2975;"	d
GL_ARB_seamless_cubemap_per_texture	render/glcorearb.h	2979;"	d
GL_ARB_separate_shader_objects	render/glcorearb.h	2983;"	d
GL_ARB_shader_atomic_counters	render/glcorearb.h	2987;"	d
GL_ARB_shader_bit_encoding	render/glcorearb.h	2991;"	d
GL_ARB_shader_draw_parameters	render/glcorearb.h	2995;"	d
GL_ARB_shader_group_vote	render/glcorearb.h	2999;"	d
GL_ARB_shader_image_load_store	render/glcorearb.h	3003;"	d
GL_ARB_shader_image_size	render/glcorearb.h	3007;"	d
GL_ARB_shader_precision	render/glcorearb.h	3011;"	d
GL_ARB_shader_stencil_export	render/glcorearb.h	3015;"	d
GL_ARB_shader_storage_buffer_object	render/glcorearb.h	3019;"	d
GL_ARB_shader_subroutine	render/glcorearb.h	3023;"	d
GL_ARB_shading_language_420pack	render/glcorearb.h	3027;"	d
GL_ARB_shading_language_include	render/glcorearb.h	3031;"	d
GL_ARB_shading_language_packing	render/glcorearb.h	3052;"	d
GL_ARB_sparse_texture	render/glcorearb.h	3056;"	d
GL_ARB_stencil_texturing	render/glcorearb.h	3075;"	d
GL_ARB_sync	render/glcorearb.h	3079;"	d
GL_ARB_tessellation_shader	render/glcorearb.h	3083;"	d
GL_ARB_texture_buffer_object_rgb32	render/glcorearb.h	3087;"	d
GL_ARB_texture_buffer_range	render/glcorearb.h	3091;"	d
GL_ARB_texture_compression_bptc	render/glcorearb.h	3095;"	d
GL_ARB_texture_compression_rgtc	render/glcorearb.h	3103;"	d
GL_ARB_texture_cube_map_array	render/glcorearb.h	3107;"	d
GL_ARB_texture_gather	render/glcorearb.h	3118;"	d
GL_ARB_texture_mirror_clamp_to_edge	render/glcorearb.h	3125;"	d
GL_ARB_texture_multisample	render/glcorearb.h	3129;"	d
GL_ARB_texture_query_levels	render/glcorearb.h	3133;"	d
GL_ARB_texture_query_lod	render/glcorearb.h	3137;"	d
GL_ARB_texture_rg	render/glcorearb.h	3141;"	d
GL_ARB_texture_rgb10_a2ui	render/glcorearb.h	3145;"	d
GL_ARB_texture_stencil8	render/glcorearb.h	3149;"	d
GL_ARB_texture_storage	render/glcorearb.h	3153;"	d
GL_ARB_texture_storage_multisample	render/glcorearb.h	3157;"	d
GL_ARB_texture_swizzle	render/glcorearb.h	3161;"	d
GL_ARB_texture_view	render/glcorearb.h	3165;"	d
GL_ARB_timer_query	render/glcorearb.h	3169;"	d
GL_ARB_transform_feedback2	render/glcorearb.h	3173;"	d
GL_ARB_transform_feedback3	render/glcorearb.h	3179;"	d
GL_ARB_transform_feedback_instanced	render/glcorearb.h	3183;"	d
GL_ARB_uniform_buffer_object	render/glcorearb.h	3187;"	d
GL_ARB_vertex_array_bgra	render/glcorearb.h	3194;"	d
GL_ARB_vertex_array_object	render/glcorearb.h	3198;"	d
GL_ARB_vertex_attrib_64bit	render/glcorearb.h	3202;"	d
GL_ARB_vertex_attrib_binding	render/glcorearb.h	3206;"	d
GL_ARB_vertex_type_10f_11f_11f_rev	render/glcorearb.h	3210;"	d
GL_ARB_vertex_type_2_10_10_10_rev	render/glcorearb.h	3214;"	d
GL_ARB_viewport_array	render/glcorearb.h	3218;"	d
GL_ARRAY_BUFFER	render/glcorearb.h	625;"	d
GL_ARRAY_BUFFER_BINDING	render/glcorearb.h	627;"	d
GL_ARRAY_SIZE	render/glcorearb.h	2438;"	d
GL_ARRAY_STRIDE	render/glcorearb.h	2441;"	d
GL_ATOMIC_COUNTER_BARRIER_BIT	render/glcorearb.h	2147;"	d
GL_ATOMIC_COUNTER_BUFFER	render/glcorearb.h	2107;"	d
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS	render/glcorearb.h	2112;"	d
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES	render/glcorearb.h	2113;"	d
GL_ATOMIC_COUNTER_BUFFER_BINDING	render/glcorearb.h	2108;"	d
GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE	render/glcorearb.h	2111;"	d
GL_ATOMIC_COUNTER_BUFFER_INDEX	render/glcorearb.h	2444;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER	render/glcorearb.h	2265;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER	render/glcorearb.h	2118;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER	render/glcorearb.h	2117;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER	render/glcorearb.h	2115;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER	render/glcorearb.h	2116;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER	render/glcorearb.h	2114;"	d
GL_ATOMIC_COUNTER_BUFFER_SIZE	render/glcorearb.h	2110;"	d
GL_ATOMIC_COUNTER_BUFFER_START	render/glcorearb.h	2109;"	d
GL_ATTACHED_SHADERS	render/glcorearb.h	760;"	d
GL_AUTO_GENERATE_MIPMAP	render/glcorearb.h	2353;"	d
GL_BACK	render/glcorearb.h	234;"	d
GL_BACK_LEFT	render/glcorearb.h	231;"	d
GL_BACK_RIGHT	render/glcorearb.h	232;"	d
GL_BGR	render/glcorearb.h	456;"	d
GL_BGRA	render/glcorearb.h	457;"	d
GL_BGRA_INTEGER	render/glcorearb.h	1074;"	d
GL_BGR_INTEGER	render/glcorearb.h	1073;"	d
GL_BLEND	render/glcorearb.h	275;"	d
GL_BLEND_COLOR	render/glcorearb.h	2862;"	d
GL_BLEND_DST	render/glcorearb.h	273;"	d
GL_BLEND_DST_ALPHA	render/glcorearb.h	569;"	d
GL_BLEND_DST_RGB	render/glcorearb.h	567;"	d
GL_BLEND_EQUATION	render/glcorearb.h	2863;"	d
GL_BLEND_EQUATION_ALPHA	render/glcorearb.h	724;"	d
GL_BLEND_EQUATION_RGB	render/glcorearb.h	695;"	d
GL_BLEND_SRC	render/glcorearb.h	274;"	d
GL_BLEND_SRC_ALPHA	render/glcorearb.h	570;"	d
GL_BLEND_SRC_RGB	render/glcorearb.h	568;"	d
GL_BLOCK_INDEX	render/glcorearb.h	2440;"	d
GL_BLUE	render/glcorearb.h	357;"	d
GL_BLUE_INTEGER	render/glcorearb.h	1070;"	d
GL_BOOL	render/glcorearb.h	742;"	d
GL_BOOL_VEC2	render/glcorearb.h	743;"	d
GL_BOOL_VEC3	render/glcorearb.h	744;"	d
GL_BOOL_VEC4	render/glcorearb.h	745;"	d
GL_BUFFER	render/glcorearb.h	2296;"	d
GL_BUFFER_ACCESS	render/glcorearb.h	633;"	d
GL_BUFFER_ACCESS_FLAGS	render/glcorearb.h	1099;"	d
GL_BUFFER_BINDING	render/glcorearb.h	2445;"	d
GL_BUFFER_DATA_SIZE	render/glcorearb.h	2446;"	d
GL_BUFFER_IMMUTABLE_STORAGE	render/glcorearb.h	2593;"	d
GL_BUFFER_MAPPED	render/glcorearb.h	634;"	d
GL_BUFFER_MAP_LENGTH	render/glcorearb.h	1100;"	d
GL_BUFFER_MAP_OFFSET	render/glcorearb.h	1101;"	d
GL_BUFFER_MAP_POINTER	render/glcorearb.h	635;"	d
GL_BUFFER_SIZE	render/glcorearb.h	619;"	d
GL_BUFFER_STORAGE_FLAGS	render/glcorearb.h	2594;"	d
GL_BUFFER_UPDATE_BARRIER_BIT	render/glcorearb.h	2144;"	d
GL_BUFFER_USAGE	render/glcorearb.h	620;"	d
GL_BUFFER_VARIABLE	render/glcorearb.h	2417;"	d
GL_BYTE	render/glcorearb.h	323;"	d
GL_CAVEAT_SUPPORT	render/glcorearb.h	2385;"	d
GL_CCW	render/glcorearb.h	244;"	d
GL_CLAMP_READ_COLOR	render/glcorearb.h	1027;"	d
GL_CLAMP_TO_BORDER	render/glcorearb.h	542;"	d
GL_CLAMP_TO_EDGE	render/glcorearb.h	460;"	d
GL_CLEAR	render/glcorearb.h	333;"	d
GL_CLEAR_BUFFER	render/glcorearb.h	2381;"	d
GL_CLEAR_TEXTURE	render/glcorearb.h	2595;"	d
GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT	render/glcorearb.h	2592;"	d
GL_CLIENT_STORAGE_BIT	render/glcorearb.h	2591;"	d
GL_CLIP_DISTANCE0	render/glcorearb.h	1003;"	d
GL_CLIP_DISTANCE1	render/glcorearb.h	1004;"	d
GL_CLIP_DISTANCE2	render/glcorearb.h	1005;"	d
GL_CLIP_DISTANCE3	render/glcorearb.h	1006;"	d
GL_CLIP_DISTANCE4	render/glcorearb.h	1007;"	d
GL_CLIP_DISTANCE5	render/glcorearb.h	1008;"	d
GL_CLIP_DISTANCE6	render/glcorearb.h	1009;"	d
GL_CLIP_DISTANCE7	render/glcorearb.h	1010;"	d
GL_COLOR	render/glcorearb.h	350;"	d
GL_COLOR_ATTACHMENT0	render/glcorearb.h	1147;"	d
GL_COLOR_ATTACHMENT1	render/glcorearb.h	1148;"	d
GL_COLOR_ATTACHMENT10	render/glcorearb.h	1157;"	d
GL_COLOR_ATTACHMENT11	render/glcorearb.h	1158;"	d
GL_COLOR_ATTACHMENT12	render/glcorearb.h	1159;"	d
GL_COLOR_ATTACHMENT13	render/glcorearb.h	1160;"	d
GL_COLOR_ATTACHMENT14	render/glcorearb.h	1161;"	d
GL_COLOR_ATTACHMENT15	render/glcorearb.h	1162;"	d
GL_COLOR_ATTACHMENT2	render/glcorearb.h	1149;"	d
GL_COLOR_ATTACHMENT3	render/glcorearb.h	1150;"	d
GL_COLOR_ATTACHMENT4	render/glcorearb.h	1151;"	d
GL_COLOR_ATTACHMENT5	render/glcorearb.h	1152;"	d
GL_COLOR_ATTACHMENT6	render/glcorearb.h	1153;"	d
GL_COLOR_ATTACHMENT7	render/glcorearb.h	1154;"	d
GL_COLOR_ATTACHMENT8	render/glcorearb.h	1155;"	d
GL_COLOR_ATTACHMENT9	render/glcorearb.h	1156;"	d
GL_COLOR_BUFFER_BIT	render/glcorearb.h	198;"	d
GL_COLOR_CLEAR_VALUE	render/glcorearb.h	282;"	d
GL_COLOR_COMPONENTS	render/glcorearb.h	2335;"	d
GL_COLOR_ENCODING	render/glcorearb.h	2354;"	d
GL_COLOR_LOGIC_OP	render/glcorearb.h	277;"	d
GL_COLOR_RENDERABLE	render/glcorearb.h	2338;"	d
GL_COLOR_WRITEMASK	render/glcorearb.h	283;"	d
GL_COMMAND_BARRIER_BIT	render/glcorearb.h	2141;"	d
GL_COMPARE_REF_TO_TEXTURE	render/glcorearb.h	1002;"	d
GL_COMPATIBLE_SUBROUTINES	render/glcorearb.h	1744;"	d
GL_COMPILE_STATUS	render/glcorearb.h	756;"	d
GL_COMPRESSED_R11_EAC	render/glcorearb.h	2244;"	d
GL_COMPRESSED_RED	render/glcorearb.h	1016;"	d
GL_COMPRESSED_RED_RGTC1	render/glcorearb.h	1190;"	d
GL_COMPRESSED_RG	render/glcorearb.h	1017;"	d
GL_COMPRESSED_RG11_EAC	render/glcorearb.h	2246;"	d
GL_COMPRESSED_RGB	render/glcorearb.h	535;"	d
GL_COMPRESSED_RGB8_ETC2	render/glcorearb.h	2238;"	d
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2	render/glcorearb.h	2240;"	d
GL_COMPRESSED_RGBA	render/glcorearb.h	536;"	d
GL_COMPRESSED_RGBA8_ETC2_EAC	render/glcorearb.h	2242;"	d
GL_COMPRESSED_RGBA_ASTC_10x10_KHR	render/glcorearb.h	3238;"	d
GL_COMPRESSED_RGBA_ASTC_10x5_KHR	render/glcorearb.h	3235;"	d
GL_COMPRESSED_RGBA_ASTC_10x6_KHR	render/glcorearb.h	3236;"	d
GL_COMPRESSED_RGBA_ASTC_10x8_KHR	render/glcorearb.h	3237;"	d
GL_COMPRESSED_RGBA_ASTC_12x10_KHR	render/glcorearb.h	3239;"	d
GL_COMPRESSED_RGBA_ASTC_12x12_KHR	render/glcorearb.h	3240;"	d
GL_COMPRESSED_RGBA_ASTC_4x4_KHR	render/glcorearb.h	3227;"	d
GL_COMPRESSED_RGBA_ASTC_5x4_KHR	render/glcorearb.h	3228;"	d
GL_COMPRESSED_RGBA_ASTC_5x5_KHR	render/glcorearb.h	3229;"	d
GL_COMPRESSED_RGBA_ASTC_6x5_KHR	render/glcorearb.h	3230;"	d
GL_COMPRESSED_RGBA_ASTC_6x6_KHR	render/glcorearb.h	3231;"	d
GL_COMPRESSED_RGBA_ASTC_8x5_KHR	render/glcorearb.h	3232;"	d
GL_COMPRESSED_RGBA_ASTC_8x6_KHR	render/glcorearb.h	3233;"	d
GL_COMPRESSED_RGBA_ASTC_8x8_KHR	render/glcorearb.h	3234;"	d
GL_COMPRESSED_RGBA_BPTC_UNORM	render/glcorearb.h	2200;"	d
GL_COMPRESSED_RGBA_BPTC_UNORM_ARB	render/glcorearb.h	3096;"	d
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT	render/glcorearb.h	2202;"	d
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB	render/glcorearb.h	3098;"	d
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT	render/glcorearb.h	2203;"	d
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB	render/glcorearb.h	3099;"	d
GL_COMPRESSED_RG_RGTC2	render/glcorearb.h	1192;"	d
GL_COMPRESSED_SIGNED_R11_EAC	render/glcorearb.h	2245;"	d
GL_COMPRESSED_SIGNED_RED_RGTC1	render/glcorearb.h	1191;"	d
GL_COMPRESSED_SIGNED_RG11_EAC	render/glcorearb.h	2247;"	d
GL_COMPRESSED_SIGNED_RG_RGTC2	render/glcorearb.h	1193;"	d
GL_COMPRESSED_SRGB	render/glcorearb.h	981;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR	render/glcorearb.h	3252;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR	render/glcorearb.h	3249;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR	render/glcorearb.h	3250;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR	render/glcorearb.h	3251;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR	render/glcorearb.h	3253;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR	render/glcorearb.h	3254;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR	render/glcorearb.h	3241;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR	render/glcorearb.h	3242;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR	render/glcorearb.h	3243;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR	render/glcorearb.h	3244;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR	render/glcorearb.h	3245;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR	render/glcorearb.h	3246;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR	render/glcorearb.h	3247;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR	render/glcorearb.h	3248;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC	render/glcorearb.h	2243;"	d
GL_COMPRESSED_SRGB8_ETC2	render/glcorearb.h	2239;"	d
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2	render/glcorearb.h	2241;"	d
GL_COMPRESSED_SRGB_ALPHA	render/glcorearb.h	982;"	d
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM	render/glcorearb.h	2201;"	d
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB	render/glcorearb.h	3097;"	d
GL_COMPRESSED_TEXTURE_FORMATS	render/glcorearb.h	541;"	d
GL_COMPUTE_SHADER	render/glcorearb.h	2251;"	d
GL_COMPUTE_SHADER_BIT	render/glcorearb.h	2716;"	d
GL_COMPUTE_SUBROUTINE	render/glcorearb.h	2424;"	d
GL_COMPUTE_SUBROUTINE_UNIFORM	render/glcorearb.h	2430;"	d
GL_COMPUTE_TEXTURE	render/glcorearb.h	2363;"	d
GL_COMPUTE_WORK_GROUP_SIZE	render/glcorearb.h	2263;"	d
GL_CONDITION_SATISFIED	render/glcorearb.h	1558;"	d
GL_CONSTANT_ALPHA	render/glcorearb.h	590;"	d
GL_CONSTANT_COLOR	render/glcorearb.h	588;"	d
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT	render/glcorearb.h	1520;"	d
GL_CONTEXT_CORE_PROFILE_BIT	render/glcorearb.h	1519;"	d
GL_CONTEXT_FLAGS	render/glcorearb.h	1015;"	d
GL_CONTEXT_FLAG_DEBUG_BIT	render/glcorearb.h	2304;"	d
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT	render/glcorearb.h	1018;"	d
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB	render/glcorearb.h	2929;"	d
GL_CONTEXT_PROFILE_MASK	render/glcorearb.h	1540;"	d
GL_COPY	render/glcorearb.h	336;"	d
GL_COPY_INVERTED	render/glcorearb.h	345;"	d
GL_COPY_READ_BUFFER	render/glcorearb.h	1417;"	d
GL_COPY_READ_BUFFER_BINDING	render/glcorearb.h	2737;"	d
GL_COPY_WRITE_BUFFER	render/glcorearb.h	1418;"	d
GL_COPY_WRITE_BUFFER_BINDING	render/glcorearb.h	2738;"	d
GL_CULL_FACE	render/glcorearb.h	254;"	d
GL_CULL_FACE_MODE	render/glcorearb.h	255;"	d
GL_CURRENT_PROGRAM	render/glcorearb.h	768;"	d
GL_CURRENT_QUERY	render/glcorearb.h	622;"	d
GL_CURRENT_VERTEX_ATTRIB	render/glcorearb.h	700;"	d
GL_CW	render/glcorearb.h	243;"	d
GL_DEBUG_CALLBACK_FUNCTION	render/glcorearb.h	2270;"	d
GL_DEBUG_CALLBACK_FUNCTION_ARB	render/glcorearb.h	2750;"	d
GL_DEBUG_CALLBACK_USER_PARAM	render/glcorearb.h	2271;"	d
GL_DEBUG_CALLBACK_USER_PARAM_ARB	render/glcorearb.h	2751;"	d
GL_DEBUG_GROUP_STACK_DEPTH	render/glcorearb.h	2295;"	d
GL_DEBUG_LOGGED_MESSAGES	render/glcorearb.h	2286;"	d
GL_DEBUG_LOGGED_MESSAGES_ARB	render/glcorearb.h	2766;"	d
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH	render/glcorearb.h	2269;"	d
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB	render/glcorearb.h	2749;"	d
GL_DEBUG_OUTPUT	render/glcorearb.h	2303;"	d
GL_DEBUG_OUTPUT_SYNCHRONOUS	render/glcorearb.h	2268;"	d
GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB	render/glcorearb.h	2748;"	d
GL_DEBUG_SEVERITY_HIGH	render/glcorearb.h	2287;"	d
GL_DEBUG_SEVERITY_HIGH_ARB	render/glcorearb.h	2767;"	d
GL_DEBUG_SEVERITY_LOW	render/glcorearb.h	2289;"	d
GL_DEBUG_SEVERITY_LOW_ARB	render/glcorearb.h	2769;"	d
GL_DEBUG_SEVERITY_MEDIUM	render/glcorearb.h	2288;"	d
GL_DEBUG_SEVERITY_MEDIUM_ARB	render/glcorearb.h	2768;"	d
GL_DEBUG_SEVERITY_NOTIFICATION	render/glcorearb.h	2293;"	d
GL_DEBUG_SOURCE_API	render/glcorearb.h	2272;"	d
GL_DEBUG_SOURCE_API_ARB	render/glcorearb.h	2752;"	d
GL_DEBUG_SOURCE_APPLICATION	render/glcorearb.h	2276;"	d
GL_DEBUG_SOURCE_APPLICATION_ARB	render/glcorearb.h	2756;"	d
GL_DEBUG_SOURCE_OTHER	render/glcorearb.h	2277;"	d
GL_DEBUG_SOURCE_OTHER_ARB	render/glcorearb.h	2757;"	d
GL_DEBUG_SOURCE_SHADER_COMPILER	render/glcorearb.h	2274;"	d
GL_DEBUG_SOURCE_SHADER_COMPILER_ARB	render/glcorearb.h	2754;"	d
GL_DEBUG_SOURCE_THIRD_PARTY	render/glcorearb.h	2275;"	d
GL_DEBUG_SOURCE_THIRD_PARTY_ARB	render/glcorearb.h	2755;"	d
GL_DEBUG_SOURCE_WINDOW_SYSTEM	render/glcorearb.h	2273;"	d
GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB	render/glcorearb.h	2753;"	d
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR	render/glcorearb.h	2279;"	d
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB	render/glcorearb.h	2759;"	d
GL_DEBUG_TYPE_ERROR	render/glcorearb.h	2278;"	d
GL_DEBUG_TYPE_ERROR_ARB	render/glcorearb.h	2758;"	d
GL_DEBUG_TYPE_MARKER	render/glcorearb.h	2290;"	d
GL_DEBUG_TYPE_OTHER	render/glcorearb.h	2283;"	d
GL_DEBUG_TYPE_OTHER_ARB	render/glcorearb.h	2763;"	d
GL_DEBUG_TYPE_PERFORMANCE	render/glcorearb.h	2282;"	d
GL_DEBUG_TYPE_PERFORMANCE_ARB	render/glcorearb.h	2762;"	d
GL_DEBUG_TYPE_POP_GROUP	render/glcorearb.h	2292;"	d
GL_DEBUG_TYPE_PORTABILITY	render/glcorearb.h	2281;"	d
GL_DEBUG_TYPE_PORTABILITY_ARB	render/glcorearb.h	2761;"	d
GL_DEBUG_TYPE_PUSH_GROUP	render/glcorearb.h	2291;"	d
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR	render/glcorearb.h	2280;"	d
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB	render/glcorearb.h	2760;"	d
GL_DECR	render/glcorearb.h	367;"	d
GL_DECR_WRAP	render/glcorearb.h	579;"	d
GL_DELETE_STATUS	render/glcorearb.h	755;"	d
GL_DEPTH	render/glcorearb.h	351;"	d
GL_DEPTH24_STENCIL8	render/glcorearb.h	1120;"	d
GL_DEPTH32F_STENCIL8	render/glcorearb.h	1103;"	d
GL_DEPTH_ATTACHMENT	render/glcorearb.h	1163;"	d
GL_DEPTH_BUFFER_BIT	render/glcorearb.h	196;"	d
GL_DEPTH_CLAMP	render/glcorearb.h	1541;"	d
GL_DEPTH_CLEAR_VALUE	render/glcorearb.h	260;"	d
GL_DEPTH_COMPONENT	render/glcorearb.h	354;"	d
GL_DEPTH_COMPONENT16	render/glcorearb.h	572;"	d
GL_DEPTH_COMPONENT24	render/glcorearb.h	573;"	d
GL_DEPTH_COMPONENT32	render/glcorearb.h	574;"	d
GL_DEPTH_COMPONENT32F	render/glcorearb.h	1102;"	d
GL_DEPTH_COMPONENTS	render/glcorearb.h	2336;"	d
GL_DEPTH_FUNC	render/glcorearb.h	261;"	d
GL_DEPTH_RANGE	render/glcorearb.h	257;"	d
GL_DEPTH_RENDERABLE	render/glcorearb.h	2339;"	d
GL_DEPTH_STENCIL	render/glcorearb.h	1118;"	d
GL_DEPTH_STENCIL_ATTACHMENT	render/glcorearb.h	1116;"	d
GL_DEPTH_STENCIL_TEXTURE_MODE	render/glcorearb.h	2476;"	d
GL_DEPTH_TEST	render/glcorearb.h	258;"	d
GL_DEPTH_WRITEMASK	render/glcorearb.h	259;"	d
GL_DISPATCH_INDIRECT_BUFFER	render/glcorearb.h	2266;"	d
GL_DISPATCH_INDIRECT_BUFFER_BINDING	render/glcorearb.h	2267;"	d
GL_DITHER	render/glcorearb.h	272;"	d
GL_DONT_CARE	render/glcorearb.h	320;"	d
GL_DOUBLE	render/glcorearb.h	330;"	d
GL_DOUBLEBUFFER	render/glcorearb.h	284;"	d
GL_DOUBLE_MAT2	render/glcorearb.h	1727;"	d
GL_DOUBLE_MAT2x3	render/glcorearb.h	1730;"	d
GL_DOUBLE_MAT2x4	render/glcorearb.h	1731;"	d
GL_DOUBLE_MAT3	render/glcorearb.h	1728;"	d
GL_DOUBLE_MAT3x2	render/glcorearb.h	1732;"	d
GL_DOUBLE_MAT3x4	render/glcorearb.h	1733;"	d
GL_DOUBLE_MAT4	render/glcorearb.h	1729;"	d
GL_DOUBLE_MAT4x2	render/glcorearb.h	1734;"	d
GL_DOUBLE_MAT4x3	render/glcorearb.h	1735;"	d
GL_DOUBLE_VEC2	render/glcorearb.h	1724;"	d
GL_DOUBLE_VEC3	render/glcorearb.h	1725;"	d
GL_DOUBLE_VEC4	render/glcorearb.h	1726;"	d
GL_DRAW_BUFFER	render/glcorearb.h	278;"	d
GL_DRAW_BUFFER0	render/glcorearb.h	708;"	d
GL_DRAW_BUFFER1	render/glcorearb.h	709;"	d
GL_DRAW_BUFFER10	render/glcorearb.h	718;"	d
GL_DRAW_BUFFER11	render/glcorearb.h	719;"	d
GL_DRAW_BUFFER12	render/glcorearb.h	720;"	d
GL_DRAW_BUFFER13	render/glcorearb.h	721;"	d
GL_DRAW_BUFFER14	render/glcorearb.h	722;"	d
GL_DRAW_BUFFER15	render/glcorearb.h	723;"	d
GL_DRAW_BUFFER2	render/glcorearb.h	710;"	d
GL_DRAW_BUFFER3	render/glcorearb.h	711;"	d
GL_DRAW_BUFFER4	render/glcorearb.h	712;"	d
GL_DRAW_BUFFER5	render/glcorearb.h	713;"	d
GL_DRAW_BUFFER6	render/glcorearb.h	714;"	d
GL_DRAW_BUFFER7	render/glcorearb.h	715;"	d
GL_DRAW_BUFFER8	render/glcorearb.h	716;"	d
GL_DRAW_BUFFER9	render/glcorearb.h	717;"	d
GL_DRAW_FRAMEBUFFER	render/glcorearb.h	1132;"	d
GL_DRAW_FRAMEBUFFER_BINDING	render/glcorearb.h	1129;"	d
GL_DRAW_INDIRECT_BUFFER	render/glcorearb.h	1716;"	d
GL_DRAW_INDIRECT_BUFFER_BINDING	render/glcorearb.h	1717;"	d
GL_DST_ALPHA	render/glcorearb.h	223;"	d
GL_DST_COLOR	render/glcorearb.h	225;"	d
GL_DYNAMIC_COPY	render/glcorearb.h	644;"	d
GL_DYNAMIC_DRAW	render/glcorearb.h	642;"	d
GL_DYNAMIC_READ	render/glcorearb.h	643;"	d
GL_DYNAMIC_STORAGE_BIT	render/glcorearb.h	2590;"	d
GL_ELEMENT_ARRAY_BARRIER_BIT	render/glcorearb.h	2137;"	d
GL_ELEMENT_ARRAY_BUFFER	render/glcorearb.h	626;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	render/glcorearb.h	628;"	d
GL_EQUAL	render/glcorearb.h	211;"	d
GL_EQUIV	render/glcorearb.h	342;"	d
GL_EXTENSIONS	render/glcorearb.h	371;"	d
GL_FALSE	render/glcorearb.h	199;"	d
GL_FASTEST	render/glcorearb.h	321;"	d
GL_FILL	render/glcorearb.h	363;"	d
GL_FILTER	render/glcorearb.h	2357;"	d
GL_FIRST_VERTEX_CONVENTION	render/glcorearb.h	1543;"	d
GL_FIXED	render/glcorearb.h	1880;"	d
GL_FIXED_ONLY	render/glcorearb.h	1028;"	d
GL_FLOAT	render/glcorearb.h	329;"	d
GL_FLOAT_32_UNSIGNED_INT_24_8_REV	render/glcorearb.h	1104;"	d
GL_FLOAT_MAT2	render/glcorearb.h	746;"	d
GL_FLOAT_MAT2x3	render/glcorearb.h	971;"	d
GL_FLOAT_MAT2x4	render/glcorearb.h	972;"	d
GL_FLOAT_MAT3	render/glcorearb.h	747;"	d
GL_FLOAT_MAT3x2	render/glcorearb.h	973;"	d
GL_FLOAT_MAT3x4	render/glcorearb.h	974;"	d
GL_FLOAT_MAT4	render/glcorearb.h	748;"	d
GL_FLOAT_MAT4x2	render/glcorearb.h	975;"	d
GL_FLOAT_MAT4x3	render/glcorearb.h	976;"	d
GL_FLOAT_VEC2	render/glcorearb.h	736;"	d
GL_FLOAT_VEC3	render/glcorearb.h	737;"	d
GL_FLOAT_VEC4	render/glcorearb.h	738;"	d
GL_FRACTIONAL_EVEN	render/glcorearb.h	1756;"	d
GL_FRACTIONAL_ODD	render/glcorearb.h	1755;"	d
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS	render/glcorearb.h	1722;"	d
GL_FRAGMENT_SHADER	render/glcorearb.h	728;"	d
GL_FRAGMENT_SHADER_BIT	render/glcorearb.h	1901;"	d
GL_FRAGMENT_SHADER_DERIVATIVE_HINT	render/glcorearb.h	766;"	d
GL_FRAGMENT_SUBROUTINE	render/glcorearb.h	2423;"	d
GL_FRAGMENT_SUBROUTINE_UNIFORM	render/glcorearb.h	2429;"	d
GL_FRAGMENT_TEXTURE	render/glcorearb.h	2362;"	d
GL_FRAMEBUFFER	render/glcorearb.h	1165;"	d
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE	render/glcorearb.h	1111;"	d
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE	render/glcorearb.h	1110;"	d
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING	render/glcorearb.h	1106;"	d
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE	render/glcorearb.h	1107;"	d
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE	render/glcorearb.h	1112;"	d
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE	render/glcorearb.h	1109;"	d
GL_FRAMEBUFFER_ATTACHMENT_LAYERED	render/glcorearb.h	1527;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME	render/glcorearb.h	1136;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE	render/glcorearb.h	1135;"	d
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE	render/glcorearb.h	1108;"	d
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE	render/glcorearb.h	1113;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE	render/glcorearb.h	1138;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER	render/glcorearb.h	1139;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL	render/glcorearb.h	1137;"	d
GL_FRAMEBUFFER_BARRIER_BIT	render/glcorearb.h	2145;"	d
GL_FRAMEBUFFER_BINDING	render/glcorearb.h	1128;"	d
GL_FRAMEBUFFER_BLEND	render/glcorearb.h	2343;"	d
GL_FRAMEBUFFER_COMPLETE	render/glcorearb.h	1140;"	d
GL_FRAMEBUFFER_DEFAULT	render/glcorearb.h	1114;"	d
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS	render/glcorearb.h	2310;"	d
GL_FRAMEBUFFER_DEFAULT_HEIGHT	render/glcorearb.h	2307;"	d
GL_FRAMEBUFFER_DEFAULT_LAYERS	render/glcorearb.h	2308;"	d
GL_FRAMEBUFFER_DEFAULT_SAMPLES	render/glcorearb.h	2309;"	d
GL_FRAMEBUFFER_DEFAULT_WIDTH	render/glcorearb.h	2306;"	d
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT	render/glcorearb.h	1141;"	d
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER	render/glcorearb.h	1143;"	d
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS	render/glcorearb.h	1528;"	d
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	render/glcorearb.h	1142;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE	render/glcorearb.h	1180;"	d
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER	render/glcorearb.h	1144;"	d
GL_FRAMEBUFFER_RENDERABLE	render/glcorearb.h	2341;"	d
GL_FRAMEBUFFER_RENDERABLE_LAYERED	render/glcorearb.h	2342;"	d
GL_FRAMEBUFFER_SRGB	render/glcorearb.h	1182;"	d
GL_FRAMEBUFFER_UNDEFINED	render/glcorearb.h	1115;"	d
GL_FRAMEBUFFER_UNSUPPORTED	render/glcorearb.h	1145;"	d
GL_FRONT	render/glcorearb.h	233;"	d
GL_FRONT_AND_BACK	render/glcorearb.h	237;"	d
GL_FRONT_FACE	render/glcorearb.h	256;"	d
GL_FRONT_LEFT	render/glcorearb.h	229;"	d
GL_FRONT_RIGHT	render/glcorearb.h	230;"	d
GL_FULL_SUPPORT	render/glcorearb.h	2384;"	d
GL_FUNC_ADD	render/glcorearb.h	583;"	d
GL_FUNC_REVERSE_SUBTRACT	render/glcorearb.h	585;"	d
GL_FUNC_SUBTRACT	render/glcorearb.h	584;"	d
GL_GEOMETRY_INPUT_TYPE	render/glcorearb.h	1531;"	d
GL_GEOMETRY_OUTPUT_TYPE	render/glcorearb.h	1532;"	d
GL_GEOMETRY_SHADER	render/glcorearb.h	1529;"	d
GL_GEOMETRY_SHADER_BIT	render/glcorearb.h	1902;"	d
GL_GEOMETRY_SHADER_INVOCATIONS	render/glcorearb.h	1718;"	d
GL_GEOMETRY_SUBROUTINE	render/glcorearb.h	2422;"	d
GL_GEOMETRY_SUBROUTINE_UNIFORM	render/glcorearb.h	2428;"	d
GL_GEOMETRY_TEXTURE	render/glcorearb.h	2361;"	d
GL_GEOMETRY_VERTICES_OUT	render/glcorearb.h	1530;"	d
GL_GEQUAL	render/glcorearb.h	215;"	d
GL_GET_TEXTURE_IMAGE_FORMAT	render/glcorearb.h	2349;"	d
GL_GET_TEXTURE_IMAGE_TYPE	render/glcorearb.h	2350;"	d
GL_GREATER	render/glcorearb.h	213;"	d
GL_GREEN	render/glcorearb.h	356;"	d
GL_GREEN_INTEGER	render/glcorearb.h	1069;"	d
GL_GUILTY_CONTEXT_RESET_ARB	render/glcorearb.h	2931;"	d
GL_HALF_FLOAT	render/glcorearb.h	1183;"	d
GL_HIGH_FLOAT	render/glcorearb.h	1885;"	d
GL_HIGH_INT	render/glcorearb.h	1888;"	d
GL_IMAGE_1D	render/glcorearb.h	2156;"	d
GL_IMAGE_1D_ARRAY	render/glcorearb.h	2162;"	d
GL_IMAGE_2D	render/glcorearb.h	2157;"	d
GL_IMAGE_2D_ARRAY	render/glcorearb.h	2163;"	d
GL_IMAGE_2D_MULTISAMPLE	render/glcorearb.h	2165;"	d
GL_IMAGE_2D_MULTISAMPLE_ARRAY	render/glcorearb.h	2166;"	d
GL_IMAGE_2D_RECT	render/glcorearb.h	2159;"	d
GL_IMAGE_3D	render/glcorearb.h	2158;"	d
GL_IMAGE_BINDING_ACCESS	render/glcorearb.h	2155;"	d
GL_IMAGE_BINDING_FORMAT	render/glcorearb.h	2190;"	d
GL_IMAGE_BINDING_LAYER	render/glcorearb.h	2154;"	d
GL_IMAGE_BINDING_LAYERED	render/glcorearb.h	2153;"	d
GL_IMAGE_BINDING_LEVEL	render/glcorearb.h	2152;"	d
GL_IMAGE_BINDING_NAME	render/glcorearb.h	2151;"	d
GL_IMAGE_BUFFER	render/glcorearb.h	2161;"	d
GL_IMAGE_CLASS_10_10_10_2	render/glcorearb.h	2396;"	d
GL_IMAGE_CLASS_11_11_10	render/glcorearb.h	2395;"	d
GL_IMAGE_CLASS_1_X_16	render/glcorearb.h	2391;"	d
GL_IMAGE_CLASS_1_X_32	render/glcorearb.h	2388;"	d
GL_IMAGE_CLASS_1_X_8	render/glcorearb.h	2394;"	d
GL_IMAGE_CLASS_2_X_16	render/glcorearb.h	2390;"	d
GL_IMAGE_CLASS_2_X_32	render/glcorearb.h	2387;"	d
GL_IMAGE_CLASS_2_X_8	render/glcorearb.h	2393;"	d
GL_IMAGE_CLASS_4_X_16	render/glcorearb.h	2389;"	d
GL_IMAGE_CLASS_4_X_32	render/glcorearb.h	2386;"	d
GL_IMAGE_CLASS_4_X_8	render/glcorearb.h	2392;"	d
GL_IMAGE_COMPATIBILITY_CLASS	render/glcorearb.h	2371;"	d
GL_IMAGE_CUBE	render/glcorearb.h	2160;"	d
GL_IMAGE_CUBE_MAP_ARRAY	render/glcorearb.h	2164;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS	render/glcorearb.h	2193;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE	render/glcorearb.h	2192;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE	render/glcorearb.h	2191;"	d
GL_IMAGE_PIXEL_FORMAT	render/glcorearb.h	2372;"	d
GL_IMAGE_PIXEL_TYPE	render/glcorearb.h	2373;"	d
GL_IMAGE_TEXEL_SIZE	render/glcorearb.h	2370;"	d
GL_IMPLEMENTATION_COLOR_READ_FORMAT	render/glcorearb.h	1882;"	d
GL_IMPLEMENTATION_COLOR_READ_TYPE	render/glcorearb.h	1881;"	d
GL_INCR	render/glcorearb.h	366;"	d
GL_INCR_WRAP	render/glcorearb.h	578;"	d
GL_INFO_LOG_LENGTH	render/glcorearb.h	759;"	d
GL_INNOCENT_CONTEXT_RESET_ARB	render/glcorearb.h	2932;"	d
GL_INT	render/glcorearb.h	327;"	d
GL_INTERLEAVED_ATTRIBS	render/glcorearb.h	1052;"	d
GL_INTERNALFORMAT_ALPHA_SIZE	render/glcorearb.h	2320;"	d
GL_INTERNALFORMAT_ALPHA_TYPE	render/glcorearb.h	2327;"	d
GL_INTERNALFORMAT_BLUE_SIZE	render/glcorearb.h	2319;"	d
GL_INTERNALFORMAT_BLUE_TYPE	render/glcorearb.h	2326;"	d
GL_INTERNALFORMAT_DEPTH_SIZE	render/glcorearb.h	2321;"	d
GL_INTERNALFORMAT_DEPTH_TYPE	render/glcorearb.h	2328;"	d
GL_INTERNALFORMAT_GREEN_SIZE	render/glcorearb.h	2318;"	d
GL_INTERNALFORMAT_GREEN_TYPE	render/glcorearb.h	2325;"	d
GL_INTERNALFORMAT_PREFERRED	render/glcorearb.h	2316;"	d
GL_INTERNALFORMAT_RED_SIZE	render/glcorearb.h	2317;"	d
GL_INTERNALFORMAT_RED_TYPE	render/glcorearb.h	2324;"	d
GL_INTERNALFORMAT_SHARED_SIZE	render/glcorearb.h	2323;"	d
GL_INTERNALFORMAT_STENCIL_SIZE	render/glcorearb.h	2322;"	d
GL_INTERNALFORMAT_STENCIL_TYPE	render/glcorearb.h	2329;"	d
GL_INTERNALFORMAT_SUPPORTED	render/glcorearb.h	2315;"	d
GL_INT_2_10_10_10_REV	render/glcorearb.h	1642;"	d
GL_INT_IMAGE_1D	render/glcorearb.h	2167;"	d
GL_INT_IMAGE_1D_ARRAY	render/glcorearb.h	2173;"	d
GL_INT_IMAGE_2D	render/glcorearb.h	2168;"	d
GL_INT_IMAGE_2D_ARRAY	render/glcorearb.h	2174;"	d
GL_INT_IMAGE_2D_MULTISAMPLE	render/glcorearb.h	2176;"	d
GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY	render/glcorearb.h	2177;"	d
GL_INT_IMAGE_2D_RECT	render/glcorearb.h	2170;"	d
GL_INT_IMAGE_3D	render/glcorearb.h	2169;"	d
GL_INT_IMAGE_BUFFER	render/glcorearb.h	2172;"	d
GL_INT_IMAGE_CUBE	render/glcorearb.h	2171;"	d
GL_INT_IMAGE_CUBE_MAP_ARRAY	render/glcorearb.h	2175;"	d
GL_INT_SAMPLER_1D	render/glcorearb.h	1083;"	d
GL_INT_SAMPLER_1D_ARRAY	render/glcorearb.h	1087;"	d
GL_INT_SAMPLER_2D	render/glcorearb.h	1084;"	d
GL_INT_SAMPLER_2D_ARRAY	render/glcorearb.h	1088;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE	render/glcorearb.h	1575;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	render/glcorearb.h	1578;"	d
GL_INT_SAMPLER_2D_RECT	render/glcorearb.h	1394;"	d
GL_INT_SAMPLER_3D	render/glcorearb.h	1085;"	d
GL_INT_SAMPLER_BUFFER	render/glcorearb.h	1395;"	d
GL_INT_SAMPLER_CUBE	render/glcorearb.h	1086;"	d
GL_INT_SAMPLER_CUBE_MAP_ARRAY	render/glcorearb.h	1714;"	d
GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB	render/glcorearb.h	3113;"	d
GL_INT_VEC2	render/glcorearb.h	739;"	d
GL_INT_VEC3	render/glcorearb.h	740;"	d
GL_INT_VEC4	render/glcorearb.h	741;"	d
GL_INVALID_ENUM	render/glcorearb.h	239;"	d
GL_INVALID_FRAMEBUFFER_OPERATION	render/glcorearb.h	1105;"	d
GL_INVALID_INDEX	render/glcorearb.h	1448;"	d
GL_INVALID_OPERATION	render/glcorearb.h	241;"	d
GL_INVALID_VALUE	render/glcorearb.h	240;"	d
GL_INVERT	render/glcorearb.h	343;"	d
GL_ISOLINES	render/glcorearb.h	1754;"	d
GL_IS_PER_PATCH	render/glcorearb.h	2459;"	d
GL_IS_ROW_MAJOR	render/glcorearb.h	2443;"	d
GL_KEEP	render/glcorearb.h	364;"	d
GL_KHR_debug	render/glcorearb.h	3222;"	d
GL_KHR_texture_compression_astc_hdr	render/glcorearb.h	3226;"	d
GL_KHR_texture_compression_astc_ldr	render/glcorearb.h	3258;"	d
GL_LAST_VERTEX_CONVENTION	render/glcorearb.h	1544;"	d
GL_LAYER_PROVOKING_VERTEX	render/glcorearb.h	1912;"	d
GL_LEFT	render/glcorearb.h	235;"	d
GL_LEQUAL	render/glcorearb.h	212;"	d
GL_LESS	render/glcorearb.h	210;"	d
GL_LINE	render/glcorearb.h	362;"	d
GL_LINEAR	render/glcorearb.h	373;"	d
GL_LINEAR_MIPMAP_LINEAR	render/glcorearb.h	377;"	d
GL_LINEAR_MIPMAP_NEAREST	render/glcorearb.h	375;"	d
GL_LINES	render/glcorearb.h	202;"	d
GL_LINES_ADJACENCY	render/glcorearb.h	1521;"	d
GL_LINE_LOOP	render/glcorearb.h	203;"	d
GL_LINE_SMOOTH	render/glcorearb.h	248;"	d
GL_LINE_SMOOTH_HINT	render/glcorearb.h	286;"	d
GL_LINE_STRIP	render/glcorearb.h	204;"	d
GL_LINE_STRIP_ADJACENCY	render/glcorearb.h	1522;"	d
GL_LINE_WIDTH	render/glcorearb.h	249;"	d
GL_LINE_WIDTH_GRANULARITY	render/glcorearb.h	251;"	d
GL_LINE_WIDTH_RANGE	render/glcorearb.h	250;"	d
GL_LINK_STATUS	render/glcorearb.h	757;"	d
GL_LOCATION	render/glcorearb.h	2457;"	d
GL_LOCATION_COMPONENT	render/glcorearb.h	2596;"	d
GL_LOCATION_INDEX	render/glcorearb.h	2458;"	d
GL_LOGIC_OP_MODE	render/glcorearb.h	276;"	d
GL_LOSE_CONTEXT_ON_RESET_ARB	render/glcorearb.h	2930;"	d
GL_LOWER_LEFT	render/glcorearb.h	770;"	d
GL_LOW_FLOAT	render/glcorearb.h	1883;"	d
GL_LOW_INT	render/glcorearb.h	1886;"	d
GL_MAJOR_VERSION	render/glcorearb.h	1012;"	d
GL_MANUAL_GENERATE_MIPMAP	render/glcorearb.h	2352;"	d
GL_MAP_COHERENT_BIT	render/glcorearb.h	2589;"	d
GL_MAP_FLUSH_EXPLICIT_BIT	render/glcorearb.h	1188;"	d
GL_MAP_INVALIDATE_BUFFER_BIT	render/glcorearb.h	1187;"	d
GL_MAP_INVALIDATE_RANGE_BIT	render/glcorearb.h	1186;"	d
GL_MAP_PERSISTENT_BIT	render/glcorearb.h	2588;"	d
GL_MAP_READ_BIT	render/glcorearb.h	1184;"	d
GL_MAP_UNSYNCHRONIZED_BIT	render/glcorearb.h	1189;"	d
GL_MAP_WRITE_BIT	render/glcorearb.h	1185;"	d
GL_MATRIX_STRIDE	render/glcorearb.h	2442;"	d
GL_MAX	render/glcorearb.h	587;"	d
GL_MAX_3D_TEXTURE_SIZE	render/glcorearb.h	448;"	d
GL_MAX_ARRAY_TEXTURE_LAYERS	render/glcorearb.h	1024;"	d
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS	render/glcorearb.h	2132;"	d
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE	render/glcorearb.h	2131;"	d
GL_MAX_CLIP_DISTANCES	render/glcorearb.h	1011;"	d
GL_MAX_COLOR_ATTACHMENTS	render/glcorearb.h	1146;"	d
GL_MAX_COLOR_TEXTURE_SAMPLES	render/glcorearb.h	1580;"	d
GL_MAX_COMBINED_ATOMIC_COUNTERS	render/glcorearb.h	2130;"	d
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS	render/glcorearb.h	2124;"	d
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS	render/glcorearb.h	2259;"	d
GL_MAX_COMBINED_DIMENSIONS	render/glcorearb.h	2334;"	d
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS	render/glcorearb.h	1429;"	d
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS	render/glcorearb.h	3189;"	d
GL_MAX_COMBINED_IMAGE_UNIFORMS	render/glcorearb.h	2199;"	d
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS	render/glcorearb.h	2150;"	d
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES	render/glcorearb.h	2475;"	d
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS	render/glcorearb.h	2470;"	d
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS	render/glcorearb.h	1771;"	d
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS	render/glcorearb.h	1772;"	d
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	render/glcorearb.h	734;"	d
GL_MAX_COMBINED_UNIFORM_BLOCKS	render/glcorearb.h	1425;"	d
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS	render/glcorearb.h	1428;"	d
GL_MAX_COMPUTE_ATOMIC_COUNTERS	render/glcorearb.h	2258;"	d
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS	render/glcorearb.h	2257;"	d
GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB	render/glcorearb.h	2722;"	d
GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB	render/glcorearb.h	2724;"	d
GL_MAX_COMPUTE_IMAGE_UNIFORMS	render/glcorearb.h	2254;"	d
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS	render/glcorearb.h	2469;"	d
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE	render/glcorearb.h	2255;"	d
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS	render/glcorearb.h	2253;"	d
GL_MAX_COMPUTE_UNIFORM_BLOCKS	render/glcorearb.h	2252;"	d
GL_MAX_COMPUTE_UNIFORM_COMPONENTS	render/glcorearb.h	2256;"	d
GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB	render/glcorearb.h	2721;"	d
GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB	render/glcorearb.h	2723;"	d
GL_MAX_COMPUTE_WORK_GROUP_COUNT	render/glcorearb.h	2261;"	d
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS	render/glcorearb.h	2260;"	d
GL_MAX_COMPUTE_WORK_GROUP_SIZE	render/glcorearb.h	2262;"	d
GL_MAX_CUBE_MAP_TEXTURE_SIZE	render/glcorearb.h	534;"	d
GL_MAX_DEBUG_GROUP_STACK_DEPTH	render/glcorearb.h	2294;"	d
GL_MAX_DEBUG_LOGGED_MESSAGES	render/glcorearb.h	2285;"	d
GL_MAX_DEBUG_LOGGED_MESSAGES_ARB	render/glcorearb.h	2765;"	d
GL_MAX_DEBUG_MESSAGE_LENGTH	render/glcorearb.h	2284;"	d
GL_MAX_DEBUG_MESSAGE_LENGTH_ARB	render/glcorearb.h	2764;"	d
GL_MAX_DEPTH	render/glcorearb.h	2332;"	d
GL_MAX_DEPTH_TEXTURE_SAMPLES	render/glcorearb.h	1581;"	d
GL_MAX_DRAW_BUFFERS	render/glcorearb.h	707;"	d
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS	render/glcorearb.h	1631;"	d
GL_MAX_ELEMENTS_INDICES	render/glcorearb.h	459;"	d
GL_MAX_ELEMENTS_VERTICES	render/glcorearb.h	458;"	d
GL_MAX_ELEMENT_INDEX	render/glcorearb.h	2250;"	d
GL_MAX_FRAGMENT_ATOMIC_COUNTERS	render/glcorearb.h	2129;"	d
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS	render/glcorearb.h	2123;"	d
GL_MAX_FRAGMENT_IMAGE_UNIFORMS	render/glcorearb.h	2198;"	d
GL_MAX_FRAGMENT_INPUT_COMPONENTS	render/glcorearb.h	1539;"	d
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET	render/glcorearb.h	1721;"	d
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS	render/glcorearb.h	2468;"	d
GL_MAX_FRAGMENT_UNIFORM_BLOCKS	render/glcorearb.h	1424;"	d
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS	render/glcorearb.h	730;"	d
GL_MAX_FRAGMENT_UNIFORM_VECTORS	render/glcorearb.h	1894;"	d
GL_MAX_FRAMEBUFFER_HEIGHT	render/glcorearb.h	2312;"	d
GL_MAX_FRAMEBUFFER_LAYERS	render/glcorearb.h	2313;"	d
GL_MAX_FRAMEBUFFER_SAMPLES	render/glcorearb.h	2314;"	d
GL_MAX_FRAMEBUFFER_WIDTH	render/glcorearb.h	2311;"	d
GL_MAX_GEOMETRY_ATOMIC_COUNTERS	render/glcorearb.h	2128;"	d
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS	render/glcorearb.h	2122;"	d
GL_MAX_GEOMETRY_IMAGE_UNIFORMS	render/glcorearb.h	2197;"	d
GL_MAX_GEOMETRY_INPUT_COMPONENTS	render/glcorearb.h	1537;"	d
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS	render/glcorearb.h	1538;"	d
GL_MAX_GEOMETRY_OUTPUT_VERTICES	render/glcorearb.h	1534;"	d
GL_MAX_GEOMETRY_SHADER_INVOCATIONS	render/glcorearb.h	1719;"	d
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS	render/glcorearb.h	2465;"	d
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS	render/glcorearb.h	1526;"	d
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS	render/glcorearb.h	1535;"	d
GL_MAX_GEOMETRY_UNIFORM_BLOCKS	render/glcorearb.h	3188;"	d
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS	render/glcorearb.h	1533;"	d
GL_MAX_HEIGHT	render/glcorearb.h	2331;"	d
GL_MAX_IMAGE_SAMPLES	render/glcorearb.h	2189;"	d
GL_MAX_IMAGE_UNITS	render/glcorearb.h	2149;"	d
GL_MAX_INTEGER_SAMPLES	render/glcorearb.h	1582;"	d
GL_MAX_LABEL_LENGTH	render/glcorearb.h	2302;"	d
GL_MAX_LAYERS	render/glcorearb.h	2333;"	d
GL_MAX_NAME_LENGTH	render/glcorearb.h	2433;"	d
GL_MAX_NUM_ACTIVE_VARIABLES	render/glcorearb.h	2434;"	d
GL_MAX_NUM_COMPATIBLE_SUBROUTINES	render/glcorearb.h	2435;"	d
GL_MAX_PATCH_VERTICES	render/glcorearb.h	1757;"	d
GL_MAX_PROGRAM_TEXEL_OFFSET	render/glcorearb.h	1026;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB	render/glcorearb.h	3121;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET	render/glcorearb.h	1708;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB	render/glcorearb.h	3120;"	d
GL_MAX_RECTANGLE_TEXTURE_SIZE	render/glcorearb.h	1405;"	d
GL_MAX_RENDERBUFFER_SIZE	render/glcorearb.h	1117;"	d
GL_MAX_SAMPLES	render/glcorearb.h	1181;"	d
GL_MAX_SAMPLE_MASK_WORDS	render/glcorearb.h	1565;"	d
GL_MAX_SERVER_WAIT_TIMEOUT	render/glcorearb.h	1547;"	d
GL_MAX_SHADER_STORAGE_BLOCK_SIZE	render/glcorearb.h	2472;"	d
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS	render/glcorearb.h	2471;"	d
GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB	render/glcorearb.h	3065;"	d
GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB	render/glcorearb.h	3066;"	d
GL_MAX_SPARSE_TEXTURE_SIZE_ARB	render/glcorearb.h	3064;"	d
GL_MAX_SUBROUTINES	render/glcorearb.h	1741;"	d
GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS	render/glcorearb.h	1742;"	d
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS	render/glcorearb.h	2126;"	d
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS	render/glcorearb.h	2120;"	d
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS	render/glcorearb.h	2195;"	d
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS	render/glcorearb.h	1769;"	d
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS	render/glcorearb.h	1763;"	d
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS	render/glcorearb.h	2466;"	d
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS	render/glcorearb.h	1761;"	d
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS	render/glcorearb.h	1765;"	d
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS	render/glcorearb.h	1767;"	d
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS	render/glcorearb.h	1759;"	d
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS	render/glcorearb.h	2127;"	d
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS	render/glcorearb.h	2121;"	d
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS	render/glcorearb.h	2196;"	d
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS	render/glcorearb.h	1770;"	d
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS	render/glcorearb.h	1766;"	d
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS	render/glcorearb.h	2467;"	d
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS	render/glcorearb.h	1762;"	d
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS	render/glcorearb.h	1768;"	d
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS	render/glcorearb.h	1760;"	d
GL_MAX_TESS_GEN_LEVEL	render/glcorearb.h	1758;"	d
GL_MAX_TESS_PATCH_COMPONENTS	render/glcorearb.h	1764;"	d
GL_MAX_TEXTURE_BUFFER_SIZE	render/glcorearb.h	1399;"	d
GL_MAX_TEXTURE_IMAGE_UNITS	render/glcorearb.h	727;"	d
GL_MAX_TEXTURE_LOD_BIAS	render/glcorearb.h	576;"	d
GL_MAX_TEXTURE_SIZE	render/glcorearb.h	300;"	d
GL_MAX_TRANSFORM_FEEDBACK_BUFFERS	render/glcorearb.h	1781;"	d
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS	render/glcorearb.h	1050;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS	render/glcorearb.h	1051;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS	render/glcorearb.h	1043;"	d
GL_MAX_UNIFORM_BLOCK_SIZE	render/glcorearb.h	1427;"	d
GL_MAX_UNIFORM_BUFFER_BINDINGS	render/glcorearb.h	1426;"	d
GL_MAX_UNIFORM_LOCATIONS	render/glcorearb.h	2305;"	d
GL_MAX_VARYING_COMPONENTS	render/glcorearb.h	1029;"	d
GL_MAX_VARYING_FLOATS	render/glcorearb.h	732;"	d
GL_MAX_VARYING_VECTORS	render/glcorearb.h	1893;"	d
GL_MAX_VERTEX_ATOMIC_COUNTERS	render/glcorearb.h	2125;"	d
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS	render/glcorearb.h	2119;"	d
GL_MAX_VERTEX_ATTRIBS	render/glcorearb.h	725;"	d
GL_MAX_VERTEX_ATTRIB_BINDINGS	render/glcorearb.h	2491;"	d
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET	render/glcorearb.h	2490;"	d
GL_MAX_VERTEX_ATTRIB_STRIDE	render/glcorearb.h	2585;"	d
GL_MAX_VERTEX_IMAGE_UNIFORMS	render/glcorearb.h	2194;"	d
GL_MAX_VERTEX_OUTPUT_COMPONENTS	render/glcorearb.h	1536;"	d
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS	render/glcorearb.h	2464;"	d
GL_MAX_VERTEX_STREAMS	render/glcorearb.h	1723;"	d
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	render/glcorearb.h	733;"	d
GL_MAX_VERTEX_UNIFORM_BLOCKS	render/glcorearb.h	1423;"	d
GL_MAX_VERTEX_UNIFORM_COMPONENTS	render/glcorearb.h	731;"	d
GL_MAX_VERTEX_UNIFORM_VECTORS	render/glcorearb.h	1892;"	d
GL_MAX_VIEWPORTS	render/glcorearb.h	1909;"	d
GL_MAX_VIEWPORT_DIMS	render/glcorearb.h	301;"	d
GL_MAX_WIDTH	render/glcorearb.h	2330;"	d
GL_MEDIUM_FLOAT	render/glcorearb.h	1884;"	d
GL_MEDIUM_INT	render/glcorearb.h	1887;"	d
GL_MIN	render/glcorearb.h	586;"	d
GL_MINOR_VERSION	render/glcorearb.h	1013;"	d
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET	render/glcorearb.h	1720;"	d
GL_MIN_MAP_BUFFER_ALIGNMENT	render/glcorearb.h	2106;"	d
GL_MIN_PROGRAM_TEXEL_OFFSET	render/glcorearb.h	1025;"	d
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET	render/glcorearb.h	1707;"	d
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB	render/glcorearb.h	3119;"	d
GL_MIN_SAMPLE_SHADING_VALUE	render/glcorearb.h	1706;"	d
GL_MIN_SAMPLE_SHADING_VALUE_ARB	render/glcorearb.h	2963;"	d
GL_MIN_SPARSE_LEVEL_ARB	render/glcorearb.h	3059;"	d
GL_MIPMAP	render/glcorearb.h	2351;"	d
GL_MIRRORED_REPEAT	render/glcorearb.h	575;"	d
GL_MIRROR_CLAMP_TO_EDGE	render/glcorearb.h	2603;"	d
GL_MULTISAMPLE	render/glcorearb.h	517;"	d
GL_NAMED_STRING_LENGTH_ARB	render/glcorearb.h	3033;"	d
GL_NAMED_STRING_TYPE_ARB	render/glcorearb.h	3034;"	d
GL_NAME_LENGTH	render/glcorearb.h	2436;"	d
GL_NAND	render/glcorearb.h	347;"	d
GL_NEAREST	render/glcorearb.h	372;"	d
GL_NEAREST_MIPMAP_LINEAR	render/glcorearb.h	376;"	d
GL_NEAREST_MIPMAP_NEAREST	render/glcorearb.h	374;"	d
GL_NEVER	render/glcorearb.h	209;"	d
GL_NICEST	render/glcorearb.h	322;"	d
GL_NONE	render/glcorearb.h	228;"	d
GL_NOOP	render/glcorearb.h	338;"	d
GL_NOR	render/glcorearb.h	341;"	d
GL_NOTEQUAL	render/glcorearb.h	214;"	d
GL_NO_ERROR	render/glcorearb.h	238;"	d
GL_NO_RESET_NOTIFICATION_ARB	render/glcorearb.h	2935;"	d
GL_NUM_ACTIVE_VARIABLES	render/glcorearb.h	2447;"	d
GL_NUM_COMPATIBLE_SUBROUTINES	render/glcorearb.h	1743;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	render/glcorearb.h	540;"	d
GL_NUM_EXTENSIONS	render/glcorearb.h	1014;"	d
GL_NUM_PROGRAM_BINARY_FORMATS	render/glcorearb.h	1898;"	d
GL_NUM_SAMPLE_COUNTS	render/glcorearb.h	2105;"	d
GL_NUM_SHADER_BINARY_FORMATS	render/glcorearb.h	1891;"	d
GL_NUM_SHADING_LANGUAGE_VERSIONS	render/glcorearb.h	2236;"	d
GL_NUM_VIRTUAL_PAGE_SIZES_ARB	render/glcorearb.h	3060;"	d
GL_OBJECT_TYPE	render/glcorearb.h	1548;"	d
GL_OFFSET	render/glcorearb.h	2439;"	d
GL_ONE	render/glcorearb.h	218;"	d
GL_ONE_MINUS_CONSTANT_ALPHA	render/glcorearb.h	591;"	d
GL_ONE_MINUS_CONSTANT_COLOR	render/glcorearb.h	589;"	d
GL_ONE_MINUS_DST_ALPHA	render/glcorearb.h	224;"	d
GL_ONE_MINUS_DST_COLOR	render/glcorearb.h	226;"	d
GL_ONE_MINUS_SRC1_ALPHA	render/glcorearb.h	1630;"	d
GL_ONE_MINUS_SRC1_COLOR	render/glcorearb.h	1629;"	d
GL_ONE_MINUS_SRC_ALPHA	render/glcorearb.h	222;"	d
GL_ONE_MINUS_SRC_COLOR	render/glcorearb.h	220;"	d
GL_OR	render/glcorearb.h	340;"	d
GL_OR_INVERTED	render/glcorearb.h	346;"	d
GL_OR_REVERSE	render/glcorearb.h	344;"	d
GL_OUT_OF_MEMORY	render/glcorearb.h	242;"	d
GL_PACK_ALIGNMENT	render/glcorearb.h	299;"	d
GL_PACK_COMPRESSED_BLOCK_DEPTH	render/glcorearb.h	2103;"	d
GL_PACK_COMPRESSED_BLOCK_HEIGHT	render/glcorearb.h	2102;"	d
GL_PACK_COMPRESSED_BLOCK_SIZE	render/glcorearb.h	2104;"	d
GL_PACK_COMPRESSED_BLOCK_WIDTH	render/glcorearb.h	2101;"	d
GL_PACK_IMAGE_HEIGHT	render/glcorearb.h	441;"	d
GL_PACK_LSB_FIRST	render/glcorearb.h	295;"	d
GL_PACK_ROW_LENGTH	render/glcorearb.h	296;"	d
GL_PACK_SKIP_IMAGES	render/glcorearb.h	440;"	d
GL_PACK_SKIP_PIXELS	render/glcorearb.h	298;"	d
GL_PACK_SKIP_ROWS	render/glcorearb.h	297;"	d
GL_PACK_SWAP_BYTES	render/glcorearb.h	294;"	d
GL_PARAMETER_BUFFER_ARB	render/glcorearb.h	2868;"	d
GL_PARAMETER_BUFFER_BINDING_ARB	render/glcorearb.h	2869;"	d
GL_PATCHES	render/glcorearb.h	1745;"	d
GL_PATCH_DEFAULT_INNER_LEVEL	render/glcorearb.h	1747;"	d
GL_PATCH_DEFAULT_OUTER_LEVEL	render/glcorearb.h	1748;"	d
GL_PATCH_VERTICES	render/glcorearb.h	1746;"	d
GL_PIXEL_BUFFER_BARRIER_BIT	render/glcorearb.h	2142;"	d
GL_PIXEL_PACK_BUFFER	render/glcorearb.h	967;"	d
GL_PIXEL_PACK_BUFFER_BINDING	render/glcorearb.h	969;"	d
GL_PIXEL_UNPACK_BUFFER	render/glcorearb.h	968;"	d
GL_PIXEL_UNPACK_BUFFER_BINDING	render/glcorearb.h	970;"	d
GL_POINT	render/glcorearb.h	361;"	d
GL_POINTS	render/glcorearb.h	201;"	d
GL_POINT_FADE_THRESHOLD_SIZE	render/glcorearb.h	571;"	d
GL_POINT_SIZE	render/glcorearb.h	245;"	d
GL_POINT_SIZE_GRANULARITY	render/glcorearb.h	247;"	d
GL_POINT_SIZE_RANGE	render/glcorearb.h	246;"	d
GL_POINT_SPRITE_COORD_ORIGIN	render/glcorearb.h	769;"	d
GL_POLYGON_MODE	render/glcorearb.h	252;"	d
GL_POLYGON_OFFSET_FACTOR	render/glcorearb.h	309;"	d
GL_POLYGON_OFFSET_FILL	render/glcorearb.h	308;"	d
GL_POLYGON_OFFSET_LINE	render/glcorearb.h	307;"	d
GL_POLYGON_OFFSET_POINT	render/glcorearb.h	306;"	d
GL_POLYGON_OFFSET_UNITS	render/glcorearb.h	305;"	d
GL_POLYGON_SMOOTH	render/glcorearb.h	253;"	d
GL_POLYGON_SMOOTH_HINT	render/glcorearb.h	287;"	d
GL_PRIMITIVES_GENERATED	render/glcorearb.h	1047;"	d
GL_PRIMITIVE_RESTART	render/glcorearb.h	1415;"	d
GL_PRIMITIVE_RESTART_FIXED_INDEX	render/glcorearb.h	2248;"	d
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED	render/glcorearb.h	2586;"	d
GL_PRIMITIVE_RESTART_INDEX	render/glcorearb.h	1416;"	d
GL_PROGRAM	render/glcorearb.h	2298;"	d
GL_PROGRAM_BINARY_FORMATS	render/glcorearb.h	1899;"	d
GL_PROGRAM_BINARY_LENGTH	render/glcorearb.h	1897;"	d
GL_PROGRAM_BINARY_RETRIEVABLE_HINT	render/glcorearb.h	1896;"	d
GL_PROGRAM_INPUT	render/glcorearb.h	2415;"	d
GL_PROGRAM_OUTPUT	render/glcorearb.h	2416;"	d
GL_PROGRAM_PIPELINE	render/glcorearb.h	2300;"	d
GL_PROGRAM_PIPELINE_BINDING	render/glcorearb.h	1908;"	d
GL_PROGRAM_POINT_SIZE	render/glcorearb.h	1525;"	d
GL_PROGRAM_SEPARABLE	render/glcorearb.h	1906;"	d
GL_PROVOKING_VERTEX	render/glcorearb.h	1545;"	d
GL_PROXY_TEXTURE_1D	render/glcorearb.h	382;"	d
GL_PROXY_TEXTURE_1D_ARRAY	render/glcorearb.h	1031;"	d
GL_PROXY_TEXTURE_2D	render/glcorearb.h	383;"	d
GL_PROXY_TEXTURE_2D_ARRAY	render/glcorearb.h	1033;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE	render/glcorearb.h	1567;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY	render/glcorearb.h	1569;"	d
GL_PROXY_TEXTURE_3D	render/glcorearb.h	445;"	d
GL_PROXY_TEXTURE_CUBE_MAP	render/glcorearb.h	533;"	d
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY	render/glcorearb.h	1711;"	d
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB	render/glcorearb.h	3110;"	d
GL_PROXY_TEXTURE_RECTANGLE	render/glcorearb.h	1404;"	d
GL_QUADS	render/glcorearb.h	208;"	d
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION	render/glcorearb.h	1542;"	d
GL_QUERY	render/glcorearb.h	2299;"	d
GL_QUERY_BUFFER	render/glcorearb.h	2599;"	d
GL_QUERY_BUFFER_BARRIER_BIT	render/glcorearb.h	2600;"	d
GL_QUERY_BUFFER_BINDING	render/glcorearb.h	2601;"	d
GL_QUERY_BY_REGION_NO_WAIT	render/glcorearb.h	1098;"	d
GL_QUERY_BY_REGION_WAIT	render/glcorearb.h	1097;"	d
GL_QUERY_COUNTER_BITS	render/glcorearb.h	621;"	d
GL_QUERY_NO_WAIT	render/glcorearb.h	1096;"	d
GL_QUERY_RESULT	render/glcorearb.h	623;"	d
GL_QUERY_RESULT_AVAILABLE	render/glcorearb.h	624;"	d
GL_QUERY_RESULT_NO_WAIT	render/glcorearb.h	2602;"	d
GL_QUERY_WAIT	render/glcorearb.h	1095;"	d
GL_R11F_G11F_B10F	render/glcorearb.h	1036;"	d
GL_R16	render/glcorearb.h	1197;"	d
GL_R16F	render/glcorearb.h	1200;"	d
GL_R16I	render/glcorearb.h	1206;"	d
GL_R16UI	render/glcorearb.h	1207;"	d
GL_R16_SNORM	render/glcorearb.h	1410;"	d
GL_R32F	render/glcorearb.h	1201;"	d
GL_R32I	render/glcorearb.h	1208;"	d
GL_R32UI	render/glcorearb.h	1209;"	d
GL_R3_G3_B2	render/glcorearb.h	385;"	d
GL_R8	render/glcorearb.h	1196;"	d
GL_R8I	render/glcorearb.h	1204;"	d
GL_R8UI	render/glcorearb.h	1205;"	d
GL_R8_SNORM	render/glcorearb.h	1406;"	d
GL_RASTERIZER_DISCARD	render/glcorearb.h	1049;"	d
GL_READ_BUFFER	render/glcorearb.h	279;"	d
GL_READ_FRAMEBUFFER	render/glcorearb.h	1131;"	d
GL_READ_FRAMEBUFFER_BINDING	render/glcorearb.h	1133;"	d
GL_READ_ONLY	render/glcorearb.h	630;"	d
GL_READ_PIXELS	render/glcorearb.h	2344;"	d
GL_READ_PIXELS_FORMAT	render/glcorearb.h	2345;"	d
GL_READ_PIXELS_TYPE	render/glcorearb.h	2346;"	d
GL_READ_WRITE	render/glcorearb.h	632;"	d
GL_RED	render/glcorearb.h	355;"	d
GL_RED_INTEGER	render/glcorearb.h	1068;"	d
GL_REFERENCED_BY_COMPUTE_SHADER	render/glcorearb.h	2454;"	d
GL_REFERENCED_BY_FRAGMENT_SHADER	render/glcorearb.h	2453;"	d
GL_REFERENCED_BY_GEOMETRY_SHADER	render/glcorearb.h	2452;"	d
GL_REFERENCED_BY_TESS_CONTROL_SHADER	render/glcorearb.h	2450;"	d
GL_REFERENCED_BY_TESS_EVALUATION_SHADER	render/glcorearb.h	2451;"	d
GL_REFERENCED_BY_VERTEX_SHADER	render/glcorearb.h	2449;"	d
GL_RENDERBUFFER	render/glcorearb.h	1166;"	d
GL_RENDERBUFFER_ALPHA_SIZE	render/glcorearb.h	1177;"	d
GL_RENDERBUFFER_BINDING	render/glcorearb.h	1130;"	d
GL_RENDERBUFFER_BLUE_SIZE	render/glcorearb.h	1176;"	d
GL_RENDERBUFFER_DEPTH_SIZE	render/glcorearb.h	1178;"	d
GL_RENDERBUFFER_GREEN_SIZE	render/glcorearb.h	1175;"	d
GL_RENDERBUFFER_HEIGHT	render/glcorearb.h	1168;"	d
GL_RENDERBUFFER_INTERNAL_FORMAT	render/glcorearb.h	1169;"	d
GL_RENDERBUFFER_RED_SIZE	render/glcorearb.h	1174;"	d
GL_RENDERBUFFER_SAMPLES	render/glcorearb.h	1134;"	d
GL_RENDERBUFFER_STENCIL_SIZE	render/glcorearb.h	1179;"	d
GL_RENDERBUFFER_WIDTH	render/glcorearb.h	1167;"	d
GL_RENDERER	render/glcorearb.h	369;"	d
GL_REPEAT	render/glcorearb.h	384;"	d
GL_REPLACE	render/glcorearb.h	365;"	d
GL_RESET_NOTIFICATION_STRATEGY_ARB	render/glcorearb.h	2934;"	d
GL_RG	render/glcorearb.h	1194;"	d
GL_RG16	render/glcorearb.h	1199;"	d
GL_RG16F	render/glcorearb.h	1202;"	d
GL_RG16I	render/glcorearb.h	1212;"	d
GL_RG16UI	render/glcorearb.h	1213;"	d
GL_RG16_SNORM	render/glcorearb.h	1411;"	d
GL_RG32F	render/glcorearb.h	1203;"	d
GL_RG32I	render/glcorearb.h	1214;"	d
GL_RG32UI	render/glcorearb.h	1215;"	d
GL_RG8	render/glcorearb.h	1198;"	d
GL_RG8I	render/glcorearb.h	1210;"	d
GL_RG8UI	render/glcorearb.h	1211;"	d
GL_RG8_SNORM	render/glcorearb.h	1407;"	d
GL_RGB	render/glcorearb.h	359;"	d
GL_RGB10	render/glcorearb.h	389;"	d
GL_RGB10_A2	render/glcorearb.h	396;"	d
GL_RGB10_A2UI	render/glcorearb.h	1634;"	d
GL_RGB12	render/glcorearb.h	390;"	d
GL_RGB16	render/glcorearb.h	391;"	d
GL_RGB16F	render/glcorearb.h	1022;"	d
GL_RGB16I	render/glcorearb.h	1065;"	d
GL_RGB16UI	render/glcorearb.h	1059;"	d
GL_RGB16_SNORM	render/glcorearb.h	1412;"	d
GL_RGB32F	render/glcorearb.h	1020;"	d
GL_RGB32I	render/glcorearb.h	1063;"	d
GL_RGB32UI	render/glcorearb.h	1057;"	d
GL_RGB4	render/glcorearb.h	386;"	d
GL_RGB5	render/glcorearb.h	387;"	d
GL_RGB565	render/glcorearb.h	1895;"	d
GL_RGB5_A1	render/glcorearb.h	394;"	d
GL_RGB8	render/glcorearb.h	388;"	d
GL_RGB8I	render/glcorearb.h	1067;"	d
GL_RGB8UI	render/glcorearb.h	1061;"	d
GL_RGB8_SNORM	render/glcorearb.h	1408;"	d
GL_RGB9_E5	render/glcorearb.h	1038;"	d
GL_RGBA	render/glcorearb.h	360;"	d
GL_RGBA12	render/glcorearb.h	397;"	d
GL_RGBA16	render/glcorearb.h	398;"	d
GL_RGBA16F	render/glcorearb.h	1021;"	d
GL_RGBA16I	render/glcorearb.h	1064;"	d
GL_RGBA16UI	render/glcorearb.h	1058;"	d
GL_RGBA16_SNORM	render/glcorearb.h	1413;"	d
GL_RGBA2	render/glcorearb.h	392;"	d
GL_RGBA32F	render/glcorearb.h	1019;"	d
GL_RGBA32I	render/glcorearb.h	1062;"	d
GL_RGBA32UI	render/glcorearb.h	1056;"	d
GL_RGBA4	render/glcorearb.h	393;"	d
GL_RGBA8	render/glcorearb.h	395;"	d
GL_RGBA8I	render/glcorearb.h	1066;"	d
GL_RGBA8UI	render/glcorearb.h	1060;"	d
GL_RGBA8_SNORM	render/glcorearb.h	1409;"	d
GL_RGBA_INTEGER	render/glcorearb.h	1072;"	d
GL_RGB_INTEGER	render/glcorearb.h	1071;"	d
GL_RG_INTEGER	render/glcorearb.h	1195;"	d
GL_RIGHT	render/glcorearb.h	236;"	d
GL_SAMPLER	render/glcorearb.h	2301;"	d
GL_SAMPLER_1D	render/glcorearb.h	749;"	d
GL_SAMPLER_1D_ARRAY	render/glcorearb.h	1075;"	d
GL_SAMPLER_1D_ARRAY_SHADOW	render/glcorearb.h	1077;"	d
GL_SAMPLER_1D_SHADOW	render/glcorearb.h	753;"	d
GL_SAMPLER_2D	render/glcorearb.h	750;"	d
GL_SAMPLER_2D_ARRAY	render/glcorearb.h	1076;"	d
GL_SAMPLER_2D_ARRAY_SHADOW	render/glcorearb.h	1078;"	d
GL_SAMPLER_2D_MULTISAMPLE	render/glcorearb.h	1574;"	d
GL_SAMPLER_2D_MULTISAMPLE_ARRAY	render/glcorearb.h	1577;"	d
GL_SAMPLER_2D_RECT	render/glcorearb.h	1391;"	d
GL_SAMPLER_2D_RECT_SHADOW	render/glcorearb.h	1392;"	d
GL_SAMPLER_2D_SHADOW	render/glcorearb.h	754;"	d
GL_SAMPLER_3D	render/glcorearb.h	751;"	d
GL_SAMPLER_BINDING	render/glcorearb.h	1633;"	d
GL_SAMPLER_BUFFER	render/glcorearb.h	1393;"	d
GL_SAMPLER_CUBE	render/glcorearb.h	752;"	d
GL_SAMPLER_CUBE_MAP_ARRAY	render/glcorearb.h	1712;"	d
GL_SAMPLER_CUBE_MAP_ARRAY_ARB	render/glcorearb.h	3111;"	d
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW	render/glcorearb.h	1713;"	d
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB	render/glcorearb.h	3112;"	d
GL_SAMPLER_CUBE_SHADOW	render/glcorearb.h	1079;"	d
GL_SAMPLES	render/glcorearb.h	522;"	d
GL_SAMPLES_PASSED	render/glcorearb.h	645;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE	render/glcorearb.h	518;"	d
GL_SAMPLE_ALPHA_TO_ONE	render/glcorearb.h	519;"	d
GL_SAMPLE_BUFFERS	render/glcorearb.h	521;"	d
GL_SAMPLE_COVERAGE	render/glcorearb.h	520;"	d
GL_SAMPLE_COVERAGE_INVERT	render/glcorearb.h	524;"	d
GL_SAMPLE_COVERAGE_VALUE	render/glcorearb.h	523;"	d
GL_SAMPLE_MASK	render/glcorearb.h	1563;"	d
GL_SAMPLE_MASK_VALUE	render/glcorearb.h	1564;"	d
GL_SAMPLE_POSITION	render/glcorearb.h	1562;"	d
GL_SAMPLE_SHADING	render/glcorearb.h	1705;"	d
GL_SAMPLE_SHADING_ARB	render/glcorearb.h	2962;"	d
GL_SCISSOR_BOX	render/glcorearb.h	280;"	d
GL_SCISSOR_TEST	render/glcorearb.h	281;"	d
GL_SEPARATE_ATTRIBS	render/glcorearb.h	1053;"	d
GL_SET	render/glcorearb.h	348;"	d
GL_SHADER	render/glcorearb.h	2297;"	d
GL_SHADER_BINARY_FORMATS	render/glcorearb.h	1890;"	d
GL_SHADER_COMPILER	render/glcorearb.h	1889;"	d
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT	render/glcorearb.h	2140;"	d
GL_SHADER_IMAGE_ATOMIC	render/glcorearb.h	2369;"	d
GL_SHADER_IMAGE_LOAD	render/glcorearb.h	2367;"	d
GL_SHADER_IMAGE_STORE	render/glcorearb.h	2368;"	d
GL_SHADER_INCLUDE_ARB	render/glcorearb.h	3032;"	d
GL_SHADER_SOURCE_LENGTH	render/glcorearb.h	763;"	d
GL_SHADER_STORAGE_BARRIER_BIT	render/glcorearb.h	2474;"	d
GL_SHADER_STORAGE_BLOCK	render/glcorearb.h	2418;"	d
GL_SHADER_STORAGE_BUFFER	render/glcorearb.h	2460;"	d
GL_SHADER_STORAGE_BUFFER_BINDING	render/glcorearb.h	2461;"	d
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT	render/glcorearb.h	2473;"	d
GL_SHADER_STORAGE_BUFFER_SIZE	render/glcorearb.h	2463;"	d
GL_SHADER_STORAGE_BUFFER_START	render/glcorearb.h	2462;"	d
GL_SHADER_TYPE	render/glcorearb.h	735;"	d
GL_SHADING_LANGUAGE_VERSION	render/glcorearb.h	767;"	d
GL_SHORT	render/glcorearb.h	325;"	d
GL_SIGNALED	render/glcorearb.h	1555;"	d
GL_SIGNED_NORMALIZED	render/glcorearb.h	1414;"	d
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST	render/glcorearb.h	2374;"	d
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE	render/glcorearb.h	2376;"	d
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST	render/glcorearb.h	2375;"	d
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE	render/glcorearb.h	2377;"	d
GL_SMOOTH_LINE_WIDTH_GRANULARITY	render/glcorearb.h	468;"	d
GL_SMOOTH_LINE_WIDTH_RANGE	render/glcorearb.h	467;"	d
GL_SMOOTH_POINT_SIZE_GRANULARITY	render/glcorearb.h	466;"	d
GL_SMOOTH_POINT_SIZE_RANGE	render/glcorearb.h	465;"	d
GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB	render/glcorearb.h	3067;"	d
GL_SRC1_ALPHA	render/glcorearb.h	646;"	d
GL_SRC1_COLOR	render/glcorearb.h	1628;"	d
GL_SRC_ALPHA	render/glcorearb.h	221;"	d
GL_SRC_ALPHA_SATURATE	render/glcorearb.h	227;"	d
GL_SRC_COLOR	render/glcorearb.h	219;"	d
GL_SRGB	render/glcorearb.h	977;"	d
GL_SRGB8	render/glcorearb.h	978;"	d
GL_SRGB8_ALPHA8	render/glcorearb.h	980;"	d
GL_SRGB_ALPHA	render/glcorearb.h	979;"	d
GL_SRGB_DECODE_ARB	render/glcorearb.h	2884;"	d
GL_SRGB_READ	render/glcorearb.h	2355;"	d
GL_SRGB_WRITE	render/glcorearb.h	2356;"	d
GL_STACK_OVERFLOW	render/glcorearb.h	331;"	d
GL_STACK_UNDERFLOW	render/glcorearb.h	332;"	d
GL_STATIC_COPY	render/glcorearb.h	641;"	d
GL_STATIC_DRAW	render/glcorearb.h	639;"	d
GL_STATIC_READ	render/glcorearb.h	640;"	d
GL_STENCIL	render/glcorearb.h	352;"	d
GL_STENCIL_ATTACHMENT	render/glcorearb.h	1164;"	d
GL_STENCIL_BACK_FAIL	render/glcorearb.h	704;"	d
GL_STENCIL_BACK_FUNC	render/glcorearb.h	703;"	d
GL_STENCIL_BACK_PASS_DEPTH_FAIL	render/glcorearb.h	705;"	d
GL_STENCIL_BACK_PASS_DEPTH_PASS	render/glcorearb.h	706;"	d
GL_STENCIL_BACK_REF	render/glcorearb.h	772;"	d
GL_STENCIL_BACK_VALUE_MASK	render/glcorearb.h	773;"	d
GL_STENCIL_BACK_WRITEMASK	render/glcorearb.h	774;"	d
GL_STENCIL_BUFFER_BIT	render/glcorearb.h	197;"	d
GL_STENCIL_CLEAR_VALUE	render/glcorearb.h	263;"	d
GL_STENCIL_COMPONENTS	render/glcorearb.h	2337;"	d
GL_STENCIL_FAIL	render/glcorearb.h	266;"	d
GL_STENCIL_FUNC	render/glcorearb.h	264;"	d
GL_STENCIL_INDEX	render/glcorearb.h	353;"	d
GL_STENCIL_INDEX1	render/glcorearb.h	1170;"	d
GL_STENCIL_INDEX16	render/glcorearb.h	1173;"	d
GL_STENCIL_INDEX4	render/glcorearb.h	1171;"	d
GL_STENCIL_INDEX8	render/glcorearb.h	1172;"	d
GL_STENCIL_PASS_DEPTH_FAIL	render/glcorearb.h	267;"	d
GL_STENCIL_PASS_DEPTH_PASS	render/glcorearb.h	268;"	d
GL_STENCIL_REF	render/glcorearb.h	269;"	d
GL_STENCIL_RENDERABLE	render/glcorearb.h	2340;"	d
GL_STENCIL_TEST	render/glcorearb.h	262;"	d
GL_STENCIL_VALUE_MASK	render/glcorearb.h	265;"	d
GL_STENCIL_WRITEMASK	render/glcorearb.h	270;"	d
GL_STEREO	render/glcorearb.h	285;"	d
GL_STREAM_COPY	render/glcorearb.h	638;"	d
GL_STREAM_DRAW	render/glcorearb.h	636;"	d
GL_STREAM_READ	render/glcorearb.h	637;"	d
GL_SUBPIXEL_BITS	render/glcorearb.h	302;"	d
GL_SYNC_CL_EVENT_ARB	render/glcorearb.h	2694;"	d
GL_SYNC_CL_EVENT_COMPLETE_ARB	render/glcorearb.h	2695;"	d
GL_SYNC_CONDITION	render/glcorearb.h	1549;"	d
GL_SYNC_FENCE	render/glcorearb.h	1552;"	d
GL_SYNC_FLAGS	render/glcorearb.h	1551;"	d
GL_SYNC_FLUSH_COMMANDS_BIT	render/glcorearb.h	1561;"	d
GL_SYNC_GPU_COMMANDS_COMPLETE	render/glcorearb.h	1553;"	d
GL_SYNC_STATUS	render/glcorearb.h	1550;"	d
GL_TESS_CONTROL_OUTPUT_VERTICES	render/glcorearb.h	1749;"	d
GL_TESS_CONTROL_SHADER	render/glcorearb.h	1776;"	d
GL_TESS_CONTROL_SHADER_BIT	render/glcorearb.h	1903;"	d
GL_TESS_CONTROL_SUBROUTINE	render/glcorearb.h	2420;"	d
GL_TESS_CONTROL_SUBROUTINE_UNIFORM	render/glcorearb.h	2426;"	d
GL_TESS_CONTROL_TEXTURE	render/glcorearb.h	2359;"	d
GL_TESS_EVALUATION_SHADER	render/glcorearb.h	1775;"	d
GL_TESS_EVALUATION_SHADER_BIT	render/glcorearb.h	1904;"	d
GL_TESS_EVALUATION_SUBROUTINE	render/glcorearb.h	2421;"	d
GL_TESS_EVALUATION_SUBROUTINE_UNIFORM	render/glcorearb.h	2427;"	d
GL_TESS_EVALUATION_TEXTURE	render/glcorearb.h	2360;"	d
GL_TESS_GEN_MODE	render/glcorearb.h	1750;"	d
GL_TESS_GEN_POINT_MODE	render/glcorearb.h	1753;"	d
GL_TESS_GEN_SPACING	render/glcorearb.h	1751;"	d
GL_TESS_GEN_VERTEX_ORDER	render/glcorearb.h	1752;"	d
GL_TEXTURE	render/glcorearb.h	349;"	d
GL_TEXTURE0	render/glcorearb.h	484;"	d
GL_TEXTURE1	render/glcorearb.h	485;"	d
GL_TEXTURE10	render/glcorearb.h	494;"	d
GL_TEXTURE11	render/glcorearb.h	495;"	d
GL_TEXTURE12	render/glcorearb.h	496;"	d
GL_TEXTURE13	render/glcorearb.h	497;"	d
GL_TEXTURE14	render/glcorearb.h	498;"	d
GL_TEXTURE15	render/glcorearb.h	499;"	d
GL_TEXTURE16	render/glcorearb.h	500;"	d
GL_TEXTURE17	render/glcorearb.h	501;"	d
GL_TEXTURE18	render/glcorearb.h	502;"	d
GL_TEXTURE19	render/glcorearb.h	503;"	d
GL_TEXTURE2	render/glcorearb.h	486;"	d
GL_TEXTURE20	render/glcorearb.h	504;"	d
GL_TEXTURE21	render/glcorearb.h	505;"	d
GL_TEXTURE22	render/glcorearb.h	506;"	d
GL_TEXTURE23	render/glcorearb.h	507;"	d
GL_TEXTURE24	render/glcorearb.h	508;"	d
GL_TEXTURE25	render/glcorearb.h	509;"	d
GL_TEXTURE26	render/glcorearb.h	510;"	d
GL_TEXTURE27	render/glcorearb.h	511;"	d
GL_TEXTURE28	render/glcorearb.h	512;"	d
GL_TEXTURE29	render/glcorearb.h	513;"	d
GL_TEXTURE3	render/glcorearb.h	487;"	d
GL_TEXTURE30	render/glcorearb.h	514;"	d
GL_TEXTURE31	render/glcorearb.h	515;"	d
GL_TEXTURE4	render/glcorearb.h	488;"	d
GL_TEXTURE5	render/glcorearb.h	489;"	d
GL_TEXTURE6	render/glcorearb.h	490;"	d
GL_TEXTURE7	render/glcorearb.h	491;"	d
GL_TEXTURE8	render/glcorearb.h	492;"	d
GL_TEXTURE9	render/glcorearb.h	493;"	d
GL_TEXTURE_1D	render/glcorearb.h	303;"	d
GL_TEXTURE_1D_ARRAY	render/glcorearb.h	1030;"	d
GL_TEXTURE_2D	render/glcorearb.h	304;"	d
GL_TEXTURE_2D_ARRAY	render/glcorearb.h	1032;"	d
GL_TEXTURE_2D_MULTISAMPLE	render/glcorearb.h	1566;"	d
GL_TEXTURE_2D_MULTISAMPLE_ARRAY	render/glcorearb.h	1568;"	d
GL_TEXTURE_3D	render/glcorearb.h	444;"	d
GL_TEXTURE_ALPHA_SIZE	render/glcorearb.h	319;"	d
GL_TEXTURE_ALPHA_TYPE	render/glcorearb.h	1125;"	d
GL_TEXTURE_BASE_LEVEL	render/glcorearb.h	463;"	d
GL_TEXTURE_BINDING_1D	render/glcorearb.h	310;"	d
GL_TEXTURE_BINDING_1D_ARRAY	render/glcorearb.h	1034;"	d
GL_TEXTURE_BINDING_2D	render/glcorearb.h	311;"	d
GL_TEXTURE_BINDING_2D_ARRAY	render/glcorearb.h	1035;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE	render/glcorearb.h	1570;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY	render/glcorearb.h	1571;"	d
GL_TEXTURE_BINDING_3D	render/glcorearb.h	439;"	d
GL_TEXTURE_BINDING_BUFFER	render/glcorearb.h	1400;"	d
GL_TEXTURE_BINDING_CUBE_MAP	render/glcorearb.h	526;"	d
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY	render/glcorearb.h	1710;"	d
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB	render/glcorearb.h	3109;"	d
GL_TEXTURE_BINDING_RECTANGLE	render/glcorearb.h	1403;"	d
GL_TEXTURE_BLUE_SIZE	render/glcorearb.h	318;"	d
GL_TEXTURE_BLUE_TYPE	render/glcorearb.h	1124;"	d
GL_TEXTURE_BORDER_COLOR	render/glcorearb.h	315;"	d
GL_TEXTURE_BUFFER	render/glcorearb.h	1398;"	d
GL_TEXTURE_BUFFER_BINDING	render/glcorearb.h	2587;"	d
GL_TEXTURE_BUFFER_DATA_STORE_BINDING	render/glcorearb.h	1401;"	d
GL_TEXTURE_BUFFER_OFFSET	render/glcorearb.h	2477;"	d
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT	render/glcorearb.h	2479;"	d
GL_TEXTURE_BUFFER_SIZE	render/glcorearb.h	2478;"	d
GL_TEXTURE_COMPARE_FUNC	render/glcorearb.h	582;"	d
GL_TEXTURE_COMPARE_MODE	render/glcorearb.h	581;"	d
GL_TEXTURE_COMPRESSED	render/glcorearb.h	539;"	d
GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT	render/glcorearb.h	2379;"	d
GL_TEXTURE_COMPRESSED_BLOCK_SIZE	render/glcorearb.h	2380;"	d
GL_TEXTURE_COMPRESSED_BLOCK_WIDTH	render/glcorearb.h	2378;"	d
GL_TEXTURE_COMPRESSED_IMAGE_SIZE	render/glcorearb.h	538;"	d
GL_TEXTURE_COMPRESSION_HINT	render/glcorearb.h	537;"	d
GL_TEXTURE_CUBE_MAP	render/glcorearb.h	525;"	d
GL_TEXTURE_CUBE_MAP_ARRAY	render/glcorearb.h	1709;"	d
GL_TEXTURE_CUBE_MAP_ARRAY_ARB	render/glcorearb.h	3108;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_X	render/glcorearb.h	528;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	render/glcorearb.h	530;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	render/glcorearb.h	532;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_X	render/glcorearb.h	527;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Y	render/glcorearb.h	529;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Z	render/glcorearb.h	531;"	d
GL_TEXTURE_CUBE_MAP_SEAMLESS	render/glcorearb.h	1546;"	d
GL_TEXTURE_DEPTH	render/glcorearb.h	446;"	d
GL_TEXTURE_DEPTH_SIZE	render/glcorearb.h	580;"	d
GL_TEXTURE_DEPTH_TYPE	render/glcorearb.h	1126;"	d
GL_TEXTURE_FETCH_BARRIER_BIT	render/glcorearb.h	2139;"	d
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS	render/glcorearb.h	1573;"	d
GL_TEXTURE_GATHER	render/glcorearb.h	2365;"	d
GL_TEXTURE_GATHER_SHADOW	render/glcorearb.h	2366;"	d
GL_TEXTURE_GREEN_SIZE	render/glcorearb.h	317;"	d
GL_TEXTURE_GREEN_TYPE	render/glcorearb.h	1123;"	d
GL_TEXTURE_HEIGHT	render/glcorearb.h	313;"	d
GL_TEXTURE_IMAGE_FORMAT	render/glcorearb.h	2347;"	d
GL_TEXTURE_IMAGE_TYPE	render/glcorearb.h	2348;"	d
GL_TEXTURE_IMMUTABLE_FORMAT	render/glcorearb.h	2204;"	d
GL_TEXTURE_IMMUTABLE_LEVELS	render/glcorearb.h	2484;"	d
GL_TEXTURE_INTERNAL_FORMAT	render/glcorearb.h	314;"	d
GL_TEXTURE_LOD_BIAS	render/glcorearb.h	577;"	d
GL_TEXTURE_MAG_FILTER	render/glcorearb.h	378;"	d
GL_TEXTURE_MAX_LEVEL	render/glcorearb.h	464;"	d
GL_TEXTURE_MAX_LOD	render/glcorearb.h	462;"	d
GL_TEXTURE_MIN_FILTER	render/glcorearb.h	379;"	d
GL_TEXTURE_MIN_LOD	render/glcorearb.h	461;"	d
GL_TEXTURE_RECTANGLE	render/glcorearb.h	1402;"	d
GL_TEXTURE_RED_SIZE	render/glcorearb.h	316;"	d
GL_TEXTURE_RED_TYPE	render/glcorearb.h	1122;"	d
GL_TEXTURE_SAMPLES	render/glcorearb.h	1572;"	d
GL_TEXTURE_SHADOW	render/glcorearb.h	2364;"	d
GL_TEXTURE_SHARED_SIZE	render/glcorearb.h	1040;"	d
GL_TEXTURE_SPARSE_ARB	render/glcorearb.h	3057;"	d
GL_TEXTURE_STENCIL_SIZE	render/glcorearb.h	1121;"	d
GL_TEXTURE_SWIZZLE_A	render/glcorearb.h	1638;"	d
GL_TEXTURE_SWIZZLE_B	render/glcorearb.h	1637;"	d
GL_TEXTURE_SWIZZLE_G	render/glcorearb.h	1636;"	d
GL_TEXTURE_SWIZZLE_R	render/glcorearb.h	1635;"	d
GL_TEXTURE_SWIZZLE_RGBA	render/glcorearb.h	1639;"	d
GL_TEXTURE_UPDATE_BARRIER_BIT	render/glcorearb.h	2143;"	d
GL_TEXTURE_VIEW	render/glcorearb.h	2382;"	d
GL_TEXTURE_VIEW_MIN_LAYER	render/glcorearb.h	2482;"	d
GL_TEXTURE_VIEW_MIN_LEVEL	render/glcorearb.h	2480;"	d
GL_TEXTURE_VIEW_NUM_LAYERS	render/glcorearb.h	2483;"	d
GL_TEXTURE_VIEW_NUM_LEVELS	render/glcorearb.h	2481;"	d
GL_TEXTURE_WIDTH	render/glcorearb.h	312;"	d
GL_TEXTURE_WRAP_R	render/glcorearb.h	447;"	d
GL_TEXTURE_WRAP_S	render/glcorearb.h	380;"	d
GL_TEXTURE_WRAP_T	render/glcorearb.h	381;"	d
GL_TIMEOUT_EXPIRED	render/glcorearb.h	1557;"	d
GL_TIMEOUT_IGNORED	render/glcorearb.h	1560;"	d
GL_TIMESTAMP	render/glcorearb.h	1641;"	d
GL_TIME_ELAPSED	render/glcorearb.h	1640;"	d
GL_TOP_LEVEL_ARRAY_SIZE	render/glcorearb.h	2455;"	d
GL_TOP_LEVEL_ARRAY_STRIDE	render/glcorearb.h	2456;"	d
GL_TRANSFORM_FEEDBACK	render/glcorearb.h	1777;"	d
GL_TRANSFORM_FEEDBACK_ACTIVE	render/glcorearb.h	3175;"	d
GL_TRANSFORM_FEEDBACK_BARRIER_BIT	render/glcorearb.h	2146;"	d
GL_TRANSFORM_FEEDBACK_BINDING	render/glcorearb.h	1780;"	d
GL_TRANSFORM_FEEDBACK_BUFFER	render/glcorearb.h	1054;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE	render/glcorearb.h	1779;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING	render/glcorearb.h	1055;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_INDEX	render/glcorearb.h	2597;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_MODE	render/glcorearb.h	1042;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED	render/glcorearb.h	1778;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE	render/glcorearb.h	1046;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_START	render/glcorearb.h	1045;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE	render/glcorearb.h	2598;"	d
GL_TRANSFORM_FEEDBACK_PAUSED	render/glcorearb.h	3174;"	d
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN	render/glcorearb.h	1048;"	d
GL_TRANSFORM_FEEDBACK_VARYING	render/glcorearb.h	2431;"	d
GL_TRANSFORM_FEEDBACK_VARYINGS	render/glcorearb.h	1044;"	d
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH	render/glcorearb.h	1041;"	d
GL_TRIANGLES	render/glcorearb.h	205;"	d
GL_TRIANGLES_ADJACENCY	render/glcorearb.h	1523;"	d
GL_TRIANGLE_FAN	render/glcorearb.h	207;"	d
GL_TRIANGLE_STRIP	render/glcorearb.h	206;"	d
GL_TRIANGLE_STRIP_ADJACENCY	render/glcorearb.h	1524;"	d
GL_TRUE	render/glcorearb.h	200;"	d
GL_TYPE	render/glcorearb.h	2437;"	d
GL_UNDEFINED_VERTEX	render/glcorearb.h	1914;"	d
GL_UNIFORM	render/glcorearb.h	2413;"	d
GL_UNIFORM_ARRAY_STRIDE	render/glcorearb.h	1438;"	d
GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX	render/glcorearb.h	2134;"	d
GL_UNIFORM_BARRIER_BIT	render/glcorearb.h	2138;"	d
GL_UNIFORM_BLOCK	render/glcorearb.h	2414;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS	render/glcorearb.h	1444;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES	render/glcorearb.h	1445;"	d
GL_UNIFORM_BLOCK_BINDING	render/glcorearb.h	1441;"	d
GL_UNIFORM_BLOCK_DATA_SIZE	render/glcorearb.h	1442;"	d
GL_UNIFORM_BLOCK_INDEX	render/glcorearb.h	1436;"	d
GL_UNIFORM_BLOCK_NAME_LENGTH	render/glcorearb.h	1443;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER	render/glcorearb.h	2264;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER	render/glcorearb.h	1447;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER	render/glcorearb.h	3190;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER	render/glcorearb.h	1773;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER	render/glcorearb.h	1774;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER	render/glcorearb.h	1446;"	d
GL_UNIFORM_BUFFER	render/glcorearb.h	1419;"	d
GL_UNIFORM_BUFFER_BINDING	render/glcorearb.h	1420;"	d
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT	render/glcorearb.h	1430;"	d
GL_UNIFORM_BUFFER_SIZE	render/glcorearb.h	1422;"	d
GL_UNIFORM_BUFFER_START	render/glcorearb.h	1421;"	d
GL_UNIFORM_IS_ROW_MAJOR	render/glcorearb.h	1440;"	d
GL_UNIFORM_MATRIX_STRIDE	render/glcorearb.h	1439;"	d
GL_UNIFORM_NAME_LENGTH	render/glcorearb.h	1435;"	d
GL_UNIFORM_OFFSET	render/glcorearb.h	1437;"	d
GL_UNIFORM_SIZE	render/glcorearb.h	1434;"	d
GL_UNIFORM_TYPE	render/glcorearb.h	1433;"	d
GL_UNKNOWN_CONTEXT_RESET_ARB	render/glcorearb.h	2933;"	d
GL_UNPACK_ALIGNMENT	render/glcorearb.h	293;"	d
GL_UNPACK_COMPRESSED_BLOCK_DEPTH	render/glcorearb.h	2099;"	d
GL_UNPACK_COMPRESSED_BLOCK_HEIGHT	render/glcorearb.h	2098;"	d
GL_UNPACK_COMPRESSED_BLOCK_SIZE	render/glcorearb.h	2100;"	d
GL_UNPACK_COMPRESSED_BLOCK_WIDTH	render/glcorearb.h	2097;"	d
GL_UNPACK_IMAGE_HEIGHT	render/glcorearb.h	443;"	d
GL_UNPACK_LSB_FIRST	render/glcorearb.h	289;"	d
GL_UNPACK_ROW_LENGTH	render/glcorearb.h	290;"	d
GL_UNPACK_SKIP_IMAGES	render/glcorearb.h	442;"	d
GL_UNPACK_SKIP_PIXELS	render/glcorearb.h	292;"	d
GL_UNPACK_SKIP_ROWS	render/glcorearb.h	291;"	d
GL_UNPACK_SWAP_BYTES	render/glcorearb.h	288;"	d
GL_UNSIGNALED	render/glcorearb.h	1554;"	d
GL_UNSIGNED_BYTE	render/glcorearb.h	324;"	d
GL_UNSIGNED_BYTE_2_3_3_REV	render/glcorearb.h	449;"	d
GL_UNSIGNED_BYTE_3_3_2	render/glcorearb.h	434;"	d
GL_UNSIGNED_INT	render/glcorearb.h	328;"	d
GL_UNSIGNED_INT64_ARB	render/glcorearb.h	2645;"	d
GL_UNSIGNED_INT_10F_11F_11F_REV	render/glcorearb.h	1037;"	d
GL_UNSIGNED_INT_10_10_10_2	render/glcorearb.h	438;"	d
GL_UNSIGNED_INT_24_8	render/glcorearb.h	1119;"	d
GL_UNSIGNED_INT_2_10_10_10_REV	render/glcorearb.h	455;"	d
GL_UNSIGNED_INT_5_9_9_9_REV	render/glcorearb.h	1039;"	d
GL_UNSIGNED_INT_8_8_8_8	render/glcorearb.h	437;"	d
GL_UNSIGNED_INT_8_8_8_8_REV	render/glcorearb.h	454;"	d
GL_UNSIGNED_INT_ATOMIC_COUNTER	render/glcorearb.h	2135;"	d
GL_UNSIGNED_INT_IMAGE_1D	render/glcorearb.h	2178;"	d
GL_UNSIGNED_INT_IMAGE_1D_ARRAY	render/glcorearb.h	2184;"	d
GL_UNSIGNED_INT_IMAGE_2D	render/glcorearb.h	2179;"	d
GL_UNSIGNED_INT_IMAGE_2D_ARRAY	render/glcorearb.h	2185;"	d
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE	render/glcorearb.h	2187;"	d
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY	render/glcorearb.h	2188;"	d
GL_UNSIGNED_INT_IMAGE_2D_RECT	render/glcorearb.h	2181;"	d
GL_UNSIGNED_INT_IMAGE_3D	render/glcorearb.h	2180;"	d
GL_UNSIGNED_INT_IMAGE_BUFFER	render/glcorearb.h	2183;"	d
GL_UNSIGNED_INT_IMAGE_CUBE	render/glcorearb.h	2182;"	d
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY	render/glcorearb.h	2186;"	d
GL_UNSIGNED_INT_SAMPLER_1D	render/glcorearb.h	1089;"	d
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY	render/glcorearb.h	1093;"	d
GL_UNSIGNED_INT_SAMPLER_2D	render/glcorearb.h	1090;"	d
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY	render/glcorearb.h	1094;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE	render/glcorearb.h	1576;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	render/glcorearb.h	1579;"	d
GL_UNSIGNED_INT_SAMPLER_2D_RECT	render/glcorearb.h	1396;"	d
GL_UNSIGNED_INT_SAMPLER_3D	render/glcorearb.h	1091;"	d
GL_UNSIGNED_INT_SAMPLER_BUFFER	render/glcorearb.h	1397;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE	render/glcorearb.h	1092;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY	render/glcorearb.h	1715;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB	render/glcorearb.h	3114;"	d
GL_UNSIGNED_INT_VEC2	render/glcorearb.h	1080;"	d
GL_UNSIGNED_INT_VEC3	render/glcorearb.h	1081;"	d
GL_UNSIGNED_INT_VEC4	render/glcorearb.h	1082;"	d
GL_UNSIGNED_NORMALIZED	render/glcorearb.h	1127;"	d
GL_UNSIGNED_SHORT	render/glcorearb.h	326;"	d
GL_UNSIGNED_SHORT_1_5_5_5_REV	render/glcorearb.h	453;"	d
GL_UNSIGNED_SHORT_4_4_4_4	render/glcorearb.h	435;"	d
GL_UNSIGNED_SHORT_4_4_4_4_REV	render/glcorearb.h	452;"	d
GL_UNSIGNED_SHORT_5_5_5_1	render/glcorearb.h	436;"	d
GL_UNSIGNED_SHORT_5_6_5	render/glcorearb.h	450;"	d
GL_UNSIGNED_SHORT_5_6_5_REV	render/glcorearb.h	451;"	d
GL_UPPER_LEFT	render/glcorearb.h	771;"	d
GL_VALIDATE_STATUS	render/glcorearb.h	758;"	d
GL_VENDOR	render/glcorearb.h	368;"	d
GL_VERSION	render/glcorearb.h	370;"	d
GL_VERSION_1_0	render/glcorearb.h	81;"	d
GL_VERSION_1_1	render/glcorearb.h	193;"	d
GL_VERSION_1_2	render/glcorearb.h	433;"	d
GL_VERSION_1_3	render/glcorearb.h	483;"	d
GL_VERSION_1_4	render/glcorearb.h	566;"	d
GL_VERSION_1_5	render/glcorearb.h	615;"	d
GL_VERSION_2_0	render/glcorearb.h	690;"	d
GL_VERSION_2_1	render/glcorearb.h	966;"	d
GL_VERSION_3_0	render/glcorearb.h	1000;"	d
GL_VERSION_3_1	render/glcorearb.h	1390;"	d
GL_VERSION_3_2	render/glcorearb.h	1478;"	d
GL_VERSION_3_3	render/glcorearb.h	1626;"	d
GL_VERSION_4_0	render/glcorearb.h	1704;"	d
GL_VERSION_4_1	render/glcorearb.h	1879;"	d
GL_VERSION_4_2	render/glcorearb.h	2096;"	d
GL_VERSION_4_3	render/glcorearb.h	2234;"	d
GL_VERSION_4_4	render/glcorearb.h	2584;"	d
GL_VERTEX_ARRAY	render/glcorearb.h	399;"	d
GL_VERTEX_ARRAY_BINDING	render/glcorearb.h	1216;"	d
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT	render/glcorearb.h	2136;"	d
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	render/glcorearb.h	629;"	d
GL_VERTEX_ATTRIB_ARRAY_DIVISOR	render/glcorearb.h	1627;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	render/glcorearb.h	696;"	d
GL_VERTEX_ATTRIB_ARRAY_INTEGER	render/glcorearb.h	1023;"	d
GL_VERTEX_ATTRIB_ARRAY_LONG	render/glcorearb.h	2237;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	render/glcorearb.h	726;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	render/glcorearb.h	702;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	render/glcorearb.h	697;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	render/glcorearb.h	698;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	render/glcorearb.h	699;"	d
GL_VERTEX_ATTRIB_BINDING	render/glcorearb.h	2485;"	d
GL_VERTEX_ATTRIB_RELATIVE_OFFSET	render/glcorearb.h	2486;"	d
GL_VERTEX_BINDING_BUFFER	render/glcorearb.h	2492;"	d
GL_VERTEX_BINDING_DIVISOR	render/glcorearb.h	2487;"	d
GL_VERTEX_BINDING_OFFSET	render/glcorearb.h	2488;"	d
GL_VERTEX_BINDING_STRIDE	render/glcorearb.h	2489;"	d
GL_VERTEX_PROGRAM_POINT_SIZE	render/glcorearb.h	701;"	d
GL_VERTEX_SHADER	render/glcorearb.h	729;"	d
GL_VERTEX_SHADER_BIT	render/glcorearb.h	1900;"	d
GL_VERTEX_SUBROUTINE	render/glcorearb.h	2419;"	d
GL_VERTEX_SUBROUTINE_UNIFORM	render/glcorearb.h	2425;"	d
GL_VERTEX_TEXTURE	render/glcorearb.h	2358;"	d
GL_VIEWPORT	render/glcorearb.h	271;"	d
GL_VIEWPORT_BOUNDS_RANGE	render/glcorearb.h	1911;"	d
GL_VIEWPORT_INDEX_PROVOKING_VERTEX	render/glcorearb.h	1913;"	d
GL_VIEWPORT_SUBPIXEL_BITS	render/glcorearb.h	1910;"	d
GL_VIEW_CLASS_128_BITS	render/glcorearb.h	2397;"	d
GL_VIEW_CLASS_16_BITS	render/glcorearb.h	2403;"	d
GL_VIEW_CLASS_24_BITS	render/glcorearb.h	2402;"	d
GL_VIEW_CLASS_32_BITS	render/glcorearb.h	2401;"	d
GL_VIEW_CLASS_48_BITS	render/glcorearb.h	2400;"	d
GL_VIEW_CLASS_64_BITS	render/glcorearb.h	2399;"	d
GL_VIEW_CLASS_8_BITS	render/glcorearb.h	2404;"	d
GL_VIEW_CLASS_96_BITS	render/glcorearb.h	2398;"	d
GL_VIEW_CLASS_BPTC_FLOAT	render/glcorearb.h	2412;"	d
GL_VIEW_CLASS_BPTC_UNORM	render/glcorearb.h	2411;"	d
GL_VIEW_CLASS_RGTC1_RED	render/glcorearb.h	2409;"	d
GL_VIEW_CLASS_RGTC2_RG	render/glcorearb.h	2410;"	d
GL_VIEW_CLASS_S3TC_DXT1_RGB	render/glcorearb.h	2405;"	d
GL_VIEW_CLASS_S3TC_DXT1_RGBA	render/glcorearb.h	2406;"	d
GL_VIEW_CLASS_S3TC_DXT3_RGBA	render/glcorearb.h	2407;"	d
GL_VIEW_CLASS_S3TC_DXT5_RGBA	render/glcorearb.h	2408;"	d
GL_VIEW_COMPATIBILITY_CLASS	render/glcorearb.h	2383;"	d
GL_VIRTUAL_PAGE_SIZE_INDEX_ARB	render/glcorearb.h	3058;"	d
GL_VIRTUAL_PAGE_SIZE_X_ARB	render/glcorearb.h	3061;"	d
GL_VIRTUAL_PAGE_SIZE_Y_ARB	render/glcorearb.h	3062;"	d
GL_VIRTUAL_PAGE_SIZE_Z_ARB	render/glcorearb.h	3063;"	d
GL_WAIT_FAILED	render/glcorearb.h	1559;"	d
GL_WRITE_ONLY	render/glcorearb.h	631;"	d
GL_XOR	render/glcorearb.h	339;"	d
GL_ZERO	render/glcorearb.h	217;"	d
GLbitfield	render/glcorearb.h	/^typedef unsigned int GLbitfield;$/;"	t
GLboolean	render/glcorearb.h	/^typedef unsigned char GLboolean;$/;"	t
GLbyte	render/glcorearb.h	/^typedef signed char GLbyte;$/;"	t
GLchar	render/glcorearb.h	/^typedef char GLchar;$/;"	t
GLclampd	render/glcorearb.h	/^typedef double GLclampd;$/;"	t
GLclampf	render/glcorearb.h	/^typedef float GLclampf;$/;"	t
GLdouble	render/glcorearb.h	/^typedef double GLdouble;$/;"	t
GLenum	render/glcorearb.h	/^typedef unsigned int GLenum;$/;"	t
GLfloat	render/glcorearb.h	/^typedef float GLfloat;$/;"	t
GLhalf	render/glcorearb.h	/^typedef unsigned short GLhalf;$/;"	t
GLint	render/glcorearb.h	/^typedef int GLint;$/;"	t
GLint64	render/glcorearb.h	/^typedef int64_t GLint64;$/;"	t
GLintptr	render/glcorearb.h	/^typedef ptrdiff_t GLintptr;$/;"	t
GLshort	render/glcorearb.h	/^typedef short GLshort;$/;"	t
GLsizei	render/glcorearb.h	/^typedef int GLsizei;$/;"	t
GLsizeiptr	render/glcorearb.h	/^typedef ptrdiff_t GLsizeiptr;$/;"	t
GLsync	render/glcorearb.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync
GLubyte	render/glcorearb.h	/^typedef unsigned char GLubyte;$/;"	t
GLuint	render/glcorearb.h	/^typedef unsigned int GLuint;$/;"	t
GLuint64	render/glcorearb.h	/^typedef uint64_t GLuint64;$/;"	t
GLuint64EXT	render/glcorearb.h	/^typedef uint64_t GLuint64EXT;$/;"	t
GLushort	render/glcorearb.h	/^typedef unsigned short GLushort;$/;"	t
GLvoid	render/glcorearb.h	/^typedef void GLvoid;$/;"	t
GOOD	entity/actor.h	/^	enum Faction { GOOD, BAD, NEUTRAL };$/;"	e	enum:Actor::Faction
GenBuffers	render/context.h	/^  PFNGLGENBUFFERSPROC GenBuffers;$/;"	m	class:Render::Context	access:public
GenClouds	texgen/canvas.h	/^	void GenClouds( RNG& rng, double Ldiv = 3, double zoom = 64, uint8_t H = 169, uint8_t S = 255, int base = 192 )$/;"	f	class:Canvas	access:public	signature:( RNG& rng, double Ldiv = 3, double zoom = 64, uint8_t H = 169, uint8_t S = 255, int base = 192 )
GenFramebuffers	render/context.h	/^  PFNGLGENFRAMEBUFFERSPROC GenFramebuffers;$/;"	m	class:Render::Context	access:public
GenPixelTurbulence	texgen/canvas.h	/^	void GenPixelTurbulence( RNG& rng, int light = 64, int rel = 32 )$/;"	f	class:Canvas	access:public	signature:( RNG& rng, int light = 64, int rel = 32 )
GenRenderbuffers	render/context.h	/^  PFNGLGENRENDERBUFFERSPROC GenRenderbuffers;$/;"	m	class:Render::Context	access:public
GenRooms	map/mapgen.cpp	/^void GenRooms( RNG& rng, mapgen::RoomGenConfig cfg, DynamicArray<Room>& list_rooms)$/;"	f	namespace:mapgen	signature:( RNG& rng, mapgen::RoomGenConfig cfg, DynamicArray<Room>& list_rooms)
GenRooms	map/mapgen.h	/^void GenRooms( RNG& rng, mapgen::RoomGenConfig cfg, DynamicArray<Room>& list_rooms);$/;"	p	namespace:mapgen	signature:( RNG& rng, mapgen::RoomGenConfig cfg, DynamicArray<Room>& list_rooms)
GenTextures	render/context.h	/^  PFNGLGENTEXTURESPROC GenTextures;$/;"	m	class:Render::Context	access:public
GenThat	app/app.h	/^	void GenThat();$/;"	p	class:App	access:private	signature:()
GenTurbulence	texgen/canvas.h	/^	void GenTurbulence( RNG& rng, double zoom = 64, double base = 128, bool smooth = true )$/;"	f	class:Canvas	access:public	signature:( RNG& rng, double zoom = 64, double base = 128, bool smooth = true )
GenVertexArrays	render/context.h	/^  PFNGLGENVERTEXARRAYSPROC GenVertexArrays;$/;"	m	class:Render::Context	access:public
GenerateModels	map/map.h	/^	void GenerateModels( int block_type = 1 )$/;"	f	class:Map	access:public	signature:( int block_type = 1 )
Get	core/matrix2d.h	/^	T Get( int row, int col ) const$/;"	f	class:Matrix2D	access:public	signature:( int row, int col ) const
Get	map/map.h	/^	int Get( int x, int y )$/;"	f	class:Map	access:public	signature:( int x, int y )
Get	texgen/canvas.h	/^	Color Get( int x, int y )$/;"	f	class:Canvas	access:public	signature:( int x, int y )
GetAngleY	entity/entity.h	/^	float GetAngleY()$/;"	f	class:Entity	access:public	signature:()
GetAttribLocation	render/context.h	/^  PFNGLGETATTRIBLOCATIONPROC GetAttribLocation;$/;"	m	class:Render::Context	access:public
GetClosedListNext	ailib/stlastar.h	/^	UserState *GetClosedListNext( float &f, float &g, float &h )$/;"	f	class:AStarSearch	access:public	signature:( float &f, float &g, float &h )
GetClosedListNext	ailib/stlastar.h	/^	UserState *GetClosedListNext()$/;"	f	class:AStarSearch	access:public	signature:()
GetClosedListStart	ailib/stlastar.h	/^	UserState *GetClosedListStart( float &f, float &g, float &h )$/;"	f	class:AStarSearch	access:public	signature:( float &f, float &g, float &h )
GetClosedListStart	ailib/stlastar.h	/^	UserState *GetClosedListStart()$/;"	f	class:AStarSearch	access:public	signature:()
GetCost	ailib/mapsearchnode.h	/^	float GetCost( MapSearchNode& successor )$/;"	f	class:MapSearchNode	access:public	signature:( MapSearchNode& successor )
GetCost	ailib/stlastar.h	/^	virtual float GetCost( T &successor ) = 0; \/\/ Computes the cost of travelling from this node to the successor node$/;"	p	class:AStarState	access:public	signature:( T &successor )
GetFPS	core/fpscounter.h	/^	int GetFPS()$/;"	f	class:FPSCounter	access:public	signature:()
GetFalloutDamage	entity/script/effectsystem.h	/^	void GetFalloutDamage( Actor* actor )$/;"	f	class:FalloutSystem	access:private	signature:( Actor* actor )
GetFirst	ailib/fsa.h	/^	USER_TYPE *GetFirst()$/;"	f	class:FixedSizeAllocator	access:public	signature:()
GetForward	entity/script/helpers.cpp	/^cml::vector2f GetForward( Actor* actor )$/;"	f	signature:( Actor* actor )
GetForward	entity/script/helpers.h	/^cml::vector2f GetForward( Actor* actor );$/;"	p	signature:( Actor* actor )
GetFrame	render/animation.h	/^	int GetFrame( const Data& d )$/;"	f	class:Animation	access:public	signature:( const Data& d )
GetHorizontalAngle	render/camera.cpp	/^float Camera::GetHorizontalAngle() const$/;"	f	class:Camera	signature:() const
GetHorizontalAngle	render/camera.h	/^	float GetHorizontalAngle() const;$/;"	p	class:Camera	access:public	signature:() const
GetMap	ailib/mapsearchnode.h	/^	static int GetMap( int x, int y )$/;"	f	class:MapSearchNode	access:public	signature:( int x, int y )
GetModelsBuffer	map/map.h	/^	cml::matrix44f_c* GetModelsBuffer()$/;"	f	class:Map	access:public	signature:()
GetModelsNum	map/map.h	/^	int GetModelsNum()$/;"	f	class:Map	access:public	signature:()
GetNext	ailib/fsa.h	/^	USER_TYPE *GetNext( USER_TYPE *node )$/;"	f	class:FixedSizeAllocator	access:public	signature:( USER_TYPE *node )
GetOpenListNext	ailib/stlastar.h	/^	UserState *GetOpenListNext( float &f, float &g, float &h )$/;"	f	class:AStarSearch	access:public	signature:( float &f, float &g, float &h )
GetOpenListNext	ailib/stlastar.h	/^	UserState *GetOpenListNext()$/;"	f	class:AStarSearch	access:public	signature:()
GetOpenListStart	ailib/stlastar.h	/^	UserState *GetOpenListStart( float &f, float &g, float &h )$/;"	f	class:AStarSearch	access:public	signature:( float &f, float &g, float &h )
GetOpenListStart	ailib/stlastar.h	/^	UserState *GetOpenListStart()$/;"	f	class:AStarSearch	access:public	signature:()
GetPhysicBody	entity/entity.h	/^	b2Body* GetPhysicBody()$/;"	f	class:Entity	access:public	signature:()
GetPixelOffset	render/Bitmap.cpp	/^inline unsigned GetPixelOffset(unsigned col, unsigned row, unsigned width, unsigned height, Bitmap::Format format) {$/;"	f	signature:(unsigned col, unsigned row, unsigned width, unsigned height, Bitmap::Format format)
GetPosition	render/camera.cpp	/^const cml::vector3f& Camera::GetPosition() const$/;"	f	class:Camera	signature:() const
GetPosition	render/camera.h	/^	const cml::vector3f& GetPosition() const;$/;"	p	class:Camera	access:public	signature:() const
GetProc	render/context.h	/^  template <typename T> bool GetProc(T&p, const char*name)$/;"	f	class:Render::Context	access:protected	signature:(T&p, const char*name)
GetProc	render/context.h	/^  virtual bool GetProc(void*&p,const char*name) = 0;$/;"	p	class:Render::Context	access:protected	signature:(void*&p,const char*name)
GetProc	render/sdlcontext.h	/^  bool GetProc(void*&p,const char*name)$/;"	f	class:Render::SDL::Context	access:public	signature:(void*&p,const char*name)
GetProgramInfoLog	render/context.h	/^  PFNGLGETPROGRAMINFOLOGPROC GetProgramInfoLog;$/;"	m	class:Render::Context	access:public
GetProgramiv	render/context.h	/^  PFNGLGETPROGRAMIVPROC GetProgramiv;$/;"	m	class:Render::Context	access:public
GetProjection	render/camera.cpp	/^const cml::matrix44f_c& Camera::GetProjection()$/;"	f	class:Camera	signature:()
GetProjection	render/camera.h	/^	const cml::matrix44f_c& GetProjection();$/;"	p	class:Camera	access:public	signature:()
GetQuad	render/sprite3d.h	/^	Quad& GetQuad()$/;"	f	class:Sprite3D	access:public	signature:()
GetQuadAngleY	entity/entity.h	/^	float GetQuadAngleY()$/;"	f	class:Entity	access:public	signature:()
GetRawData	core/dynamicarray.h	/^	T* GetRawData()$/;"	f	class:DynamicArray	access:public	signature:()
GetScroll	map/map.h	/^	int GetScroll( int x, int y )$/;"	f	class:Map	access:public	signature:( int x, int y )
GetShaderInfoLog	render/context.h	/^  PFNGLGETSHADERINFOLOGPROC GetShaderInfoLog;$/;"	m	class:Render::Context	access:public
GetShaderiv	render/context.h	/^  PFNGLGETSHADERIVPROC GetShaderiv;$/;"	m	class:Render::Context	access:public
GetSolutionCost	ailib/stlastar.h	/^	float GetSolutionCost()$/;"	f	class:AStarSearch	access:public	signature:()
GetSolutionEnd	ailib/stlastar.h	/^	UserState *GetSolutionEnd()$/;"	f	class:AStarSearch	access:public	signature:()
GetSolutionNext	ailib/stlastar.h	/^	UserState *GetSolutionNext()$/;"	f	class:AStarSearch	access:public	signature:()
GetSolutionPrev	ailib/stlastar.h	/^	UserState *GetSolutionPrev()$/;"	f	class:AStarSearch	access:public	signature:()
GetSolutionStart	ailib/stlastar.h	/^	UserState *GetSolutionStart()$/;"	f	class:AStarSearch	access:public	signature:()
GetSprite	entity/entity.h	/^	Sprite3D* GetSprite()$/;"	f	class:Entity	access:public	signature:()
GetStepCount	ailib/stlastar.h	/^	int GetStepCount() { return m_Steps; }$/;"	f	class:AStarSearch	access:public	signature:()
GetSuccessors	ailib/mapsearchnode.h	/^	bool GetSuccessors( AStarSearch<MapSearchNode>* astarsearch, MapSearchNode* parent_node )$/;"	f	class:MapSearchNode	access:public	signature:( AStarSearch<MapSearchNode>* astarsearch, MapSearchNode* parent_node )
GetSuccessors	ailib/stlastar.h	/^	virtual bool GetSuccessors( AStarSearch<T> *astarsearch, T *parent_node ) = 0; \/\/ Retrieves all successors to this node and adds them via astarsearch.addSuccessor()$/;"	p	class:AStarState	access:public	signature:( AStarSearch<T> *astarsearch, T *parent_node )
GetTex	render/sprite3d.h	/^	tdogl::Texture* GetTex()$/;"	f	class:Sprite3D	access:public	signature:()
GetTransform	entity/entity.h	/^	Transform& GetTransform()$/;"	f	class:Entity	access:public	signature:()
GetType	entity/entity.h	/^	Entity::Type GetType()$/;"	f	class:Entity	access:public	signature:()
GetUniformLocation	render/context.h	/^  PFNGLGETUNIFORMLOCATIONPROC GetUniformLocation;$/;"	m	class:Render::Context	access:public
GetVAO	render/mesh.h	/^	GLuint GetVAO()$/;"	f	class:Mesh	access:public	signature:()
GetVBO	render/mesh.h	/^	GLuint GetVBO( int index )$/;"	f	class:Mesh	access:public	signature:( int index )
GetVersion	render/context.h	/^  virtual void GetVersion(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile) = 0;$/;"	p	class:Render::Context	access:protected	signature:(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)
GetVersion	render/sdlcontext.cpp	/^void Context::GetVersion(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)$/;"	f	class:Render::SDL::Context	signature:(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)
GetVersion	render/sdlcontext.h	/^  void GetVersion(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile);$/;"	p	class:Render::SDL::Context	access:public	signature:(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)
GetVerticalAngle	render/camera.cpp	/^float Camera::GetVerticalAngle() const$/;"	f	class:Camera	signature:() const
GetVerticalAngle	render/camera.h	/^	float GetVerticalAngle() const;$/;"	p	class:Camera	access:public	signature:() const
GetView	render/camera.cpp	/^const cml::matrix44f_c& Camera::GetView()$/;"	f	class:Camera	signature:()
GetView	render/camera.h	/^	const cml::matrix44f_c& GetView();$/;"	p	class:Camera	access:public	signature:()
GetWorld2DPos	entity/script/helpers.cpp	/^cml::vector2f GetWorld2DPos( cml::vector3f v )$/;"	f	signature:( cml::vector3f v )
GetWorld2DPos	entity/script/helpers.h	/^cml::vector2f GetWorld2DPos( cml::vector3f v );$/;"	p	signature:( cml::vector3f v )
GoalDistanceEstimate	ailib/mapsearchnode.h	/^	float GoalDistanceEstimate( MapSearchNode& nodeGoal )$/;"	f	class:MapSearchNode	access:public	signature:( MapSearchNode& nodeGoal )
GoalDistanceEstimate	ailib/stlastar.h	/^	virtual float GoalDistanceEstimate( T &nodeGoal ) = 0; \/\/ Heuristic function which computes the estimated cost to the goal node$/;"	p	class:AStarState	access:public	signature:( T &nodeGoal )
Grayscale2GrayscaleAlpha	render/Bitmap.cpp	/^static void Grayscale2GrayscaleAlpha(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
Grayscale2RGB	render/Bitmap.cpp	/^static void Grayscale2RGB(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
Grayscale2RGBA	render/Bitmap.cpp	/^static void Grayscale2RGBA(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
GrayscaleAlpha2Grayscale	render/Bitmap.cpp	/^static void GrayscaleAlpha2Grayscale(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
GrayscaleAlpha2RGB	render/Bitmap.cpp	/^static void GrayscaleAlpha2RGB(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
GrayscaleAlpha2RGBA	render/Bitmap.cpp	/^static void GrayscaleAlpha2RGBA(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
HACK	map/mapdata.h	/^		PATH, WARP, HACK$/;"	e	enum:mapgen::RoomConnection::Type
HCorridor	map/mapgen.cpp	/^void HCorridor( Map& map, int x0, int x1, int y, int block_type )$/;"	f	namespace:mapgen	signature:( Map& map, int x0, int x1, int y, int block_type )
HCorridor	map/mapgen.h	/^void HCorridor( Map& map, int x0, int x1, int y, Map::BlockType block_type = Map::BLOCK_FREE );$/;"	p	namespace:mapgen	signature:( Map& map, int x0, int x1, int y, Map::BlockType block_type = Map::BLOCK_FREE )
HEALTH	entity/pickup.h	/^		AMMO, HEALTH, ITEM$/;"	e	enum:Pickup::Type
HSLtoRGB	texgen/canvas.cpp	/^Color HSLtoRGB( Color hsl )$/;"	f	signature:( Color hsl )
HSLtoRGB	texgen/canvas.h	/^Color HSLtoRGB(Color hsl);$/;"	p	signature:(Color hsl)
HandleCamInput	app/app.h	/^	void HandleCamInput();$/;"	p	class:App	access:private	signature:()
HandleEvent	app/app.cpp	/^void App::HandleEvent(SDL_Event& event)$/;"	f	class:App	signature:(SDL_Event& event)
HandleEvent	app/app.h	/^	void HandleEvent(SDL_Event& event);$/;"	p	class:App	access:private	signature:(SDL_Event& event)
HandleEvent	app/sdlglapp.cpp	/^void SDLGLApp::HandleEvent(SDL_Event& event)$/;"	f	class:SDLGLApp	signature:(SDL_Event& event)
HandleEvent	app/sdlglapp.h	/^	virtual void HandleEvent(SDL_Event& event);$/;"	p	class:SDLGLApp	access:protected	signature:(SDL_Event& event)
HandleEvent	entity/controller/playerhumancontroller.cpp	/^int PlayerHumanController::HandleEvent( SDL_Event& event )$/;"	f	class:PlayerHumanController	signature:( SDL_Event& event )
HandleEvent	entity/controller/playerhumancontroller.h	/^	int HandleEvent( SDL_Event& event );$/;"	p	class:PlayerHumanController	access:public	signature:( SDL_Event& event )
HeapCompare_f	ailib/stlastar.h	/^	class HeapCompare_f $/;"	c	class:AStarSearch	access:public
Height	map/map.h	/^	int Height()$/;"	f	class:Map	access:public	signature:()
Height	texgen/canvas.h	/^	int Height()$/;"	f	class:Canvas	access:public	signature:()
INITIAL_SIZE	core/dynamicarray.h	/^	static const size_t INITIAL_SIZE = 20;$/;"	m	class:DynamicArray	access:private
ITEM	entity/pickup.h	/^		AMMO, HEALTH, ITEM$/;"	e	enum:Pickup::Type
Init	physics/physics.cpp	/^void Physics::Init( int argc, char** argv )$/;"	f	class:Physics	signature:( int argc, char** argv )
Init	physics/physics.h	/^	void Init( int argc, char** argv );$/;"	p	class:Physics	access:public	signature:( int argc, char** argv )
Intersection	map/mapdata.h	/^struct Intersection$/;"	s	namespace:mapgen
Intersects	map/mapdata.h	/^	bool Intersects( Room& other )$/;"	f	struct:mapgen::Room	access:public	signature:( Room& other )
Inventory	entity/script/inventory.cpp	/^Inventory::Inventory ()$/;"	f	class:Inventory	signature:()
Inventory	entity/script/inventory.h	/^	Inventory ();$/;"	p	class:Inventory	access:public	signature:()
Inventory	entity/script/inventory.h	/^class Inventory {$/;"	c
Inventory::AddItem	entity/script/inventory.cpp	/^bool Inventory::AddItem( Item* item )$/;"	f	class:Inventory	signature:( Item* item )
Inventory::AddItem	entity/script/inventory.h	/^	bool AddItem( Item* item );$/;"	p	class:Inventory	access:public	signature:( Item* item )
Inventory::Inventory	entity/script/inventory.cpp	/^Inventory::Inventory ()$/;"	f	class:Inventory	signature:()
Inventory::Inventory	entity/script/inventory.h	/^	Inventory ();$/;"	p	class:Inventory	access:public	signature:()
Inventory::__anon7::total	entity/script/inventory.h	/^		int total;$/;"	m	struct:Inventory::__anon7	access:public
Inventory::__anon7::used	entity/script/inventory.h	/^		int used;$/;"	m	struct:Inventory::__anon7	access:public
Inventory::items	entity/script/inventory.h	/^	DynamicArray<Item*> items;$/;"	m	class:Inventory	access:private
Inventory::space	entity/script/inventory.h	/^	} space;$/;"	m	class:Inventory	typeref:struct:Inventory::__anon7	access:private
Inventory::~Inventory	entity/script/inventory.cpp	/^Inventory::~Inventory ()$/;"	f	class:Inventory	signature:()
Inventory::~Inventory	entity/script/inventory.h	/^	virtual ~Inventory ();$/;"	p	class:Inventory	access:public	signature:()
IsAlive	entity/entity.h	/^	bool IsAlive()$/;"	f	class:Entity	access:public	signature:()
IsEmpty	core/dynamicarray.h	/^	bool IsEmpty()$/;"	f	class:DynamicArray	access:public	signature:()
IsFree	map/map.h	/^	bool IsFree( int x, int y )$/;"	f	class:Map	access:public	signature:( int x, int y )
IsGoal	ailib/mapsearchnode.h	/^	bool IsGoal( MapSearchNode& nodeGoal )$/;"	f	class:MapSearchNode	access:public	signature:( MapSearchNode& nodeGoal )
IsGoal	ailib/stlastar.h	/^	virtual bool IsGoal( T &nodeGoal ) = 0; \/\/ Returns true if this node is the goal node$/;"	p	class:AStarState	access:public	signature:( T &nodeGoal )
IsSameState	ailib/mapsearchnode.h	/^	bool IsSameState( MapSearchNode& rhs )$/;"	f	class:MapSearchNode	access:public	signature:( MapSearchNode& rhs )
IsSameState	ailib/stlastar.h	/^	virtual bool IsSameState( T &rhs ) = 0; \/\/ Returns true if this node is the same as the rhs node$/;"	p	class:AStarState	access:public	signature:( T &rhs )
Item	entity/script/inventory.h	/^} Item;$/;"	t	typeref:struct:__anon6
Left	map/mapdata.h	/^	int Left() { return x-floor(w\/2.f); }$/;"	f	struct:mapgen::Room	access:public	signature:()
LinkProgram	render/context.h	/^  PFNGLLINKPROGRAMPROC LinkProgram;$/;"	m	class:Render::Context	access:public
LoadBuffer	render/mesh.h	/^	void LoadBuffer( T* target, const T* source, int items_per_element )$/;"	f	class:Mesh	access:protected	signature:( T* target, const T* source, int items_per_element )
LoadFromFile	map/map.h	/^	void LoadFromFile( const char* path )$/;"	f	class:Map	access:public	signature:( const char* path )
LoadFromFile	render/shader.cpp	/^bool Shader::LoadFromFile( Render::Context* gl, const char* path, int t )$/;"	f	class:Shader	signature:( Render::Context* gl, const char* path, int t )
LoadFromFile	render/shader.h	/^	bool LoadFromFile( Render::Context* gl, const char* path, int t );$/;"	p	class:Shader	access:public	signature:( Render::Context* gl, const char* path, int t )
LoadTexture	render/assets.h	/^	void LoadTexture( Render::Context* gl, const char* path, int texid )$/;"	f	class:Assets	access:public	signature:( Render::Context* gl, const char* path, int texid )
MAP	physics/layers.h	/^	MAP =			0x0020,$/;"	e	enum:CollisionLayer
MOB	entity/entity.h	/^		MOB,$/;"	e	enum:Entity::Type
MOB_MASK	physics/physics.h	/^	static const uint16_t MOB_MASK = CollisionLayer::ALLY_BULLET | CollisionLayer::MAP | CollisionLayer::ENEMY | CollisionLayer::PLAYER;$/;"	m	class:Physics	access:public
MakeCurrent	render/context.cpp	/^bool Context::MakeCurrent()$/;"	f	class:Render::Context	signature:()
MakeCurrent	render/context.h	/^  bool MakeCurrent();$/;"	p	class:Render::Context	access:protected	signature:()
MakeCurrent	render/sdlcontext.cpp	/^bool Context::MakeCurrent( SDL_Window* w )$/;"	f	class:Render::SDL::Context	signature:( SDL_Window* w )
MakeCurrent	render/sdlcontext.h	/^  bool MakeCurrent( SDL_Window* w );$/;"	p	class:Render::SDL::Context	access:public	signature:( SDL_Window* w )
MakeNoise	texgen/canvas.h	/^	void MakeNoise( Matrix2D<float>& noise, RNG& rng, int w, int h )$/;"	f	class:Canvas	access:public	signature:( Matrix2D<float>& noise, RNG& rng, int w, int h )
Map	map/map.h	/^	Map( const Map& other ) : map_data(other.map_data) {}$/;"	f	class:Map	access:public	signature:( const Map& other )
Map	map/map.h	/^	Map(){}$/;"	f	class:Map	access:public	signature:()
Map	map/map.h	/^	Map(int w, int h)$/;"	f	class:Map	access:public	signature:(int w, int h)
Map	map/map.h	/^class Map$/;"	c
Map::BLOCK_FREE	map/map.h	/^	static const int BLOCK_FREE = 0;$/;"	m	class:Map	access:public
Map::BLOCK_SOLID	map/map.h	/^	static const int BLOCK_SOLID = 1;$/;"	m	class:Map	access:public
Map::BlockData	map/map.h	/^	struct BlockData$/;"	s	class:Map	access:private
Map::BlockData::Set	map/map.h	/^		void Set( int x, int y, int block_type )$/;"	f	struct:Map::BlockData	access:public	signature:( int x, int y, int block_type )
Map::BlockData::block_type	map/map.h	/^		int block_type;$/;"	m	struct:Map::BlockData	access:public
Map::BlockData::x	map/map.h	/^		int x, y;$/;"	m	struct:Map::BlockData	access:public
Map::BlockData::y	map/map.h	/^		int x, y;$/;"	m	struct:Map::BlockData	access:public
Map::BlockType	map/map.h	/^	typedef int BlockType;$/;"	t	class:Map	access:public
Map::CanMove	map/map.h	/^	bool CanMove( float x, float y, float blocksize = 2.f )$/;"	f	class:Map	access:public	signature:( float x, float y, float blocksize = 2.f )
Map::Debug	map/map.h	/^	void Debug()$/;"	f	class:Map	access:public	signature:()
Map::GenerateModels	map/map.h	/^	void GenerateModels( int block_type = 1 )$/;"	f	class:Map	access:public	signature:( int block_type = 1 )
Map::Get	map/map.h	/^	int Get( int x, int y )$/;"	f	class:Map	access:public	signature:( int x, int y )
Map::GetModelsBuffer	map/map.h	/^	cml::matrix44f_c* GetModelsBuffer()$/;"	f	class:Map	access:public	signature:()
Map::GetModelsNum	map/map.h	/^	int GetModelsNum()$/;"	f	class:Map	access:public	signature:()
Map::GetScroll	map/map.h	/^	int GetScroll( int x, int y )$/;"	f	class:Map	access:public	signature:( int x, int y )
Map::Height	map/map.h	/^	int Height()$/;"	f	class:Map	access:public	signature:()
Map::IsFree	map/map.h	/^	bool IsFree( int x, int y )$/;"	f	class:Map	access:public	signature:( int x, int y )
Map::LoadFromFile	map/map.h	/^	void LoadFromFile( const char* path )$/;"	f	class:Map	access:public	signature:( const char* path )
Map::Map	map/map.h	/^	Map( const Map& other ) : map_data(other.map_data) {}$/;"	f	class:Map	access:public	signature:( const Map& other )
Map::Map	map/map.h	/^	Map(){}$/;"	f	class:Map	access:public	signature:()
Map::Map	map/map.h	/^	Map(int w, int h)$/;"	f	class:Map	access:public	signature:(int w, int h)
Map::PrintModels	map/map.h	/^	void PrintModels()$/;"	f	class:Map	access:public	signature:()
Map::SaveToFile	map/map.h	/^	void SaveToFile( const char* path )$/;"	f	class:Map	access:public	signature:( const char* path )
Map::Set	map/map.h	/^	void Set( int x, int y, int block )$/;"	f	class:Map	access:public	signature:( int x, int y, int block )
Map::Width	map/map.h	/^	int Width()$/;"	f	class:Map	access:public	signature:()
Map::map_data	map/map.h	/^	Matrix2D<int> map_data;$/;"	m	class:Map	access:private
Map::model_list	map/map.h	/^	DynamicArray<cml::matrix44f_c> model_list;$/;"	m	class:Map	access:private
Map::operator =	map/map.h	/^	Map& operator=( const Map& other )$/;"	f	class:Map	access:public	signature:( const Map& other )
MapData	map/mapdata.h	/^struct MapData$/;"	s	namespace:mapgen
MapSearchNode	ailib/mapsearchnode.h	/^	MapSearchNode( int px, int py ) { x=px; y=py; }$/;"	f	class:MapSearchNode	access:public	signature:( int px, int py )
MapSearchNode	ailib/mapsearchnode.h	/^	MapSearchNode() { x=y=0; }$/;"	f	class:MapSearchNode	access:public	signature:()
MapSearchNode	ailib/mapsearchnode.h	/^class MapSearchNode {$/;"	c
MapSearchNode::GetCost	ailib/mapsearchnode.h	/^	float GetCost( MapSearchNode& successor )$/;"	f	class:MapSearchNode	access:public	signature:( MapSearchNode& successor )
MapSearchNode::GetMap	ailib/mapsearchnode.h	/^	static int GetMap( int x, int y )$/;"	f	class:MapSearchNode	access:public	signature:( int x, int y )
MapSearchNode::GetSuccessors	ailib/mapsearchnode.h	/^	bool GetSuccessors( AStarSearch<MapSearchNode>* astarsearch, MapSearchNode* parent_node )$/;"	f	class:MapSearchNode	access:public	signature:( AStarSearch<MapSearchNode>* astarsearch, MapSearchNode* parent_node )
MapSearchNode::GoalDistanceEstimate	ailib/mapsearchnode.h	/^	float GoalDistanceEstimate( MapSearchNode& nodeGoal )$/;"	f	class:MapSearchNode	access:public	signature:( MapSearchNode& nodeGoal )
MapSearchNode::IsGoal	ailib/mapsearchnode.h	/^	bool IsGoal( MapSearchNode& nodeGoal )$/;"	f	class:MapSearchNode	access:public	signature:( MapSearchNode& nodeGoal )
MapSearchNode::IsSameState	ailib/mapsearchnode.h	/^	bool IsSameState( MapSearchNode& rhs )$/;"	f	class:MapSearchNode	access:public	signature:( MapSearchNode& rhs )
MapSearchNode::MapSearchNode	ailib/mapsearchnode.h	/^	MapSearchNode( int px, int py ) { x=px; y=py; }$/;"	f	class:MapSearchNode	access:public	signature:( int px, int py )
MapSearchNode::MapSearchNode	ailib/mapsearchnode.h	/^	MapSearchNode() { x=y=0; }$/;"	f	class:MapSearchNode	access:public	signature:()
MapSearchNode::PrintNodeInfo	ailib/mapsearchnode.h	/^	void PrintNodeInfo()$/;"	f	class:MapSearchNode	access:public	signature:()
MapSearchNode::SetMap	ailib/mapsearchnode.h	/^	static SetMap( Map* pmap )$/;"	f	class:MapSearchNode	access:public	signature:( Map* pmap )
MapSearchNode::map	ailib/mapsearchnode.h	/^	static Map map;$/;"	m	class:MapSearchNode	access:private
MapSearchNode::x	ailib/mapsearchnode.h	/^	int x,y;$/;"	m	class:MapSearchNode	access:public
MapSearchNode::y	ailib/mapsearchnode.h	/^	int x,y;$/;"	m	class:MapSearchNode	access:public
Matrix	render/camera.cpp	/^cml::matrix44f_c Camera::Matrix()$/;"	f	class:Camera	signature:()
Matrix	render/camera.h	/^	cml::matrix44f_c Matrix();$/;"	p	class:Camera	access:public	signature:()
Matrix2D	core/matrix2d.h	/^	Matrix2D( const Matrix2D& other ) : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:( const Matrix2D& other )
Matrix2D	core/matrix2d.h	/^	Matrix2D( int rows_, int cols_ ) : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:( int rows_, int cols_ )
Matrix2D	core/matrix2d.h	/^	Matrix2D( int size ) : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:( int size )
Matrix2D	core/matrix2d.h	/^	Matrix2D() : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:()
Matrix2D	core/matrix2d.h	/^class Matrix2D$/;"	c
Matrix2D::Alloc	core/matrix2d.h	/^	void Alloc( int rows, int cols )$/;"	f	class:Matrix2D	access:public	signature:( int rows, int cols )
Matrix2D::Cols	core/matrix2d.h	/^	int Cols() { return cols; }$/;"	f	class:Matrix2D	access:public	signature:()
Matrix2D::Debug	core/matrix2d.h	/^	void Debug()$/;"	f	class:Matrix2D	access:public	signature:()
Matrix2D::Get	core/matrix2d.h	/^	T Get( int row, int col ) const$/;"	f	class:Matrix2D	access:public	signature:( int row, int col ) const
Matrix2D::Matrix2D	core/matrix2d.h	/^	Matrix2D( const Matrix2D& other ) : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:( const Matrix2D& other )
Matrix2D::Matrix2D	core/matrix2d.h	/^	Matrix2D( int rows_, int cols_ ) : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:( int rows_, int cols_ )
Matrix2D::Matrix2D	core/matrix2d.h	/^	Matrix2D( int size ) : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:( int size )
Matrix2D::Matrix2D	core/matrix2d.h	/^	Matrix2D() : data( NULL )$/;"	f	class:Matrix2D	access:public	signature:()
Matrix2D::Raw	core/matrix2d.h	/^	const void* Raw()$/;"	f	class:Matrix2D	access:public	signature:()
Matrix2D::Rows	core/matrix2d.h	/^	int Rows() { return rows; }$/;"	f	class:Matrix2D	access:public	signature:()
Matrix2D::Set	core/matrix2d.h	/^	void Set( T val )$/;"	f	class:Matrix2D	access:public	signature:( T val )
Matrix2D::Set	core/matrix2d.h	/^	void Set( int row, int col, T val )$/;"	f	class:Matrix2D	access:public	signature:( int row, int col, T val )
Matrix2D::cols	core/matrix2d.h	/^	int rows, cols;$/;"	m	class:Matrix2D	access:private
Matrix2D::data	core/matrix2d.h	/^	T* data;$/;"	m	class:Matrix2D	access:private
Matrix2D::operator =	core/matrix2d.h	/^	Matrix2D& operator=( const Matrix2D& other )$/;"	f	class:Matrix2D	access:public	signature:( const Matrix2D& other )
Matrix2D::rows	core/matrix2d.h	/^	int rows, cols;$/;"	m	class:Matrix2D	access:private
Matrix2D::~Matrix2D	core/matrix2d.h	/^	~Matrix2D()$/;"	f	class:Matrix2D	access:public	signature:()
Mesh	render/mesh.h	/^	Mesh( Mesh::AttribConfig conf )$/;"	f	class:Mesh	access:public	signature:( Mesh::AttribConfig conf )
Mesh	render/mesh.h	/^class Mesh$/;"	c
Mesh::Alloc	render/mesh.h	/^	void Alloc( int num )$/;"	f	class:Mesh	access:protected	signature:( int num )
Mesh::AttribConfig	render/mesh.h	/^	enum class AttribConfig$/;"	c	class:Mesh	access:public
Mesh::AttribConfig::XYZUV_INST	render/mesh.h	/^		XYZUV_INST,$/;"	m	class:Mesh::AttribConfig	access:private
Mesh::AttribConfig::XYZ_UV_RST	render/mesh.h	/^		XYZ_UV_RST,$/;"	m	class:Mesh::AttribConfig	access:private
Mesh::ConfigAttrib	render/mesh.h	/^	void ConfigAttrib( Render::Context* gl, GLuint location, size_t num_floats, size_t stride = 0, size_t offset = 0, int attrdivisor = 0 \/* 0 => NO INSTANCING *\/ )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl, GLuint location, size_t num_floats, size_t stride = 0, size_t offset = 0, int attrdivisor = 0 )
Mesh::ConfigAttrib4fv	render/mesh.h	/^	void ConfigAttrib4fv( Render::Context* gl, GLuint location, int attrdivisor = 0 )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl, GLuint location, int attrdivisor = 0 )
Mesh::ConfigXYZUV_INST	render/mesh.h	/^	void ConfigXYZUV_INST( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
Mesh::ConfigXY_UV	render/mesh.h	/^	void ConfigXY_UV( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
Mesh::Dispose	render/mesh.h	/^	void Dispose( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
Mesh::GetVAO	render/mesh.h	/^	GLuint GetVAO()$/;"	f	class:Mesh	access:public	signature:()
Mesh::GetVBO	render/mesh.h	/^	GLuint GetVBO( int index )$/;"	f	class:Mesh	access:public	signature:( int index )
Mesh::LoadBuffer	render/mesh.h	/^	void LoadBuffer( T* target, const T* source, int items_per_element )$/;"	f	class:Mesh	access:protected	signature:( T* target, const T* source, int items_per_element )
Mesh::Mesh	render/mesh.h	/^	Mesh( Mesh::AttribConfig conf )$/;"	f	class:Mesh	access:public	signature:( Mesh::AttribConfig conf )
Mesh::NumElements	render/mesh.h	/^	size_t NumElements()$/;"	f	class:Mesh	access:public	signature:()
Mesh::Prepare	render/mesh.h	/^	void Prepare( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
Mesh::UploadBufferData	render/mesh.h	/^	void UploadBufferData( Render::Context* gl, GLuint vbo, int items_per_attr, GLfloat* buffer )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl, GLuint vbo, int items_per_attr, GLfloat* buffer )
Mesh::attrconf	render/mesh.h	/^	AttribConfig attrconf;$/;"	m	class:Mesh	access:protected
Mesh::normals	render/mesh.h	/^	GLfloat* normals;$/;"	m	class:Mesh	access:protected
Mesh::numElements	render/mesh.h	/^	size_t numElements;$/;"	m	class:Mesh	access:protected
Mesh::numvbo	render/mesh.h	/^	GLsizei numvbo;$/;"	m	class:Mesh	access:protected
Mesh::uvs	render/mesh.h	/^	GLfloat* uvs;$/;"	m	class:Mesh	access:protected
Mesh::vao	render/mesh.h	/^	GLuint vao;$/;"	m	class:Mesh	access:protected
Mesh::vbo	render/mesh.h	/^	GLuint* vbo;$/;"	m	class:Mesh	access:protected
Mesh::vertices	render/mesh.h	/^	GLfloat* vertices;$/;"	m	class:Mesh	access:protected
Mesh::~Mesh	render/mesh.h	/^	virtual ~Mesh()$/;"	f	class:Mesh	access:public	signature:()
Mob	entity/mob.h	/^class Mob : public Actor$/;"	c	inherits:Actor
Mob::__anon1::angle	entity/mob.h	/^		float angle = SIGHT_ANGLE;$/;"	m	struct:Mob::__anon1	access:public
Mob::__anon1::distance	entity/mob.h	/^		float distance = SIGHT_DISTANCE;$/;"	m	struct:Mob::__anon1	access:public
Mob::angle_to_player	entity/mob.h	/^	float angle_to_player;$/;"	m	class:Mob	access:public
Mob::handicap	entity/mob.h	/^	int handicap;$/;"	m	class:Mob	access:public
Mob::player_distance	entity/mob.h	/^	float player_distance;$/;"	m	class:Mob	access:public
Mob::player_visible	entity/mob.h	/^	bool player_visible;$/;"	m	class:Mob	access:public
Mob::vision	entity/mob.h	/^	} vision;$/;"	m	class:Mob	typeref:struct:Mob::__anon1	access:public
MobAIController	entity/controller/mobaicontroller.h	/^class MobAIController : public EntityController$/;"	c	inherits:EntityController
MobAIController::Step	entity/controller/mobaicontroller.h	/^	void Step( Entity* e, uint32_t delta )$/;"	f	class:MobAIController	access:public	signature:( Entity* e, uint32_t delta )
MobAIController::rng	entity/controller/mobaicontroller.cpp	/^RNG MobAIController::rng;$/;"	m	class:MobAIController	file:
MobAIController::rng	entity/controller/mobaicontroller.h	/^	static RNG rng; \/\/ hacerlo puntero y pasarselo desde el main$/;"	m	class:MobAIController	access:private
Model	core/transform.cpp	/^	for( int i = 0; i < this->children.Size(); i++ ) {$/;"	f	class:Transform	signature:()
Model	core/transform.h	/^	cml::matrix44f_c Model();$/;"	p	class:Transform	access:public	signature:()
Model	entity/entity.h	/^	cml::matrix44f_c Model()$/;"	f	class:Entity	access:public	signature:()
MyQueryCallback	physics/physics.cpp	/^class MyQueryCallback : public b2QueryCallback$/;"	c	file:	inherits:b2QueryCallback
MyQueryCallback::ReportFixture	physics/physics.cpp	/^		bool ReportFixture(b2Fixture* fixture)$/;"	f	class:MyQueryCallback	access:public	signature:(b2Fixture* fixture)
MyQueryCallback::numbodies	physics/physics.cpp	/^		static int numbodies;$/;"	m	class:MyQueryCallback	file:	access:public
MyQueryCallback::numbodies	physics/physics.cpp	/^int MyQueryCallback::numbodies = 0;$/;"	m	class:MyQueryCallback	file:
MyRayCB	entity/script/helpers.cpp	/^class MyRayCB : public b2RayCastCallback$/;"	c	file:	inherits:b2RayCastCallback
MyRayCB::ReportFixture	entity/script/helpers.cpp	/^		float32 ReportFixture( b2Fixture* fixture, const b2Vec2& point, const b2Vec2& normal, float32 fraction )$/;"	f	class:MyRayCB	access:public	signature:( b2Fixture* fixture, const b2Vec2& point, const b2Vec2& normal, float32 fraction )
MyRayCB::SetOrigin	entity/script/helpers.cpp	/^		void SetOrigin( )$/;"	f	class:MyRayCB	access:public	signature:( )
MyRayCB::didcollide	entity/script/helpers.cpp	/^		bool didcollide;$/;"	m	class:MyRayCB	file:	access:public
NEUTRAL	entity/actor.h	/^	enum Faction { GOOD, BAD, NEUTRAL };$/;"	e	enum:Actor::Faction
Node	ailib/stlastar.h	/^			Node() :$/;"	f	class:AStarSearch::Node	access:public	signature:()
Node	ailib/stlastar.h	/^	class Node$/;"	c	class:AStarSearch	access:public
NullController	entity/controller/nullcontroller.h	/^class NullController : public EntityController$/;"	c	inherits:EntityController
NullController::Step	entity/controller/nullcontroller.h	/^	void Step( Entity* e, uint32_t delta )$/;"	f	class:NullController	access:public	signature:( Entity* e, uint32_t delta )
NumElements	render/mesh.h	/^	size_t NumElements()$/;"	f	class:Mesh	access:public	signature:()
Object	render/program.h	/^	GLuint Object()$/;"	f	class:Program	access:public	signature:()
Object	render/shader.cpp	/^GLuint Shader::Object()$/;"	f	class:Shader	signature:()
Object	render/shader.h	/^	GLuint Object();$/;"	p	class:Shader	access:public	signature:()
OffsetAngle	render/camera.cpp	/^void Camera::OffsetAngle( float hor, float ver )$/;"	f	class:Camera	signature:( float hor, float ver )
OffsetAngle	render/camera.h	/^	void OffsetAngle( float hor, float ver );$/;"	p	class:Camera	access:public	signature:( float hor, float ver )
OffsetPosition	render/camera.cpp	/^void Camera::OffsetPosition( const cml::vector3f& offsetPosition )$/;"	f	class:Camera	signature:( const cml::vector3f& offsetPosition )
OffsetPosition	render/camera.h	/^	void OffsetPosition( const cml::vector3f& offsetPosition );$/;"	p	class:Camera	access:public	signature:( const cml::vector3f& offsetPosition )
OffsetRotationY	entity/entity.h	/^	void OffsetRotationY( float delta_angle )$/;"	f	class:Entity	access:public	signature:( float delta_angle )
PATH	map/mapdata.h	/^		PATH, WARP, HACK$/;"	e	enum:mapgen::RoomConnection::Type
PFNGLACTIVESHADERPROGRAMPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program);$/;"	t
PFNGLACTIVETEXTUREPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);$/;"	t
PFNGLATTACHSHADERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t
PFNGLBEGINCONDITIONALRENDERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);$/;"	t
PFNGLBEGINQUERYINDEXEDPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);$/;"	t
PFNGLBEGINQUERYPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);$/;"	t
PFNGLBEGINTRANSFORMFEEDBACKPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);$/;"	t
PFNGLBINDATTRIBLOCATIONPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name);$/;"	t
PFNGLBINDBUFFERBASEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);$/;"	t
PFNGLBINDBUFFERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);$/;"	t
PFNGLBINDBUFFERRANGEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);$/;"	t
PFNGLBINDBUFFERSBASEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERSBASEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers);$/;"	t
PFNGLBINDBUFFERSRANGEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERSRANGEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);$/;"	t
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);$/;"	t
PFNGLBINDFRAGDATALOCATIONPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name);$/;"	t
PFNGLBINDFRAMEBUFFERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);$/;"	t
PFNGLBINDIMAGETEXTUREPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);$/;"	t
PFNGLBINDIMAGETEXTURESPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDIMAGETEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures);$/;"	t
PFNGLBINDPROGRAMPIPELINEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline);$/;"	t
PFNGLBINDRENDERBUFFERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);$/;"	t
PFNGLBINDSAMPLERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);$/;"	t
PFNGLBINDSAMPLERSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDSAMPLERSPROC) (GLuint first, GLsizei count, const GLuint *samplers);$/;"	t
PFNGLBINDTEXTUREPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDTEXTUREPROC) (GLenum target, GLuint texture);$/;"	t
PFNGLBINDTEXTURESPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDTEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures);$/;"	t
PFNGLBINDTRANSFORMFEEDBACKPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);$/;"	t
PFNGLBINDVERTEXARRAYPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array);$/;"	t
PFNGLBINDVERTEXBUFFERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);$/;"	t
PFNGLBINDVERTEXBUFFERSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERSPROC) (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);$/;"	t
PFNGLBLENDCOLORPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	t
PFNGLBLENDEQUATIONIARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);$/;"	t
PFNGLBLENDEQUATIONIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);$/;"	t
PFNGLBLENDEQUATIONPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);$/;"	t
PFNGLBLENDEQUATIONSEPARATEIARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);$/;"	t
PFNGLBLENDEQUATIONSEPARATEIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);$/;"	t
PFNGLBLENDEQUATIONSEPARATEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);$/;"	t
PFNGLBLENDFUNCIARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);$/;"	t
PFNGLBLENDFUNCIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);$/;"	t
PFNGLBLENDFUNCPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCPROC) (GLenum sfactor, GLenum dfactor);$/;"	t
PFNGLBLENDFUNCSEPARATEIARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);$/;"	t
PFNGLBLENDFUNCSEPARATEIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);$/;"	t
PFNGLBLENDFUNCSEPARATEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);$/;"	t
PFNGLBLITFRAMEBUFFERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);$/;"	t
PFNGLBUFFERDATAPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, GLenum usage);$/;"	t
PFNGLBUFFERSTORAGEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBUFFERSTORAGEPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);$/;"	t
PFNGLBUFFERSUBDATAPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);$/;"	t
PFNGLCHECKFRAMEBUFFERSTATUSPROC	render/glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);$/;"	t
PFNGLCLAMPCOLORPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);$/;"	t
PFNGLCLEARBUFFERDATAPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);$/;"	t
PFNGLCLEARBUFFERFIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);$/;"	t
PFNGLCLEARBUFFERFVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value);$/;"	t
PFNGLCLEARBUFFERIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value);$/;"	t
PFNGLCLEARBUFFERSUBDATAPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);$/;"	t
PFNGLCLEARBUFFERUIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value);$/;"	t
PFNGLCLEARCOLORPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	t
PFNGLCLEARDEPTHFPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC) (GLfloat d);$/;"	t
PFNGLCLEARDEPTHPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARDEPTHPROC) (GLdouble depth);$/;"	t
PFNGLCLEARPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARPROC) (GLbitfield mask);$/;"	t
PFNGLCLEARSTENCILPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARSTENCILPROC) (GLint s);$/;"	t
PFNGLCLEARTEXIMAGEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARTEXIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);$/;"	t
PFNGLCLEARTEXSUBIMAGEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARTEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);$/;"	t
PFNGLCLIENTWAITSYNCPROC	render/glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t
PFNGLCOLORMASKIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);$/;"	t
PFNGLCOLORMASKPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORMASKPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);$/;"	t
PFNGLCOMPILESHADERINCLUDEARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);$/;"	t
PFNGLCOMPILESHADERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE1DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE2DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE3DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOPYBUFFERSUBDATAPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);$/;"	t
PFNGLCOPYIMAGESUBDATAPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);$/;"	t
PFNGLCOPYTEXIMAGE1DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);$/;"	t
PFNGLCOPYTEXIMAGE2DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);$/;"	t
PFNGLCOPYTEXSUBIMAGE1DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);$/;"	t
PFNGLCOPYTEXSUBIMAGE2DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLCOPYTEXSUBIMAGE3DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLCREATEPROGRAMPROC	render/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);$/;"	t
PFNGLCREATESHADERPROC	render/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);$/;"	t
PFNGLCREATESHADERPROGRAMVPROC	render/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar *const*strings);$/;"	t
PFNGLCREATESYNCFROMCLEVENTARBPROC	render/glcorearb.h	/^typedef GLsync (APIENTRYP PFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context *context, struct _cl_event *event, GLbitfield flags);$/;"	t
PFNGLCULLFACEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLCULLFACEPROC) (GLenum mode);$/;"	t
PFNGLDEBUGMESSAGECALLBACKARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const void *userParam);$/;"	t
PFNGLDEBUGMESSAGECALLBACKPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);$/;"	t
PFNGLDEBUGMESSAGECONTROLARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);$/;"	t
PFNGLDEBUGMESSAGECONTROLPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);$/;"	t
PFNGLDEBUGMESSAGEINSERTARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);$/;"	t
PFNGLDEBUGMESSAGEINSERTPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);$/;"	t
PFNGLDELETEBUFFERSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);$/;"	t
PFNGLDELETEFRAMEBUFFERSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers);$/;"	t
PFNGLDELETENAMEDSTRINGARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);$/;"	t
PFNGLDELETEPROGRAMPIPELINESPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines);$/;"	t
PFNGLDELETEPROGRAMPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);$/;"	t
PFNGLDELETEQUERIESPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids);$/;"	t
PFNGLDELETERENDERBUFFERSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers);$/;"	t
PFNGLDELETESAMPLERSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint *samplers);$/;"	t
PFNGLDELETESHADERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);$/;"	t
PFNGLDELETESYNCPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETESYNCPROC) (GLsync sync);$/;"	t
PFNGLDELETETEXTURESPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETETEXTURESPROC) (GLsizei n, const GLuint *textures);$/;"	t
PFNGLDELETETRANSFORMFEEDBACKSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids);$/;"	t
PFNGLDELETEVERTEXARRAYSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);$/;"	t
PFNGLDEPTHFUNCPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHFUNCPROC) (GLenum func);$/;"	t
PFNGLDEPTHMASKPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHMASKPROC) (GLboolean flag);$/;"	t
PFNGLDEPTHRANGEARRAYVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLdouble *v);$/;"	t
PFNGLDEPTHRANGEFPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC) (GLfloat n, GLfloat f);$/;"	t
PFNGLDEPTHRANGEINDEXEDPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLdouble n, GLdouble f);$/;"	t
PFNGLDEPTHRANGEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEPROC) (GLdouble near, GLdouble far);$/;"	t
PFNGLDETACHSHADERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t
PFNGLDISABLEIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISABLEIPROC) (GLenum target, GLuint index);$/;"	t
PFNGLDISABLEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISABLEPROC) (GLenum cap);$/;"	t
PFNGLDISABLEVERTEXATTRIBARRAYPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t
PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);$/;"	t
PFNGLDISPATCHCOMPUTEINDIRECTPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect);$/;"	t
PFNGLDISPATCHCOMPUTEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);$/;"	t
PFNGLDRAWARRAYSINDIRECTPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect);$/;"	t
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);$/;"	t
PFNGLDRAWARRAYSINSTANCEDPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);$/;"	t
PFNGLDRAWARRAYSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSPROC) (GLenum mode, GLint first, GLsizei count);$/;"	t
PFNGLDRAWBUFFERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWBUFFERPROC) (GLenum mode);$/;"	t
PFNGLDRAWBUFFERSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs);$/;"	t
PFNGLDRAWELEMENTSBASEVERTEXPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);$/;"	t
PFNGLDRAWELEMENTSINDIRECTPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);$/;"	t
PFNGLDRAWELEMENTSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices);$/;"	t
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);$/;"	t
PFNGLDRAWRANGEELEMENTSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);$/;"	t
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei instancecount);$/;"	t
PFNGLDRAWTRANSFORMFEEDBACKPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);$/;"	t
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);$/;"	t
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream);$/;"	t
PFNGLENABLEIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLENABLEIPROC) (GLenum target, GLuint index);$/;"	t
PFNGLENABLEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLENABLEPROC) (GLenum cap);$/;"	t
PFNGLENABLEVERTEXATTRIBARRAYPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t
PFNGLENDCONDITIONALRENDERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC) (void);$/;"	t
PFNGLENDQUERYINDEXEDPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index);$/;"	t
PFNGLENDQUERYPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLENDQUERYPROC) (GLenum target);$/;"	t
PFNGLENDTRANSFORMFEEDBACKPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC) (void);$/;"	t
PFNGLFENCESYNCPROC	render/glcorearb.h	/^typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags);$/;"	t
PFNGLFINISHPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLFINISHPROC) (void);$/;"	t
PFNGLFLUSHMAPPEDBUFFERRANGEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);$/;"	t
PFNGLFLUSHPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLFLUSHPROC) (void);$/;"	t
PFNGLFRAMEBUFFERPARAMETERIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);$/;"	t
PFNGLFRAMEBUFFERRENDERBUFFERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);$/;"	t
PFNGLFRAMEBUFFERTEXTURE1DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	t
PFNGLFRAMEBUFFERTEXTURE2DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	t
PFNGLFRAMEBUFFERTEXTURE3DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);$/;"	t
PFNGLFRAMEBUFFERTEXTURELAYERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);$/;"	t
PFNGLFRAMEBUFFERTEXTUREPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);$/;"	t
PFNGLFRONTFACEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRONTFACEPROC) (GLenum mode);$/;"	t
PFNGLGENBUFFERSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);$/;"	t
PFNGLGENERATEMIPMAPPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC) (GLenum target);$/;"	t
PFNGLGENFRAMEBUFFERSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);$/;"	t
PFNGLGENPROGRAMPIPELINESPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines);$/;"	t
PFNGLGENQUERIESPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids);$/;"	t
PFNGLGENRENDERBUFFERSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);$/;"	t
PFNGLGENSAMPLERSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers);$/;"	t
PFNGLGENTEXTURESPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENTEXTURESPROC) (GLsizei n, GLuint *textures);$/;"	t
PFNGLGENTRANSFORMFEEDBACKSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);$/;"	t
PFNGLGENVERTEXARRAYSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);$/;"	t
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);$/;"	t
PFNGLGETACTIVEATTRIBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);$/;"	t
PFNGLGETACTIVESUBROUTINENAMEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);$/;"	t
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);$/;"	t
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);$/;"	t
PFNGLGETACTIVEUNIFORMBLOCKIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);$/;"	t
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);$/;"	t
PFNGLGETACTIVEUNIFORMNAMEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);$/;"	t
PFNGLGETACTIVEUNIFORMPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);$/;"	t
PFNGLGETACTIVEUNIFORMSIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);$/;"	t
PFNGLGETATTACHEDSHADERSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);$/;"	t
PFNGLGETATTRIBLOCATIONPROC	render/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t
PFNGLGETBOOLEANI_VPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);$/;"	t
PFNGLGETBOOLEANVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANVPROC) (GLenum pname, GLboolean *data);$/;"	t
PFNGLGETBUFFERPARAMETERI64VPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params);$/;"	t
PFNGLGETBUFFERPARAMETERIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETBUFFERPOINTERVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, void **params);$/;"	t
PFNGLGETBUFFERSUBDATAPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, void *data);$/;"	t
PFNGLGETCOMPRESSEDTEXIMAGEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, void *img);$/;"	t
PFNGLGETDEBUGMESSAGELOGARBPROC	render/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);$/;"	t
PFNGLGETDEBUGMESSAGELOGPROC	render/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);$/;"	t
PFNGLGETDOUBLEI_VPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);$/;"	t
PFNGLGETDOUBLEVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEVPROC) (GLenum pname, GLdouble *data);$/;"	t
PFNGLGETERRORPROC	render/glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLGETERRORPROC) (void);$/;"	t
PFNGLGETFLOATI_VPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);$/;"	t
PFNGLGETFLOATVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFLOATVPROC) (GLenum pname, GLfloat *data);$/;"	t
PFNGLGETFRAGDATAINDEXPROC	render/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar *name);$/;"	t
PFNGLGETFRAGDATALOCATIONPROC	render/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);$/;"	t
PFNGLGETFRAMEBUFFERPARAMETERIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETGRAPHICSRESETSTATUSARBPROC	render/glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void);$/;"	t
PFNGLGETIMAGEHANDLEARBPROC	render/glcorearb.h	/^typedef GLuint64 (APIENTRYP PFNGLGETIMAGEHANDLEARBPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);$/;"	t
PFNGLGETINTEGER64I_VPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);$/;"	t
PFNGLGETINTEGER64VPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *data);$/;"	t
PFNGLGETINTEGERI_VPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);$/;"	t
PFNGLGETINTEGERVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGERVPROC) (GLenum pname, GLint *data);$/;"	t
PFNGLGETINTERNALFORMATI64VPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);$/;"	t
PFNGLGETINTERNALFORMATIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);$/;"	t
PFNGLGETMULTISAMPLEFVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val);$/;"	t
PFNGLGETNAMEDSTRINGARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);$/;"	t
PFNGLGETNAMEDSTRINGIVARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum pname, GLint *params);$/;"	t
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, void *img);$/;"	t
PFNGLGETNTEXIMAGEARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);$/;"	t
PFNGLGETNUNIFORMDVARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);$/;"	t
PFNGLGETNUNIFORMFVARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);$/;"	t
PFNGLGETNUNIFORMIVARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);$/;"	t
PFNGLGETNUNIFORMUIVARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params);$/;"	t
PFNGLGETOBJECTLABELPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);$/;"	t
PFNGLGETOBJECTPTRLABELPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);$/;"	t
PFNGLGETPOINTERVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPOINTERVPROC) (GLenum pname, void **params);$/;"	t
PFNGLGETPROGRAMBINARYPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);$/;"	t
PFNGLGETPROGRAMINFOLOGPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	t
PFNGLGETPROGRAMINTERFACEIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint *params);$/;"	t
PFNGLGETPROGRAMIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);$/;"	t
PFNGLGETPROGRAMPIPELINEINFOLOGPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	t
PFNGLGETPROGRAMPIPELINEIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *params);$/;"	t
PFNGLGETPROGRAMRESOURCEINDEXPROC	render/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);$/;"	t
PFNGLGETPROGRAMRESOURCEIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);$/;"	t
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC	render/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);$/;"	t
PFNGLGETPROGRAMRESOURCELOCATIONPROC	render/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar *name);$/;"	t
PFNGLGETPROGRAMRESOURCENAMEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);$/;"	t
PFNGLGETPROGRAMSTAGEIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values);$/;"	t
PFNGLGETQUERYINDEXEDIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);$/;"	t
PFNGLGETQUERYIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETQUERYOBJECTI64VPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params);$/;"	t
PFNGLGETQUERYOBJECTIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params);$/;"	t
PFNGLGETQUERYOBJECTUI64VPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params);$/;"	t
PFNGLGETQUERYOBJECTUIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params);$/;"	t
PFNGLGETRENDERBUFFERPARAMETERIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETSAMPLERPARAMETERFVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETSAMPLERPARAMETERIIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *params);$/;"	t
PFNGLGETSAMPLERPARAMETERIUIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint *params);$/;"	t
PFNGLGETSAMPLERPARAMETERIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *params);$/;"	t
PFNGLGETSHADERINFOLOGPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	t
PFNGLGETSHADERIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);$/;"	t
PFNGLGETSHADERPRECISIONFORMATPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);$/;"	t
PFNGLGETSHADERSOURCEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);$/;"	t
PFNGLGETSTRINGIPROC	render/glcorearb.h	/^typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);$/;"	t
PFNGLGETSTRINGPROC	render/glcorearb.h	/^typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGPROC) (GLenum name);$/;"	t
PFNGLGETSUBROUTINEINDEXPROC	render/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name);$/;"	t
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC	render/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name);$/;"	t
PFNGLGETSYNCIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);$/;"	t
PFNGLGETTEXIMAGEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC) (GLenum target, GLint level, GLenum format, GLenum type, void *pixels);$/;"	t
PFNGLGETTEXLEVELPARAMETERFVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC) (GLenum target, GLint level, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETTEXLEVELPARAMETERIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC) (GLenum target, GLint level, GLenum pname, GLint *params);$/;"	t
PFNGLGETTEXPARAMETERFVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETTEXPARAMETERIIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETTEXPARAMETERIUIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params);$/;"	t
PFNGLGETTEXPARAMETERIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t
PFNGLGETTEXTUREHANDLEARBPROC	render/glcorearb.h	/^typedef GLuint64 (APIENTRYP PFNGLGETTEXTUREHANDLEARBPROC) (GLuint texture);$/;"	t
PFNGLGETTEXTURESAMPLERHANDLEARBPROC	render/glcorearb.h	/^typedef GLuint64 (APIENTRYP PFNGLGETTEXTURESAMPLERHANDLEARBPROC) (GLuint texture, GLuint sampler);$/;"	t
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);$/;"	t
PFNGLGETUNIFORMBLOCKINDEXPROC	render/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);$/;"	t
PFNGLGETUNIFORMDVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params);$/;"	t
PFNGLGETUNIFORMFVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params);$/;"	t
PFNGLGETUNIFORMINDICESPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);$/;"	t
PFNGLGETUNIFORMIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params);$/;"	t
PFNGLGETUNIFORMLOCATIONPROC	render/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t
PFNGLGETUNIFORMSUBROUTINEUIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params);$/;"	t
PFNGLGETUNIFORMUIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params);$/;"	t
PFNGLGETVERTEXATTRIBDVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params);$/;"	t
PFNGLGETVERTEXATTRIBFVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params);$/;"	t
PFNGLGETVERTEXATTRIBIIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params);$/;"	t
PFNGLGETVERTEXATTRIBIUIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params);$/;"	t
PFNGLGETVERTEXATTRIBIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);$/;"	t
PFNGLGETVERTEXATTRIBLDVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *params);$/;"	t
PFNGLGETVERTEXATTRIBLUI64VARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VARBPROC) (GLuint index, GLenum pname, GLuint64EXT *params);$/;"	t
PFNGLGETVERTEXATTRIBPOINTERVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void **pointer);$/;"	t
PFNGLHINTPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLHINTPROC) (GLenum target, GLenum mode);$/;"	t
PFNGLINVALIDATEBUFFERDATAPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer);$/;"	t
PFNGLINVALIDATEBUFFERSUBDATAPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);$/;"	t
PFNGLINVALIDATEFRAMEBUFFERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments);$/;"	t
PFNGLINVALIDATESUBFRAMEBUFFERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLINVALIDATETEXIMAGEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level);$/;"	t
PFNGLINVALIDATETEXSUBIMAGEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);$/;"	t
PFNGLISBUFFERPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer);$/;"	t
PFNGLISENABLEDIPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC) (GLenum target, GLuint index);$/;"	t
PFNGLISENABLEDPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC) (GLenum cap);$/;"	t
PFNGLISFRAMEBUFFERPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);$/;"	t
PFNGLISIMAGEHANDLERESIDENTARBPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle);$/;"	t
PFNGLISNAMEDSTRINGARBPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);$/;"	t
PFNGLISPROGRAMPIPELINEPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline);$/;"	t
PFNGLISPROGRAMPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);$/;"	t
PFNGLISQUERYPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISQUERYPROC) (GLuint id);$/;"	t
PFNGLISRENDERBUFFERPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);$/;"	t
PFNGLISSAMPLERPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC) (GLuint sampler);$/;"	t
PFNGLISSHADERPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISSHADERPROC) (GLuint shader);$/;"	t
PFNGLISSYNCPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISSYNCPROC) (GLsync sync);$/;"	t
PFNGLISTEXTUREHANDLERESIDENTARBPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISTEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);$/;"	t
PFNGLISTEXTUREPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC) (GLuint texture);$/;"	t
PFNGLISTRANSFORMFEEDBACKPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id);$/;"	t
PFNGLISVERTEXARRAYPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC) (GLuint array);$/;"	t
PFNGLLINEWIDTHPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLLINEWIDTHPROC) (GLfloat width);$/;"	t
PFNGLLINKPROGRAMPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);$/;"	t
PFNGLLOGICOPPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLLOGICOPPROC) (GLenum opcode);$/;"	t
PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) (GLuint64 handle);$/;"	t
PFNGLMAKEIMAGEHANDLERESIDENTARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle, GLenum access);$/;"	t
PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) (GLuint64 handle);$/;"	t
PFNGLMAKETEXTUREHANDLERESIDENTARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);$/;"	t
PFNGLMAPBUFFERPROC	render/glcorearb.h	/^typedef void *(APIENTRYP PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);$/;"	t
PFNGLMAPBUFFERRANGEPROC	render/glcorearb.h	/^typedef void *(APIENTRYP PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);$/;"	t
PFNGLMEMORYBARRIERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);$/;"	t
PFNGLMINSAMPLESHADINGARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLMINSAMPLESHADINGARBPROC) (GLfloat value);$/;"	t
PFNGLMINSAMPLESHADINGPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC) (GLfloat value);$/;"	t
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);$/;"	t
PFNGLMULTIDRAWARRAYSINDIRECTPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);$/;"	t
PFNGLMULTIDRAWARRAYSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);$/;"	t
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);$/;"	t
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);$/;"	t
PFNGLMULTIDRAWELEMENTSINDIRECTPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);$/;"	t
PFNGLMULTIDRAWELEMENTSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);$/;"	t
PFNGLNAMEDSTRINGARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);$/;"	t
PFNGLOBJECTLABELPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);$/;"	t
PFNGLOBJECTPTRLABELPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);$/;"	t
PFNGLPATCHPARAMETERFVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values);$/;"	t
PFNGLPATCHPARAMETERIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value);$/;"	t
PFNGLPAUSETRANSFORMFEEDBACKPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC) (void);$/;"	t
PFNGLPIXELSTOREFPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREFPROC) (GLenum pname, GLfloat param);$/;"	t
PFNGLPIXELSTOREIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREIPROC) (GLenum pname, GLint param);$/;"	t
PFNGLPOINTPARAMETERFPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);$/;"	t
PFNGLPOINTPARAMETERFVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);$/;"	t
PFNGLPOINTPARAMETERIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);$/;"	t
PFNGLPOINTPARAMETERIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);$/;"	t
PFNGLPOINTSIZEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTSIZEPROC) (GLfloat size);$/;"	t
PFNGLPOLYGONMODEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOLYGONMODEPROC) (GLenum face, GLenum mode);$/;"	t
PFNGLPOLYGONOFFSETPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC) (GLfloat factor, GLfloat units);$/;"	t
PFNGLPOPDEBUGGROUPPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOPDEBUGGROUPPROC) (void);$/;"	t
PFNGLPRIMITIVERESTARTINDEXPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);$/;"	t
PFNGLPROGRAMBINARYPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);$/;"	t
PFNGLPROGRAMPARAMETERIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);$/;"	t
PFNGLPROGRAMUNIFORM1DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble v0);$/;"	t
PFNGLPROGRAMUNIFORM1DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORM1FPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat v0);$/;"	t
PFNGLPROGRAMUNIFORM1FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM1IPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0);$/;"	t
PFNGLPROGRAMUNIFORM1IVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM1UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint v0);$/;"	t
PFNGLPROGRAMUNIFORM1UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLPROGRAMUNIFORM2DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1);$/;"	t
PFNGLPROGRAMUNIFORM2DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORM2FPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);$/;"	t
PFNGLPROGRAMUNIFORM2FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM2IPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint v0, GLint v1);$/;"	t
PFNGLPROGRAMUNIFORM2IVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM2UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);$/;"	t
PFNGLPROGRAMUNIFORM2UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLPROGRAMUNIFORM3DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);$/;"	t
PFNGLPROGRAMUNIFORM3DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORM3FPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	t
PFNGLPROGRAMUNIFORM3FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM3IPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);$/;"	t
PFNGLPROGRAMUNIFORM3IVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM3UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	t
PFNGLPROGRAMUNIFORM3UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLPROGRAMUNIFORM4DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);$/;"	t
PFNGLPROGRAMUNIFORM4DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORM4FPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);$/;"	t
PFNGLPROGRAMUNIFORM4FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORM4IPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);$/;"	t
PFNGLPROGRAMUNIFORM4IVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLPROGRAMUNIFORM4UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);$/;"	t
PFNGLPROGRAMUNIFORM4UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) (GLuint program, GLint location, GLuint64 value);$/;"	t
PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLPROVOKINGVERTEXPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC) (GLenum mode);$/;"	t
PFNGLPUSHDEBUGGROUPPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);$/;"	t
PFNGLQUERYCOUNTERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);$/;"	t
PFNGLREADBUFFERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLREADBUFFERPROC) (GLenum mode);$/;"	t
PFNGLREADNPIXELSARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);$/;"	t
PFNGLREADPIXELSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLREADPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);$/;"	t
PFNGLRELEASESHADERCOMPILERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC) (void);$/;"	t
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERBUFFERSTORAGEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRESUMETRANSFORMFEEDBACKPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC) (void);$/;"	t
PFNGLSAMPLECOVERAGEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLfloat value, GLboolean invert);$/;"	t
PFNGLSAMPLEMASKIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC) (GLuint maskNumber, GLbitfield mask);$/;"	t
PFNGLSAMPLERPARAMETERFPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param);$/;"	t
PFNGLSAMPLERPARAMETERFVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat *param);$/;"	t
PFNGLSAMPLERPARAMETERIIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint *param);$/;"	t
PFNGLSAMPLERPARAMETERIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param);$/;"	t
PFNGLSAMPLERPARAMETERIUIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint *param);$/;"	t
PFNGLSAMPLERPARAMETERIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint *param);$/;"	t
PFNGLSCISSORARRAYVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint *v);$/;"	t
PFNGLSCISSORINDEXEDPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);$/;"	t
PFNGLSCISSORINDEXEDVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLSCISSORPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLSHADERBINARYPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);$/;"	t
PFNGLSHADERSOURCEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);$/;"	t
PFNGLSHADERSTORAGEBLOCKBINDINGPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);$/;"	t
PFNGLSTENCILFUNCPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILFUNCPROC) (GLenum func, GLint ref, GLuint mask);$/;"	t
PFNGLSTENCILFUNCSEPARATEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask);$/;"	t
PFNGLSTENCILMASKPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILMASKPROC) (GLuint mask);$/;"	t
PFNGLSTENCILMASKSEPARATEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);$/;"	t
PFNGLSTENCILOPPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILOPPROC) (GLenum fail, GLenum zfail, GLenum zpass);$/;"	t
PFNGLSTENCILOPSEPARATEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);$/;"	t
PFNGLTEXBUFFERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer);$/;"	t
PFNGLTEXBUFFERRANGEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);$/;"	t
PFNGLTEXIMAGE1DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXIMAGE2DMULTISAMPLEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXIMAGE2DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXIMAGE3DMULTISAMPLEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXIMAGE3DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXPAGECOMMITMENTARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPAGECOMMITMENTARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident);$/;"	t
PFNGLTEXPARAMETERFPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat param);$/;"	t
PFNGLTEXPARAMETERFVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);$/;"	t
PFNGLTEXPARAMETERIIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params);$/;"	t
PFNGLTEXPARAMETERIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);$/;"	t
PFNGLTEXPARAMETERIUIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params);$/;"	t
PFNGLTEXPARAMETERIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);$/;"	t
PFNGLTEXSTORAGE1DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);$/;"	t
PFNGLTEXSTORAGE2DMULTISAMPLEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXSTORAGE2DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLTEXSTORAGE3DMULTISAMPLEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXSTORAGE3DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);$/;"	t
PFNGLTEXSUBIMAGE1DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXSUBIMAGE2DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXSUBIMAGE3DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXTUREVIEWPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);$/;"	t
PFNGLTRANSFORMFEEDBACKVARYINGSPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);$/;"	t
PFNGLUNIFORM1DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1DPROC) (GLint location, GLdouble x);$/;"	t
PFNGLUNIFORM1DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLUNIFORM1FPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);$/;"	t
PFNGLUNIFORM1FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM1IPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);$/;"	t
PFNGLUNIFORM1IVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM1UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);$/;"	t
PFNGLUNIFORM1UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORM2DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y);$/;"	t
PFNGLUNIFORM2DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLUNIFORM2FPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);$/;"	t
PFNGLUNIFORM2FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM2IPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);$/;"	t
PFNGLUNIFORM2IVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM2UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);$/;"	t
PFNGLUNIFORM2UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORM3DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLUNIFORM3DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLUNIFORM3FPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	t
PFNGLUNIFORM3FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM3IPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);$/;"	t
PFNGLUNIFORM3IVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM3UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	t
PFNGLUNIFORM3UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORM4DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLUNIFORM4DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *value);$/;"	t
PFNGLUNIFORM4FPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);$/;"	t
PFNGLUNIFORM4FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value);$/;"	t
PFNGLUNIFORM4IPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);$/;"	t
PFNGLUNIFORM4IVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value);$/;"	t
PFNGLUNIFORM4UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);$/;"	t
PFNGLUNIFORM4UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value);$/;"	t
PFNGLUNIFORMBLOCKBINDINGPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);$/;"	t
PFNGLUNIFORMHANDLEUI64ARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64ARBPROC) (GLint location, GLuint64 value);$/;"	t
PFNGLUNIFORMHANDLEUI64VARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value);$/;"	t
PFNGLUNIFORMMATRIX2DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX2FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX2X3DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX2X3FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX2X4DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX2X4FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX3DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX3FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX3X2DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX3X2FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX3X4DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX3X4FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX4DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX4FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX4X2DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX4X2FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX4X3DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	t
PFNGLUNIFORMMATRIX4X3FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMSUBROUTINESUIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices);$/;"	t
PFNGLUNMAPBUFFERPROC	render/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target);$/;"	t
PFNGLUSEPROGRAMPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);$/;"	t
PFNGLUSEPROGRAMSTAGESPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program);$/;"	t
PFNGLVALIDATEPROGRAMPIPELINEPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline);$/;"	t
PFNGLVALIDATEPROGRAMPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC) (GLuint program);$/;"	t
PFNGLVERTEXATTRIB1DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);$/;"	t
PFNGLVERTEXATTRIB1DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB1FPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);$/;"	t
PFNGLVERTEXATTRIB1FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB1SPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);$/;"	t
PFNGLVERTEXATTRIB1SVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB2DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);$/;"	t
PFNGLVERTEXATTRIB2DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB2FPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);$/;"	t
PFNGLVERTEXATTRIB2FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB2SPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);$/;"	t
PFNGLVERTEXATTRIB2SVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB3DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLVERTEXATTRIB3DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB3FPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLVERTEXATTRIB3FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB3SPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);$/;"	t
PFNGLVERTEXATTRIB3SVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB4BVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v);$/;"	t
PFNGLVERTEXATTRIB4DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLVERTEXATTRIB4DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIB4FPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	t
PFNGLVERTEXATTRIB4FVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVERTEXATTRIB4IVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIB4NBVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v);$/;"	t
PFNGLVERTEXATTRIB4NIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIB4NSVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB4NUBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);$/;"	t
PFNGLVERTEXATTRIB4NUBVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v);$/;"	t
PFNGLVERTEXATTRIB4NUIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIB4NUSVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v);$/;"	t
PFNGLVERTEXATTRIB4SPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);$/;"	t
PFNGLVERTEXATTRIB4SVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIB4UBVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v);$/;"	t
PFNGLVERTEXATTRIB4UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIB4USVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v);$/;"	t
PFNGLVERTEXATTRIBBINDINGPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex);$/;"	t
PFNGLVERTEXATTRIBDIVISORPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor);$/;"	t
PFNGLVERTEXATTRIBFORMATPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);$/;"	t
PFNGLVERTEXATTRIBI1IPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x);$/;"	t
PFNGLVERTEXATTRIBI1IVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI1UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x);$/;"	t
PFNGLVERTEXATTRIBI1UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI2IPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);$/;"	t
PFNGLVERTEXATTRIBI2IVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI2UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y);$/;"	t
PFNGLVERTEXATTRIBI2UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI3IPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z);$/;"	t
PFNGLVERTEXATTRIBI3IVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI3UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z);$/;"	t
PFNGLVERTEXATTRIBI3UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI4BVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v);$/;"	t
PFNGLVERTEXATTRIBI4IPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);$/;"	t
PFNGLVERTEXATTRIBI4IVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v);$/;"	t
PFNGLVERTEXATTRIBI4SVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v);$/;"	t
PFNGLVERTEXATTRIBI4UBVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v);$/;"	t
PFNGLVERTEXATTRIBI4UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);$/;"	t
PFNGLVERTEXATTRIBI4UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v);$/;"	t
PFNGLVERTEXATTRIBI4USVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v);$/;"	t
PFNGLVERTEXATTRIBIFORMATPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);$/;"	t
PFNGLVERTEXATTRIBIPOINTERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);$/;"	t
PFNGLVERTEXATTRIBL1DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x);$/;"	t
PFNGLVERTEXATTRIBL1DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIBL1UI64ARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64ARBPROC) (GLuint index, GLuint64EXT x);$/;"	t
PFNGLVERTEXATTRIBL1UI64VARBPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VARBPROC) (GLuint index, const GLuint64EXT *v);$/;"	t
PFNGLVERTEXATTRIBL2DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y);$/;"	t
PFNGLVERTEXATTRIBL2DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIBL3DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLVERTEXATTRIBL3DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIBL4DPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLVERTEXATTRIBL4DVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v);$/;"	t
PFNGLVERTEXATTRIBLFORMATPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);$/;"	t
PFNGLVERTEXATTRIBLPOINTERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);$/;"	t
PFNGLVERTEXATTRIBP1UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP1UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBP2UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP2UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBP3UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP3UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBP4UIPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	t
PFNGLVERTEXATTRIBP4UIVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	t
PFNGLVERTEXATTRIBPOINTERPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);$/;"	t
PFNGLVERTEXBINDINGDIVISORPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor);$/;"	t
PFNGLVIEWPORTARRAYVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v);$/;"	t
PFNGLVIEWPORTINDEXEDFPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);$/;"	t
PFNGLVIEWPORTINDEXEDFVPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat *v);$/;"	t
PFNGLVIEWPORTPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLWAITSYNCPROC	render/glcorearb.h	/^typedef void (APIENTRYP PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t
PICKUP	entity/entity.h	/^		PICKUP$/;"	e	enum:Entity::Type
PICKUP	physics/layers.h	/^	PICKUP =		0x0040$/;"	e	enum:CollisionLayer
PICKUP_MASK	physics/physics.h	/^	static const uint16_t PICKUP_MASK = CollisionLayer::PLAYER; \/\/ | CollisionLayer::ALLY$/;"	m	class:Physics	access:public
PLAYER	entity/entity.h	/^		PLAYER,$/;"	e	enum:Entity::Type
PLAYER	physics/layers.h	/^	PLAYER = 		0x0004,$/;"	e	enum:CollisionLayer
PLAYER_MASK	physics/physics.h	/^	static const uint16_t PLAYER_MASK = CollisionLayer::PICKUP | CollisionLayer::ENEMY_BULLET | CollisionLayer::MAP | CollisionLayer::ENEMY;$/;"	m	class:Physics	access:public
PLAYER_VISION_RANGE	constants.h	/^const float PLAYER_VISION_RANGE = 17.f;$/;"	v
PNG_TYPE	render/stb_image.h	2432;"	d
Path	map/mapdata.h	/^struct Path$/;"	s	namespace:mapgen
PhysicStep	entity/entity.h	/^	void PhysicStep()$/;"	f	class:Entity	access:public	signature:()
Physics	physics/physics.h	/^class Physics$/;"	c
Physics::ABULLET_MASK	physics/physics.h	/^	static const uint16_t ABULLET_MASK = CollisionLayer::MAP | CollisionLayer::ENEMY;$/;"	m	class:Physics	access:public
Physics::AddCubeBody	physics/physics.cpp	/^void Physics::AddCubeBody( float x, float y )$/;"	f	class:Physics	signature:( float x, float y )
Physics::AddCubeBody	physics/physics.h	/^	void AddCubeBody( float x, float y );$/;"	p	class:Physics	access:public	signature:( float x, float y )
Physics::Cleanup	physics/physics.cpp	/^void Physics::Cleanup()$/;"	f	class:Physics	signature:()
Physics::Cleanup	physics/physics.h	/^	void Cleanup();$/;"	p	class:Physics	access:public	signature:()
Physics::CreateBulletBody	physics/physics.cpp	/^b2Body* Physics::CreateBulletBody( float x, float y, CollisionLayer category, uint16_t mask )$/;"	f	class:Physics	signature:( float x, float y, CollisionLayer category, uint16_t mask )
Physics::CreateBulletBody	physics/physics.h	/^	b2Body* CreateBulletBody( float x, float y, CollisionLayer category, uint16_t mask );$/;"	p	class:Physics	access:public	signature:( float x, float y, CollisionLayer category, uint16_t mask )
Physics::CreateSphereBody	physics/physics.cpp	/^b2Body* Physics::CreateSphereBody( float x, float y, CollisionLayer category, uint16_t mask )$/;"	f	class:Physics	signature:( float x, float y, CollisionLayer category, uint16_t mask )
Physics::CreateSphereBody	physics/physics.h	/^	b2Body* CreateSphereBody( float x, float y, CollisionLayer category = CollisionLayer::ENEMY, uint16_t mask = MOB_MASK );$/;"	p	class:Physics	access:public	signature:( float x, float y, CollisionLayer category = CollisionLayer::ENEMY, uint16_t mask = MOB_MASK )
Physics::EBULLET_MASK	physics/physics.h	/^	static const uint16_t EBULLET_MASK = CollisionLayer::MAP | CollisionLayer::PLAYER; \/\/ | CollisionLayer::ALLY$/;"	m	class:Physics	access:public
Physics::Init	physics/physics.cpp	/^void Physics::Init( int argc, char** argv )$/;"	f	class:Physics	signature:( int argc, char** argv )
Physics::Init	physics/physics.h	/^	void Init( int argc, char** argv );$/;"	p	class:Physics	access:public	signature:( int argc, char** argv )
Physics::MOB_MASK	physics/physics.h	/^	static const uint16_t MOB_MASK = CollisionLayer::ALLY_BULLET | CollisionLayer::MAP | CollisionLayer::ENEMY | CollisionLayer::PLAYER;$/;"	m	class:Physics	access:public
Physics::PICKUP_MASK	physics/physics.h	/^	static const uint16_t PICKUP_MASK = CollisionLayer::PLAYER; \/\/ | CollisionLayer::ALLY$/;"	m	class:Physics	access:public
Physics::PLAYER_MASK	physics/physics.h	/^	static const uint16_t PLAYER_MASK = CollisionLayer::PICKUP | CollisionLayer::ENEMY_BULLET | CollisionLayer::MAP | CollisionLayer::ENEMY;$/;"	m	class:Physics	access:public
Physics::Step	physics/physics.cpp	/^void Physics::Step()$/;"	f	class:Physics	signature:()
Physics::Step	physics/physics.h	/^	void Step();$/;"	p	class:Physics	access:public	signature:()
Physics::Stress	physics/physics.cpp	/^void Physics::Stress(Player* p)$/;"	f	class:Physics	signature:(Player* p)
Physics::Stress	physics/physics.h	/^	void Stress(Player*p);$/;"	p	class:Physics	access:public	signature:(Player*p)
Physics::contactlistener	physics/physics.h	/^	ContactListener contactlistener;$/;"	m	class:Physics	access:private
Physics::positionIterations	physics/physics.h	/^	const int32 positionIterations = 2;$/;"	m	class:Physics	access:private
Physics::rng	physics/physics.h	/^	RNG rng;$/;"	m	class:Physics	access:private
Physics::timeStep	physics/physics.h	/^	const float32 timeStep = 1.0f \/ 60.0f;$/;"	m	class:Physics	access:private
Physics::velocityIterations	physics/physics.h	/^	const int32 velocityIterations = 6;$/;"	m	class:Physics	access:private
Physics::world	physics/physics.h	/^	b2World* world;$/;"	m	class:Physics	access:private
Pickup	entity/pickup.h	/^class Pickup : public Entity {$/;"	c	inherits:Entity
Pickup::AMMO	entity/pickup.h	/^		AMMO, HEALTH, ITEM$/;"	e	enum:Pickup::Type
Pickup::HEALTH	entity/pickup.h	/^		AMMO, HEALTH, ITEM$/;"	e	enum:Pickup::Type
Pickup::ITEM	entity/pickup.h	/^		AMMO, HEALTH, ITEM$/;"	e	enum:Pickup::Type
Pickup::Type	entity/pickup.h	/^	enum Type {$/;"	g	class:Pickup	access:public
Pickup::quantity	entity/pickup.h	/^	int quantity=20;$/;"	m	class:Pickup	access:public
Pickup::type	entity/pickup.h	/^	Type type;$/;"	m	class:Pickup	access:public
PickupController	entity/controller/pickupcontroller.h	/^class PickupController : public EntityController {$/;"	c	inherits:EntityController
PickupController::Step	entity/controller/pickupcontroller.h	/^	void Step( Entity* e, uint32_t delta )$/;"	f	class:PickupController	access:public	signature:( Entity* e, uint32_t delta )
PixelStorei	render/context.h	/^  PFNGLPIXELSTOREIPROC PixelStorei;$/;"	m	class:Render::Context	access:public
Plane	render/plane.h	/^	Plane() :$/;"	f	class:Plane	access:public	signature:()
Plane	render/plane.h	/^class Plane : public Mesh$/;"	c	inherits:Mesh
Plane::Plane	render/plane.h	/^	Plane() :$/;"	f	class:Plane	access:public	signature:()
Plane::Prepare	render/plane.h	/^	void Prepare( Render::Context* gl, int width, int height, float planewidth=1.f, float planeheight=1.f )$/;"	f	class:Plane	access:public	signature:( Render::Context* gl, int width, int height, float planewidth=1.f, float planeheight=1.f )
Plane::UpdateVertices	render/plane.h	/^	void UpdateVertices( int width, int height, int planewidth, int planeheight )$/;"	f	class:Plane	access:public	signature:( int width, int height, int planewidth, int planeheight )
Player	entity/player.h	/^class Player : public Actor$/;"	c	inherits:Actor
Player::BAT	entity/player.h	/^	float BAT;$/;"	m	class:Player	access:public
Player::SPR	entity/player.h	/^	float SPR;$/;"	m	class:Player	access:public
Player::ammo	entity/player.h	/^	int ammo = 200;$/;"	m	class:Player	access:public
Player::inventory	entity/player.h	/^	Inventory* inventory;$/;"	m	class:Player	access:public
Player::inventory_open	entity/player.h	/^	bool inventory_open;$/;"	m	class:Player	access:public
Player::run_speed	entity/player.h	/^	float run_speed = 16.f;$/;"	m	class:Player	access:public
Player::walk_speed	entity/player.h	/^	float walk_speed = 8.f;$/;"	m	class:Player	access:public
Player::weapon	entity/player.h	/^	PlayerWeapon weapon; \/\/ ES UN PUNTERO!! CAMBIADO PARA TESTEAR!!$/;"	m	class:Player	access:public
PlayerHumanController	entity/controller/playerhumancontroller.cpp	/^PlayerHumanController::PlayerHumanController ()$/;"	f	class:PlayerHumanController	signature:()
PlayerHumanController	entity/controller/playerhumancontroller.h	/^	PlayerHumanController ();$/;"	p	class:PlayerHumanController	access:public	signature:()
PlayerHumanController	entity/controller/playerhumancontroller.h	/^class PlayerHumanController : public EntityController {$/;"	c	inherits:EntityController
PlayerHumanController::HandleEvent	entity/controller/playerhumancontroller.cpp	/^int PlayerHumanController::HandleEvent( SDL_Event& event )$/;"	f	class:PlayerHumanController	signature:( SDL_Event& event )
PlayerHumanController::HandleEvent	entity/controller/playerhumancontroller.h	/^	int HandleEvent( SDL_Event& event );$/;"	p	class:PlayerHumanController	access:public	signature:( SDL_Event& event )
PlayerHumanController::PlayerHumanController	entity/controller/playerhumancontroller.cpp	/^PlayerHumanController::PlayerHumanController ()$/;"	f	class:PlayerHumanController	signature:()
PlayerHumanController::PlayerHumanController	entity/controller/playerhumancontroller.h	/^	PlayerHumanController ();$/;"	p	class:PlayerHumanController	access:public	signature:()
PlayerHumanController::Step	entity/controller/playerhumancontroller.cpp	/^void PlayerHumanController::Step( Entity* e, uint32_t delta )$/;"	f	class:PlayerHumanController	signature:( Entity* e, uint32_t delta )
PlayerHumanController::Step	entity/controller/playerhumancontroller.h	/^	void Step( Entity* e, uint32_t delta );$/;"	p	class:PlayerHumanController	access:public	signature:( Entity* e, uint32_t delta )
PlayerHumanController::axis	entity/controller/playerhumancontroller.h	/^	cml::vector2f axis, rotation_offset;$/;"	m	class:PlayerHumanController	access:private
PlayerHumanController::back	entity/controller/playerhumancontroller.h	/^	bool forward, back, left, right;$/;"	m	class:PlayerHumanController	access:private
PlayerHumanController::forward	entity/controller/playerhumancontroller.h	/^	bool forward, back, left, right;$/;"	m	class:PlayerHumanController	access:private
PlayerHumanController::left	entity/controller/playerhumancontroller.h	/^	bool forward, back, left, right;$/;"	m	class:PlayerHumanController	access:private
PlayerHumanController::right	entity/controller/playerhumancontroller.h	/^	bool forward, back, left, right;$/;"	m	class:PlayerHumanController	access:private
PlayerHumanController::rotation_offset	entity/controller/playerhumancontroller.h	/^	cml::vector2f axis, rotation_offset;$/;"	m	class:PlayerHumanController	access:private
PlayerHumanController::sensitivity	entity/controller/playerhumancontroller.h	/^	float sensitivity = 0.1;$/;"	m	class:PlayerHumanController	access:private
PlayerHumanController::shift	entity/controller/playerhumancontroller.h	/^	bool shift, shoot;$/;"	m	class:PlayerHumanController	access:private
PlayerHumanController::shoot	entity/controller/playerhumancontroller.h	/^	bool shift, shoot;$/;"	m	class:PlayerHumanController	access:private
PlayerHumanController::~PlayerHumanController	entity/controller/playerhumancontroller.cpp	/^PlayerHumanController::~PlayerHumanController ()$/;"	f	class:PlayerHumanController	signature:()
PlayerHumanController::~PlayerHumanController	entity/controller/playerhumancontroller.h	/^	virtual ~PlayerHumanController ();$/;"	p	class:PlayerHumanController	access:public	signature:()
PlayerWeapon	entity/script/playerweapon.h	/^class PlayerWeapon : public Weapon$/;"	c	inherits:Weapon
PlayerWeapon::BAT_per_shot	entity/script/playerweapon.h	/^	float BAT_per_shot;$/;"	m	class:PlayerWeapon	access:public
PlayerWeapon::SPR_per_shot	entity/script/playerweapon.h	/^	float SPR_per_shot;$/;"	m	class:PlayerWeapon	access:public
PlayerWeapon::Shoot	entity/script/playerweapon.h	/^	virtual void Shoot() {}$/;"	f	class:PlayerWeapon	access:public	signature:()
Plot	texgen/canvas.cpp	/^void Canvas::Plot( int x, int y, Color c )$/;"	f	class:Canvas	signature:( int x, int y, Color c )
Plot	texgen/canvas.h	/^	void Plot( int x, int y, Color c );$/;"	p	class:Canvas	access:public	signature:( int x, int y, Color c )
Prepare	entity/controller/entitycontroller.cpp	/^void EntityController::Prepare( EntityFactory *ef, Player* player )$/;"	f	class:EntityController	signature:( EntityFactory *ef, Player* player )
Prepare	entity/controller/entitycontroller.h	/^	static void Prepare( EntityFactory* entityfactory, Player* player );$/;"	p	class:EntityController	access:public	signature:( EntityFactory* entityfactory, Player* player )
Prepare	entity/entity.h	/^	void Prepare( Sprite3D* sprite )$/;"	f	class:Entity	access:public	signature:( Sprite3D* sprite )
Prepare	entity/entityfactory.cpp	/^void EntityFactory::Prepare( Physics* physics, Assets* assets, DynamicArray<Entity*>* actorlist, DynamicArray<Entity*>* bulletlist, Transform* sceneRoot )$/;"	f	class:EntityFactory	signature:( Physics* physics, Assets* assets, DynamicArray<Entity*>* actorlist, DynamicArray<Entity*>* bulletlist, Transform* sceneRoot )
Prepare	entity/entityfactory.h	/^	void Prepare($/;"	p	class:EntityFactory	access:public	signature:( Physics* physics, Assets* assets, DynamicArray<Entity*>* actorlist, DynamicArray<Entity*>* bulletlist, Transform* sceneRoot )
Prepare	render/assets.h	/^	void Prepare( Render::Context* gl )$/;"	f	class:Assets	access:public	signature:( Render::Context* gl )
Prepare	render/block.h	/^	void Prepare( Render::Context* gl )$/;"	f	class:Block	access:public	signature:( Render::Context* gl )
Prepare	render/font.h	/^	void Prepare( Render::Context* gl, FT_Library& ft, const char* path, int height=48 )$/;"	f	class:Font	access:public	signature:( Render::Context* gl, FT_Library& ft, const char* path, int height=48 )
Prepare	render/mesh.h	/^	void Prepare( Render::Context* gl )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl )
Prepare	render/plane.h	/^	void Prepare( Render::Context* gl, int width, int height, float planewidth=1.f, float planeheight=1.f )$/;"	f	class:Plane	access:public	signature:( Render::Context* gl, int width, int height, float planewidth=1.f, float planeheight=1.f )
Prepare	render/program.h	/^	void Prepare( Render::Context* gl, const char* vs_path, const char* fs_path )$/;"	f	class:Program	access:public	signature:( Render::Context* gl, const char* vs_path, const char* fs_path )
Prepare	render/quad.h	/^	void Prepare( Render::Context* gl, int width = 1.f, int height = 1.f, float uvx = 1.f, float uvy = 1.f )$/;"	f	class:Quad	access:public	signature:( Render::Context* gl, int width = 1.f, int height = 1.f, float uvx = 1.f, float uvy = 1.f )
Prepare	render/renderer.h	/^	void Prepare( Render::Context* gl, int winWidth, int winHeight )$/;"	f	class:Renderer	access:public	signature:( Render::Context* gl, int winWidth, int winHeight )
Prepare	render/sprite3d.h	/^	void Prepare( Render::Context* gl, tdogl::Texture* tex, int frames_x = 1, int frames_y = 1 )$/;"	f	class:Sprite3D	access:public	signature:( Render::Context* gl, tdogl::Texture* tex, int frames_x = 1, int frames_y = 1 )
PrintModels	map/map.h	/^	void PrintModels()$/;"	f	class:Map	access:public	signature:()
PrintNodeInfo	ailib/mapsearchnode.h	/^	void PrintNodeInfo()$/;"	f	class:MapSearchNode	access:public	signature:()
Profile	render/context.h	/^  enum class Profile {$/;"	c	class:Render::Context	access:public
Program	render/program.h	/^class Program$/;"	c
Program::BindAttribLocation	render/program.h	/^	void BindAttribLocation( Render::Context* gl, GLuint loc, const char* shadervar )$/;"	f	class:Program	access:public	signature:( Render::Context* gl, GLuint loc, const char* shadervar )
Program::Compile	render/program.h	/^	void Compile( Render::Context* gl )$/;"	f	class:Program	access:public	signature:( Render::Context* gl )
Program::Dispose	render/program.h	/^	void Dispose( Render::Context* gl )$/;"	f	class:Program	access:public	signature:( Render::Context* gl )
Program::Object	render/program.h	/^	GLuint Object()$/;"	f	class:Program	access:public	signature:()
Program::Prepare	render/program.h	/^	void Prepare( Render::Context* gl, const char* vs_path, const char* fs_path )$/;"	f	class:Program	access:public	signature:( Render::Context* gl, const char* vs_path, const char* fs_path )
Program::SetShaders	render/program.h	/^	void SetShaders( Shader vert, Shader frag )$/;"	f	class:Program	access:public	signature:( Shader vert, Shader frag )
Program::frag	render/program.h	/^	Shader frag;$/;"	m	class:Program	access:private
Program::handle	render/program.h	/^	GLuint handle;$/;"	m	class:Program	access:private
Program::locations	render/program.h	/^	DynamicArray<GLuint> locations;$/;"	m	class:Program	access:private
Program::vert	render/program.h	/^	Shader vert;$/;"	m	class:Program	access:private
PurgeList	app/app.cpp	/^void App::PurgeList( DynamicArray<Entity*>& l )$/;"	f	class:App	signature:( DynamicArray<Entity*>& l )
PurgeList	app/app.h	/^	void PurgeList( DynamicArray<Entity*>& l );$/;"	p	class:App	access:private	signature:( DynamicArray<Entity*>& l )
Quad	render/quad.h	/^	Quad() :$/;"	f	class:Quad	access:public	signature:()
Quad	render/quad.h	/^class Quad : public Mesh$/;"	c	inherits:Mesh
Quad::Prepare	render/quad.h	/^	void Prepare( Render::Context* gl, int width = 1.f, int height = 1.f, float uvx = 1.f, float uvy = 1.f )$/;"	f	class:Quad	access:public	signature:( Render::Context* gl, int width = 1.f, int height = 1.f, float uvx = 1.f, float uvy = 1.f )
Quad::Quad	render/quad.h	/^	Quad() :$/;"	f	class:Quad	access:public	signature:()
Quad::UpdateUVs	render/quad.h	/^	void UpdateUVs( float xstep = 1.f, float ystep = 1.f)$/;"	f	class:Quad	access:public	signature:( float xstep = 1.f, float ystep = 1.f)
Quad::UpdateVertices	render/quad.h	/^	void UpdateVertices( float width, float height )$/;"	f	class:Quad	access:public	signature:( float width, float height )
Quad::height	render/quad.h	/^	int width, height;$/;"	m	class:Quad	access:private
Quad::width	render/quad.h	/^	int width, height;$/;"	m	class:Quad	access:private
REALLOC_STEP	core/dynamicarray.h	/^	static const size_t REALLOC_STEP = 5;$/;"	m	class:DynamicArray	access:private
RGB2Grayscale	render/Bitmap.cpp	/^static void RGB2Grayscale(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
RGB2GrayscaleAlpha	render/Bitmap.cpp	/^static void RGB2GrayscaleAlpha(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
RGB2RGBA	render/Bitmap.cpp	/^static void RGB2RGBA(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
RGBA2Grayscale	render/Bitmap.cpp	/^static void RGBA2Grayscale(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
RGBA2GrayscaleAlpha	render/Bitmap.cpp	/^static void RGBA2GrayscaleAlpha(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
RGBA2RGB	render/Bitmap.cpp	/^static void RGBA2RGB(unsigned char* src, unsigned char* dest){$/;"	f	file:	signature:(unsigned char* src, unsigned char* dest)
RNG	core/random.h	/^	RNG() : floatdist( 0.f, 1.f ) {}$/;"	f	class:RNG	access:public	signature:()
RNG	core/random.h	/^class RNG$/;"	c
RNG::RNG	core/random.h	/^	RNG() : floatdist( 0.f, 1.f ) {}$/;"	f	class:RNG	access:public	signature:()
RNG::floatdist	core/random.h	/^	std::uniform_real_distribution<float> floatdist;$/;"	m	class:RNG	access:private
RNG::gen	core/random.h	/^	std::mt19937 gen;$/;"	m	class:RNG	access:private
RNG::intdist	core/random.h	/^	std::uniform_int_distribution<int> intdist;$/;"	m	class:RNG	access:private
RNG::seed	core/random.h	/^	void seed( uint32_t seed )$/;"	f	class:RNG	access:public	signature:( uint32_t seed )
RNG::uniform	core/random.h	/^	float uniform( )$/;"	f	class:RNG	access:public	signature:( )
RNG::uniform	core/random.h	/^	int uniform( int low, int high )$/;"	f	class:RNG	access:public	signature:( int low, int high )
RandomPosition	map/mapdata.h	/^	cml::vector2i RandomPosition( RNG& rng, int reduce = 0 )$/;"	f	struct:mapgen::Room	access:public	signature:( RNG& rng, int reduce = 0 )
RasterMapData	map/mapgen.cpp	/^Map RasterMapData( MapData& md )$/;"	f	namespace:mapgen	signature:( MapData& md )
RasterMapData	map/mapgen.h	/^Map RasterMapData( MapData& md );$/;"	p	namespace:mapgen	signature:( MapData& md )
RasterMapData2	map/mapgen.cpp	/^Map RasterMapData2( MapData& md )$/;"	f	namespace:mapgen	signature:( MapData& md )
RasterPaths	map/mapgen.cpp	/^void RasterPaths( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type )$/;"	f	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type )
RasterPaths	map/mapgen.h	/^void RasterPaths( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type = Map::BLOCK_FREE );$/;"	p	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type = Map::BLOCK_FREE )
RasterRooms	map/mapgen.cpp	/^void RasterRooms( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type )$/;"	f	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type )
RasterRooms	map/mapgen.h	/^void RasterRooms( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type = Map::BLOCK_FREE );$/;"	p	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type = Map::BLOCK_FREE )
Raw	core/matrix2d.h	/^	const void* Raw()$/;"	f	class:Matrix2D	access:public	signature:()
Raw	texgen/canvas.cpp	/^const void* Canvas::Raw()$/;"	f	class:Canvas	signature:()
Raw	texgen/canvas.h	/^	const void* Raw();$/;"	p	class:Canvas	access:public	signature:()
Realloc	core/dynamicarray.h	/^	void Realloc( size_t realloc_step = REALLOC_STEP )$/;"	f	class:DynamicArray	access:private	signature:( size_t realloc_step = REALLOC_STEP )
RectsOverlap	render/Bitmap.cpp	/^inline bool RectsOverlap(unsigned srcCol, unsigned srcRow, unsigned destCol, unsigned destRow, unsigned width, unsigned height){$/;"	f	signature:(unsigned srcCol, unsigned srcRow, unsigned destCol, unsigned destRow, unsigned width, unsigned height)
RemoveLast	core/dynamicarray.h	/^	void RemoveLast()$/;"	f	class:DynamicArray	access:public	signature:()
Render	app/app.cpp	/^void App::Render()$/;"	f	class:App	signature:()
Render	app/app.h	/^	void Render();$/;"	p	class:App	access:private	signature:()
Render	app/sdlglapp.cpp	/^void SDLGLApp::Render()$/;"	f	class:SDLGLApp	signature:()
Render	app/sdlglapp.h	/^	virtual void Render();$/;"	p	class:SDLGLApp	access:protected	signature:()
Render	render/context.cpp	/^namespace Render{$/;"	n	file:
Render	render/context.h	/^namespace Render {$/;"	n
Render	render/sdlcontext.cpp	/^namespace Render {$/;"	n	file:
Render	render/sdlcontext.h	/^namespace Render {$/;"	n
Render::Context	render/context.h	/^class Context {$/;"	c	namespace:Render
Render::Context::ActiveTexture	render/context.h	/^  PFNGLACTIVETEXTUREPROC ActiveTexture;$/;"	m	class:Render::Context	access:public
Render::Context::AttachShader	render/context.h	/^  PFNGLATTACHSHADERPROC AttachShader;$/;"	m	class:Render::Context	access:public
Render::Context::BindAttribLocation	render/context.h	/^  PFNGLBINDATTRIBLOCATIONPROC BindAttribLocation;$/;"	m	class:Render::Context	access:public
Render::Context::BindBuffer	render/context.h	/^  PFNGLBINDBUFFERPROC BindBuffer;$/;"	m	class:Render::Context	access:public
Render::Context::BindFramebuffer	render/context.h	/^  PFNGLBINDFRAMEBUFFERPROC BindFramebuffer;$/;"	m	class:Render::Context	access:public
Render::Context::BindRenderbuffer	render/context.h	/^  PFNGLBINDRENDERBUFFERPROC BindRenderbuffer;$/;"	m	class:Render::Context	access:public
Render::Context::BindTexture	render/context.h	/^  PFNGLBINDTEXTUREPROC BindTexture;$/;"	m	class:Render::Context	access:public
Render::Context::BindVertexArray	render/context.h	/^  PFNGLBINDVERTEXARRAYPROC BindVertexArray;$/;"	m	class:Render::Context	access:public
Render::Context::BlendFunc	render/context.h	/^  PFNGLBLENDFUNCPROC BlendFunc;$/;"	m	class:Render::Context	access:public
Render::Context::BufferData	render/context.h	/^  PFNGLBUFFERDATAPROC BufferData;$/;"	m	class:Render::Context	access:public
Render::Context::CheckExtension	render/context.h	/^  virtual bool CheckExtension(const char*name) = 0;$/;"	p	class:Render::Context	access:protected	signature:(const char*name)
Render::Context::Clear	render/context.h	/^  PFNGLCLEARPROC Clear;$/;"	m	class:Render::Context	access:public
Render::Context::ClearColor	render/context.h	/^  PFNGLCLEARCOLORPROC ClearColor;$/;"	m	class:Render::Context	access:public
Render::Context::CompileShader	render/context.h	/^  PFNGLCOMPILESHADERPROC CompileShader;$/;"	m	class:Render::Context	access:public
Render::Context::Context	render/context.h	/^  Context( Render::Context::Profile prof )$/;"	f	class:Render::Context	access:public	signature:( Render::Context::Profile prof )
Render::Context::CreateProgram	render/context.h	/^  PFNGLCREATEPROGRAMPROC CreateProgram;$/;"	m	class:Render::Context	access:public
Render::Context::CreateShader	render/context.h	/^  PFNGLCREATESHADERPROC CreateShader;$/;"	m	class:Render::Context	access:public
Render::Context::CullFace	render/context.h	/^  PFNGLCULLFACEPROC CullFace;$/;"	m	class:Render::Context	access:public
Render::Context::DeleteBuffers	render/context.h	/^  PFNGLDELETEBUFFERSPROC DeleteBuffers;$/;"	m	class:Render::Context	access:public
Render::Context::DeleteProgram	render/context.h	/^  PFNGLDELETEPROGRAMPROC DeleteProgram;$/;"	m	class:Render::Context	access:public
Render::Context::DeleteShader	render/context.h	/^  PFNGLDELETESHADERPROC DeleteShader;$/;"	m	class:Render::Context	access:public
Render::Context::DeleteTextures	render/context.h	/^  PFNGLDELETETEXTURESPROC DeleteTextures;$/;"	m	class:Render::Context	access:public
Render::Context::DeleteVertexArrays	render/context.h	/^  PFNGLDELETEVERTEXARRAYSPROC DeleteVertexArrays;$/;"	m	class:Render::Context	access:public
Render::Context::DepthFunc	render/context.h	/^  PFNGLDEPTHFUNCPROC DepthFunc;$/;"	m	class:Render::Context	access:public
Render::Context::DetachShader	render/context.h	/^  PFNGLDETACHSHADERPROC DetachShader;$/;"	m	class:Render::Context	access:public
Render::Context::Disable	render/context.h	/^  PFNGLDISABLEPROC Disable;$/;"	m	class:Render::Context	access:public
Render::Context::DisableVertexAttribArray	render/context.h	/^  PFNGLDISABLEVERTEXATTRIBARRAYPROC DisableVertexAttribArray;$/;"	m	class:Render::Context	access:public
Render::Context::DrawArrays	render/context.h	/^  PFNGLDRAWARRAYSPROC DrawArrays;$/;"	m	class:Render::Context	access:public
Render::Context::DrawArraysInstanced	render/context.h	/^  PFNGLDRAWARRAYSINSTANCEDPROC DrawArraysInstanced;$/;"	m	class:Render::Context	access:public
Render::Context::Enable	render/context.h	/^  PFNGLENABLEPROC Enable;$/;"	m	class:Render::Context	access:public
Render::Context::EnableVertexAttribArray	render/context.h	/^  PFNGLENABLEVERTEXATTRIBARRAYPROC EnableVertexAttribArray;$/;"	m	class:Render::Context	access:public
Render::Context::FramebufferRenderbuffer	render/context.h	/^  PFNGLFRAMEBUFFERRENDERBUFFERPROC FramebufferRenderbuffer;$/;"	m	class:Render::Context	access:public
Render::Context::FramebufferTexture2D	render/context.h	/^  PFNGLFRAMEBUFFERTEXTURE2DPROC FramebufferTexture2D;$/;"	m	class:Render::Context	access:public
Render::Context::FrontFace	render/context.h	/^  PFNGLFRONTFACEPROC FrontFace;$/;"	m	class:Render::Context	access:public
Render::Context::GenBuffers	render/context.h	/^  PFNGLGENBUFFERSPROC GenBuffers;$/;"	m	class:Render::Context	access:public
Render::Context::GenFramebuffers	render/context.h	/^  PFNGLGENFRAMEBUFFERSPROC GenFramebuffers;$/;"	m	class:Render::Context	access:public
Render::Context::GenRenderbuffers	render/context.h	/^  PFNGLGENRENDERBUFFERSPROC GenRenderbuffers;$/;"	m	class:Render::Context	access:public
Render::Context::GenTextures	render/context.h	/^  PFNGLGENTEXTURESPROC GenTextures;$/;"	m	class:Render::Context	access:public
Render::Context::GenVertexArrays	render/context.h	/^  PFNGLGENVERTEXARRAYSPROC GenVertexArrays;$/;"	m	class:Render::Context	access:public
Render::Context::GetAttribLocation	render/context.h	/^  PFNGLGETATTRIBLOCATIONPROC GetAttribLocation;$/;"	m	class:Render::Context	access:public
Render::Context::GetProc	render/context.h	/^  template <typename T> bool GetProc(T&p, const char*name)$/;"	f	class:Render::Context	access:protected	signature:(T&p, const char*name)
Render::Context::GetProc	render/context.h	/^  virtual bool GetProc(void*&p,const char*name) = 0;$/;"	p	class:Render::Context	access:protected	signature:(void*&p,const char*name)
Render::Context::GetProgramInfoLog	render/context.h	/^  PFNGLGETPROGRAMINFOLOGPROC GetProgramInfoLog;$/;"	m	class:Render::Context	access:public
Render::Context::GetProgramiv	render/context.h	/^  PFNGLGETPROGRAMIVPROC GetProgramiv;$/;"	m	class:Render::Context	access:public
Render::Context::GetShaderInfoLog	render/context.h	/^  PFNGLGETSHADERINFOLOGPROC GetShaderInfoLog;$/;"	m	class:Render::Context	access:public
Render::Context::GetShaderiv	render/context.h	/^  PFNGLGETSHADERIVPROC GetShaderiv;$/;"	m	class:Render::Context	access:public
Render::Context::GetUniformLocation	render/context.h	/^  PFNGLGETUNIFORMLOCATIONPROC GetUniformLocation;$/;"	m	class:Render::Context	access:public
Render::Context::GetVersion	render/context.h	/^  virtual void GetVersion(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile) = 0;$/;"	p	class:Render::Context	access:protected	signature:(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)
Render::Context::LinkProgram	render/context.h	/^  PFNGLLINKPROGRAMPROC LinkProgram;$/;"	m	class:Render::Context	access:public
Render::Context::MakeCurrent	render/context.cpp	/^bool Context::MakeCurrent()$/;"	f	class:Render::Context	signature:()
Render::Context::MakeCurrent	render/context.h	/^  bool MakeCurrent();$/;"	p	class:Render::Context	access:protected	signature:()
Render::Context::PixelStorei	render/context.h	/^  PFNGLPIXELSTOREIPROC PixelStorei;$/;"	m	class:Render::Context	access:public
Render::Context::Profile	render/context.h	/^  enum class Profile {$/;"	c	class:Render::Context	access:public
Render::Context::Profile::Core	render/context.h	/^    Core,$/;"	m	class:Render::Context::Profile	access:private
Render::Context::RenderbufferStorage	render/context.h	/^  PFNGLRENDERBUFFERSTORAGEPROC RenderbufferStorage;$/;"	m	class:Render::Context	access:public
Render::Context::ShaderSource	render/context.h	/^  PFNGLSHADERSOURCEPROC ShaderSource;$/;"	m	class:Render::Context	access:public
Render::Context::TexImage2D	render/context.h	/^  PFNGLTEXIMAGE2DPROC TexImage2D;$/;"	m	class:Render::Context	access:public
Render::Context::TexParameteri	render/context.h	/^  PFNGLTEXPARAMETERIPROC TexParameteri;$/;"	m	class:Render::Context	access:public
Render::Context::TexSubImage2D	render/context.h	/^  PFNGLTEXSUBIMAGE2DPROC TexSubImage2D;$/;"	m	class:Render::Context	access:public
Render::Context::Uniform1f	render/context.h	/^  PFNGLUNIFORM1FPROC Uniform1f;$/;"	m	class:Render::Context	access:public
Render::Context::Uniform1fv	render/context.h	/^  PFNGLUNIFORM1FVPROC Uniform1fv;$/;"	m	class:Render::Context	access:public
Render::Context::Uniform1i	render/context.h	/^  PFNGLUNIFORM1IPROC Uniform1i;$/;"	m	class:Render::Context	access:public
Render::Context::Uniform2f	render/context.h	/^  PFNGLUNIFORM2FPROC Uniform2f;$/;"	m	class:Render::Context	access:public
Render::Context::Uniform3f	render/context.h	/^  PFNGLUNIFORM3FPROC Uniform3f;$/;"	m	class:Render::Context	access:public
Render::Context::Uniform4f	render/context.h	/^  PFNGLUNIFORM4FPROC Uniform4f;$/;"	m	class:Render::Context	access:public
Render::Context::UniformMatrix4fv	render/context.h	/^  PFNGLUNIFORMMATRIX4FVPROC UniformMatrix4fv;$/;"	m	class:Render::Context	access:public
Render::Context::UseProgram	render/context.h	/^  PFNGLUSEPROGRAMPROC UseProgram;$/;"	m	class:Render::Context	access:public
Render::Context::VertexAttribDivisor	render/context.h	/^  PFNGLVERTEXATTRIBDIVISORPROC VertexAttribDivisor;$/;"	m	class:Render::Context	access:public
Render::Context::VertexAttribPointer	render/context.h	/^  PFNGLVERTEXATTRIBPOINTERPROC VertexAttribPointer;$/;"	m	class:Render::Context	access:public
Render::Context::current	render/context.h	/^  static Context* current;$/;"	m	class:Render::Context	access:public
Render::Context::profile	render/context.h	/^  const Profile profile;$/;"	m	class:Render::Context	access:public
Render::Context::~Context	render/context.h	/^  virtual ~Context(){}$/;"	f	class:Render::Context	access:public	signature:()
Render::SDL	render/sdlcontext.cpp	/^namespace SDL {$/;"	n	namespace:Render	file:
Render::SDL	render/sdlcontext.h	/^namespace SDL {$/;"	n	namespace:Render
Render::SDL::Context	render/sdlcontext.h	/^class Context : public Render::Context {$/;"	c	namespace:Render::SDL	inherits:Render::Context
Render::SDL::Context::CheckExtension	render/sdlcontext.cpp	/^bool Context::CheckExtension(const char*name)$/;"	f	class:Render::SDL::Context	signature:(const char*name)
Render::SDL::Context::CheckExtension	render/sdlcontext.h	/^  bool CheckExtension(const char*name);$/;"	p	class:Render::SDL::Context	access:public	signature:(const char*name)
Render::SDL::Context::Cleanup	render/sdlcontext.h	/^  void Cleanup()$/;"	f	class:Render::SDL::Context	access:public	signature:()
Render::SDL::Context::Context	render/sdlcontext.h	/^  Context( SDL_GLContext c, Render::Context::Profile prof ) :$/;"	f	class:Render::SDL::Context	access:public	signature:( SDL_GLContext c, Render::Context::Profile prof )
Render::SDL::Context::GetProc	render/sdlcontext.h	/^  bool GetProc(void*&p,const char*name)$/;"	f	class:Render::SDL::Context	access:public	signature:(void*&p,const char*name)
Render::SDL::Context::GetVersion	render/sdlcontext.cpp	/^void Context::GetVersion(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)$/;"	f	class:Render::SDL::Context	signature:(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)
Render::SDL::Context::GetVersion	render/sdlcontext.h	/^  void GetVersion(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile);$/;"	p	class:Render::SDL::Context	access:public	signature:(uint8_t &major, uint8_t &minor, Render::Context::Profile&profile)
Render::SDL::Context::MakeCurrent	render/sdlcontext.cpp	/^bool Context::MakeCurrent( SDL_Window* w )$/;"	f	class:Render::SDL::Context	signature:( SDL_Window* w )
Render::SDL::Context::MakeCurrent	render/sdlcontext.h	/^  bool MakeCurrent( SDL_Window* w );$/;"	p	class:Render::SDL::Context	access:public	signature:( SDL_Window* w )
Render::SDL::Context::ctx	render/sdlcontext.h	/^  SDL_GLContext ctx;$/;"	m	class:Render::SDL::Context	access:private
Render::SDL::Context::~Context	render/sdlcontext.cpp	/^Context::~Context()$/;"	f	class:Render::SDL::Context	signature:()
Render::SDL::Context::~Context	render/sdlcontext.h	/^  virtual ~Context();$/;"	p	class:Render::SDL::Context	access:public	signature:()
RenderActor	render/renderer.h	/^	void RenderActor( Actor* actor )$/;"	f	class:Renderer	access:public	signature:( Actor* actor )
RenderBlocks	render/renderer.h	/^	void RenderBlocks( Map& map, tdogl::Texture* tex, int num )$/;"	f	class:Renderer	access:public	signature:( Map& map, tdogl::Texture* tex, int num )
RenderClear	render/renderer.h	/^	void RenderClear()$/;"	f	class:Renderer	access:public	signature:()
RenderEntity	render/renderer.h	/^	void RenderEntity( Entity* ent )$/;"	f	class:Renderer	access:public	signature:( Entity* ent )
RenderFinish	render/renderer.h	/^	void RenderFinish( SDL_Window* mainWindow, uint32_t delta )$/;"	f	class:Renderer	access:public	signature:( SDL_Window* mainWindow, uint32_t delta )
RenderMap	render/renderer.h	/^	void RenderMap( Map& map, tdogl::Texture* tex1, tdogl::Texture* tex2, tdogl::Texture* tex3 )$/;"	f	class:Renderer	access:public	signature:( Map& map, tdogl::Texture* tex1, tdogl::Texture* tex2, tdogl::Texture* tex3 )
RenderMiniText	app/app.cpp	/^void App::RenderMiniText()$/;"	f	class:App	signature:()
RenderMiniText	app/app.h	/^	void RenderMiniText();$/;"	p	class:App	access:private	signature:()
RenderPlane	render/renderer.h	/^	void RenderPlane( Plane* p, const cml::matrix44f_c& model, tdogl::Texture* tex )$/;"	f	class:Renderer	access:public	signature:( Plane* p, const cml::matrix44f_c& model, tdogl::Texture* tex )
RenderPlayerHP	app/app.cpp	/^void App::RenderPlayerHP()$/;"	f	class:App	signature:()
RenderPlayerHP	app/app.h	/^	void RenderPlayerHP();$/;"	p	class:App	access:private	signature:()
RenderPostQuad	render/renderer.h	/^	void RenderPostQuad()$/;"	f	class:Renderer	access:public	signature:()
RenderRest	entity/entityfactory.cpp	/^void EntityFactory::RenderRest( Renderer& renderer )$/;"	f	class:EntityFactory	signature:( Renderer& renderer )
RenderRest	entity/entityfactory.h	/^	void RenderRest( Renderer& renderer );$/;"	p	class:EntityFactory	access:public	signature:( Renderer& renderer )
RenderSprite3D	render/renderer.h	/^	void RenderSprite3D( Sprite3D* sprite, const cml::matrix44f_c& model )$/;"	f	class:Renderer	access:public	signature:( Sprite3D* sprite, const cml::matrix44f_c& model )
RenderText	render/renderer.h	/^	void RenderText( const char* text, float x, float y, cml::vector4f color = cml::vectorf(1.f,0.f,0.f,1.f), float sx_ = 1.f, float sy_ = 1.f )$/;"	f	class:Renderer	access:public	signature:( const char* text, float x, float y, cml::vector4f color = cml::vectorf(1.f,0.f,0.f,1.f), float sx_ = 1.f, float sy_ = 1.f )
RenderbufferStorage	render/context.h	/^  PFNGLRENDERBUFFERSTORAGEPROC RenderbufferStorage;$/;"	m	class:Render::Context	access:public
Renderer	render/renderer.h	/^class Renderer$/;"	c
Renderer::AllocPostQuad	render/renderer.h	/^	void AllocPostQuad()$/;"	f	class:Renderer	access:public	signature:()
Renderer::BatchSprite3D	render/renderer.h	/^	void BatchSprite3D()$/;"	f	class:Renderer	access:public	signature:()
Renderer::BindPostFBO	render/renderer.h	/^	void BindPostFBO()$/;"	f	class:Renderer	access:public	signature:()
Renderer::BindVP	render/renderer.h	/^	inline void BindVP( GLuint shaderprogram )$/;"	f	class:Renderer	access:public	signature:( GLuint shaderprogram )
Renderer::BindVisionRange	render/renderer.h	/^	inline void BindVisionRange( GLuint shaderprogram )$/;"	f	class:Renderer	access:public	signature:( GLuint shaderprogram )
Renderer::Dispose	render/renderer.h	/^	void Dispose()$/;"	f	class:Renderer	access:public	signature:()
Renderer::Prepare	render/renderer.h	/^	void Prepare( Render::Context* gl, int winWidth, int winHeight )$/;"	f	class:Renderer	access:public	signature:( Render::Context* gl, int winWidth, int winHeight )
Renderer::RenderActor	render/renderer.h	/^	void RenderActor( Actor* actor )$/;"	f	class:Renderer	access:public	signature:( Actor* actor )
Renderer::RenderBlocks	render/renderer.h	/^	void RenderBlocks( Map& map, tdogl::Texture* tex, int num )$/;"	f	class:Renderer	access:public	signature:( Map& map, tdogl::Texture* tex, int num )
Renderer::RenderClear	render/renderer.h	/^	void RenderClear()$/;"	f	class:Renderer	access:public	signature:()
Renderer::RenderEntity	render/renderer.h	/^	void RenderEntity( Entity* ent )$/;"	f	class:Renderer	access:public	signature:( Entity* ent )
Renderer::RenderFinish	render/renderer.h	/^	void RenderFinish( SDL_Window* mainWindow, uint32_t delta )$/;"	f	class:Renderer	access:public	signature:( SDL_Window* mainWindow, uint32_t delta )
Renderer::RenderMap	render/renderer.h	/^	void RenderMap( Map& map, tdogl::Texture* tex1, tdogl::Texture* tex2, tdogl::Texture* tex3 )$/;"	f	class:Renderer	access:public	signature:( Map& map, tdogl::Texture* tex1, tdogl::Texture* tex2, tdogl::Texture* tex3 )
Renderer::RenderPlane	render/renderer.h	/^	void RenderPlane( Plane* p, const cml::matrix44f_c& model, tdogl::Texture* tex )$/;"	f	class:Renderer	access:public	signature:( Plane* p, const cml::matrix44f_c& model, tdogl::Texture* tex )
Renderer::RenderPostQuad	render/renderer.h	/^	void RenderPostQuad()$/;"	f	class:Renderer	access:public	signature:()
Renderer::RenderSprite3D	render/renderer.h	/^	void RenderSprite3D( Sprite3D* sprite, const cml::matrix44f_c& model )$/;"	f	class:Renderer	access:public	signature:( Sprite3D* sprite, const cml::matrix44f_c& model )
Renderer::RenderText	render/renderer.h	/^	void RenderText( const char* text, float x, float y, cml::vector4f color = cml::vectorf(1.f,0.f,0.f,1.f), float sx_ = 1.f, float sy_ = 1.f )$/;"	f	class:Renderer	access:public	signature:( const char* text, float x, float y, cml::vector4f color = cml::vectorf(1.f,0.f,0.f,1.f), float sx_ = 1.f, float sy_ = 1.f )
Renderer::SetVP	render/renderer.h	/^	void SetVP( const cml::matrix44f_c& view, const cml::matrix44f_c& projection )$/;"	f	class:Renderer	access:public	signature:( const cml::matrix44f_c& view, const cml::matrix44f_c& projection )
Renderer::SetViewerPos	render/renderer.h	/^	void SetViewerPos( cml::vector3f& vp )$/;"	f	class:Renderer	access:public	signature:( cml::vector3f& vp )
Renderer::UseCreatedFBO	render/renderer.h	/^	void UseCreatedFBO() { gl->BindFramebuffer( GL_FRAMEBUFFER, frameBuffer ); }$/;"	f	class:Renderer	access:public	signature:()
Renderer::UseDefaultFBO	render/renderer.h	/^	void UseDefaultFBO() { gl->BindFramebuffer( GL_FRAMEBUFFER, 0 ); }$/;"	f	class:Renderer	access:public	signature:()
Renderer::array	render/renderer.h	/^	GLfloat array[256];$/;"	m	class:Renderer	access:private
Renderer::attribute_coord	render/renderer.h	/^	GLuint attribute_coord, uniform_tex, uniform_color;$/;"	m	class:Renderer	access:private
Renderer::block	render/renderer.h	/^	Block block;$/;"	m	class:Renderer	access:private
Renderer::blockprog	render/renderer.h	/^	Program quadprog, blockprog, planeprog, postprog, fontprog;$/;"	m	class:Renderer	access:private
Renderer::cube_fog_range	render/renderer.h	/^	float cube_fog_range;$/;"	m	class:Renderer	access:private
Renderer::default_font	render/renderer.h	/^	Font default_font;$/;"	m	class:Renderer	access:private
Renderer::fontprog	render/renderer.h	/^	Program quadprog, blockprog, planeprog, postprog, fontprog;$/;"	m	class:Renderer	access:private
Renderer::fontvao	render/renderer.h	/^	GLuint fontvao, fontvbo;$/;"	m	class:Renderer	access:private
Renderer::fontvbo	render/renderer.h	/^	GLuint fontvao, fontvbo;$/;"	m	class:Renderer	access:private
Renderer::frameBuffer	render/renderer.h	/^	GLuint frameBuffer, texColorBuffer, rboDepthStencil, postvao, postvbo;$/;"	m	class:Renderer	access:private
Renderer::ftlib	render/renderer.h	/^	FT_Library ftlib;$/;"	m	class:Renderer	access:private
Renderer::gl	render/renderer.h	/^	Render::Context* gl;$/;"	m	class:Renderer	access:private
Renderer::planeprog	render/renderer.h	/^	Program quadprog, blockprog, planeprog, postprog, fontprog;$/;"	m	class:Renderer	access:private
Renderer::postprog	render/renderer.h	/^	Program quadprog, blockprog, planeprog, postprog, fontprog;$/;"	m	class:Renderer	access:private
Renderer::postvao	render/renderer.h	/^	GLuint frameBuffer, texColorBuffer, rboDepthStencil, postvao, postvbo;$/;"	m	class:Renderer	access:private
Renderer::postvbo	render/renderer.h	/^	GLuint frameBuffer, texColorBuffer, rboDepthStencil, postvao, postvbo;$/;"	m	class:Renderer	access:private
Renderer::projection	render/renderer.h	/^	cml::matrix44f_c projection;$/;"	m	class:Renderer	access:private
Renderer::quadprog	render/renderer.h	/^	Program quadprog, blockprog, planeprog, postprog, fontprog;$/;"	m	class:Renderer	access:private
Renderer::rboDepthStencil	render/renderer.h	/^	GLuint frameBuffer, texColorBuffer, rboDepthStencil, postvao, postvbo;$/;"	m	class:Renderer	access:private
Renderer::rng	render/renderer.h	/^	RNG rng;$/;"	m	class:Renderer	access:private
Renderer::sprite3d_fog_range	render/renderer.h	/^	float sprite3d_fog_range;$/;"	m	class:Renderer	access:private
Renderer::texColorBuffer	render/renderer.h	/^	GLuint frameBuffer, texColorBuffer, rboDepthStencil, postvao, postvbo;$/;"	m	class:Renderer	access:private
Renderer::timer	render/renderer.h	/^	uint32_t timer = 0;$/;"	m	class:Renderer	access:public
Renderer::uniform_color	render/renderer.h	/^	GLuint attribute_coord, uniform_tex, uniform_color;$/;"	m	class:Renderer	access:private
Renderer::uniform_tex	render/renderer.h	/^	GLuint attribute_coord, uniform_tex, uniform_color;$/;"	m	class:Renderer	access:private
Renderer::view	render/renderer.h	/^	cml::matrix44f_c view;$/;"	m	class:Renderer	access:private
Renderer::viewerPos	render/renderer.h	/^	cml::vector3f viewerPos;$/;"	m	class:Renderer	access:public
Renderer::wh	render/renderer.h	/^	int ww, wh;$/;"	m	class:Renderer	access:private
Renderer::ww	render/renderer.h	/^	int ww, wh;$/;"	m	class:Renderer	access:private
ReportFixture	entity/script/helpers.cpp	/^		float32 ReportFixture( b2Fixture* fixture, const b2Vec2& point, const b2Vec2& normal, float32 fraction )$/;"	f	class:MyRayCB	access:public	signature:( b2Fixture* fixture, const b2Vec2& point, const b2Vec2& normal, float32 fraction )
ReportFixture	physics/physics.cpp	/^		bool ReportFixture(b2Fixture* fixture)$/;"	f	class:MyQueryCallback	access:public	signature:(b2Fixture* fixture)
Right	map/mapdata.h	/^	int Right() { return x + floor(w\/2.f); }$/;"	f	struct:mapgen::Room	access:public	signature:()
Right	render/camera.cpp	/^cml::vector3f Camera::Right() const$/;"	f	class:Camera	signature:() const
Right	render/camera.h	/^	cml::vector3f Right() const;$/;"	p	class:Camera	access:public	signature:() const
Room	map/mapdata.h	/^	Room( int x, int y, int w, int h ) { this->x = x; this->y = y; this->w = w; this->h = h; }$/;"	f	struct:mapgen::Room	access:public	signature:( int x, int y, int w, int h )
Room	map/mapdata.h	/^struct Room$/;"	s	namespace:mapgen
RoomConnection	map/mapdata.h	/^struct RoomConnection$/;"	s	namespace:mapgen
RoomGenConfig	map/mapdata.h	/^	RoomGenConfig() :$/;"	f	struct:mapgen::RoomGenConfig	access:public	signature:()
RoomGenConfig	map/mapdata.h	/^struct RoomGenConfig$/;"	s	namespace:mapgen
Rotate2D	entity/script/helpers.cpp	/^cml::vector2f Rotate2D( cml::vector2f v, float angle )$/;"	f	signature:( cml::vector2f v, float angle )
Rotate2D	entity/script/helpers.h	/^cml::vector2f Rotate2D( cml::vector2f v, float angle );$/;"	p	signature:( cml::vector2f v, float angle )
Rows	core/matrix2d.h	/^	int Rows() { return rows; }$/;"	f	class:Matrix2D	access:public	signature:()
S3D_ARMA	render/assets.h	/^const int S3D_ARMA = 		3;$/;"	v
S3D_BICHO	render/assets.h	/^const int S3D_BICHO = 		0;$/;"	v
S3D_FIREBALL	render/assets.h	/^const int S3D_FIREBALL = 5;$/;"	v
S3D_GREENBULLET	render/assets.h	/^const int S3D_GREENBULLET = 	1;$/;"	v
S3D_MAX	render/assets.h	/^const int S3D_MAX = 6;$/;"	v
S3D_PICKSFW	render/assets.h	/^const int S3D_PICKSFW = 4;$/;"	v
S3D_REDBULLET	render/assets.h	/^const int S3D_REDBULLET = 	2;$/;"	v
SCAN_header	render/stb_image.h	/^   SCAN_header$/;"	e	enum:__anon13
SCAN_load	render/stb_image.h	/^   SCAN_load=0,$/;"	e	enum:__anon13
SCAN_type	render/stb_image.h	/^   SCAN_type,$/;"	e	enum:__anon13
SDL	render/sdlcontext.cpp	/^namespace SDL {$/;"	n	namespace:Render	file:
SDL	render/sdlcontext.h	/^namespace SDL {$/;"	n	namespace:Render
SDLGLApp	app/sdlglapp.cpp	/^SDLGLApp::SDLGLApp ( int width, int height, uint32_t sdlwinflags ) {$/;"	f	class:SDLGLApp	signature:( int width, int height, uint32_t sdlwinflags )
SDLGLApp	app/sdlglapp.h	/^	SDLGLApp ( int width, int height, uint32_t sdlwinflags=(SDL_WINDOW_SHOWN|SDL_WINDOW_OPENGL) );$/;"	p	class:SDLGLApp	access:public	signature:( int width, int height, uint32_t sdlwinflags=(SDL_WINDOW_SHOWN|SDL_WINDOW_OPENGL) )
SDLGLApp	app/sdlglapp.h	/^class SDLGLApp {$/;"	c
SDLGLApp::Cleanup	app/sdlglapp.cpp	/^void SDLGLApp::Cleanup()$/;"	f	class:SDLGLApp	signature:()
SDLGLApp::Cleanup	app/sdlglapp.h	/^	virtual void Cleanup();$/;"	p	class:SDLGLApp	access:protected	signature:()
SDLGLApp::Exec	app/sdlglapp.cpp	/^int SDLGLApp::Exec(int argc, char** argv)$/;"	f	class:SDLGLApp	signature:(int argc, char** argv)
SDLGLApp::Exec	app/sdlglapp.h	/^	int Exec(int argc, char** argv);$/;"	p	class:SDLGLApp	access:public	signature:(int argc, char** argv)
SDLGLApp::HandleEvent	app/sdlglapp.cpp	/^void SDLGLApp::HandleEvent(SDL_Event& event)$/;"	f	class:SDLGLApp	signature:(SDL_Event& event)
SDLGLApp::HandleEvent	app/sdlglapp.h	/^	virtual void HandleEvent(SDL_Event& event);$/;"	p	class:SDLGLApp	access:protected	signature:(SDL_Event& event)
SDLGLApp::Render	app/sdlglapp.cpp	/^void SDLGLApp::Render()$/;"	f	class:SDLGLApp	signature:()
SDLGLApp::Render	app/sdlglapp.h	/^	virtual void Render();$/;"	p	class:SDLGLApp	access:protected	signature:()
SDLGLApp::SDLGLApp	app/sdlglapp.cpp	/^SDLGLApp::SDLGLApp ( int width, int height, uint32_t sdlwinflags ) {$/;"	f	class:SDLGLApp	signature:( int width, int height, uint32_t sdlwinflags )
SDLGLApp::SDLGLApp	app/sdlglapp.h	/^	SDLGLApp ( int width, int height, uint32_t sdlwinflags=(SDL_WINDOW_SHOWN|SDL_WINDOW_OPENGL) );$/;"	p	class:SDLGLApp	access:public	signature:( int width, int height, uint32_t sdlwinflags=(SDL_WINDOW_SHOWN|SDL_WINDOW_OPENGL) )
SDLGLApp::Setup	app/sdlglapp.cpp	/^void SDLGLApp::Setup(int argc, char** argv)$/;"	f	class:SDLGLApp	signature:(int argc, char** argv)
SDLGLApp::Setup	app/sdlglapp.h	/^	virtual void Setup(int argc, char** argv);$/;"	p	class:SDLGLApp	access:protected	signature:(int argc, char** argv)
SDLGLApp::Stop	app/sdlglapp.h	/^	void Stop()$/;"	f	class:SDLGLApp	access:protected	signature:()
SDLGLApp::Update	app/sdlglapp.cpp	/^void SDLGLApp::Update(uint32_t delta)$/;"	f	class:SDLGLApp	signature:(uint32_t delta)
SDLGLApp::Update	app/sdlglapp.h	/^	virtual void Update(uint32_t delta);$/;"	p	class:SDLGLApp	access:protected	signature:(uint32_t delta)
SDLGLApp::gl	app/sdlglapp.h	/^	Render::SDL::Context* gl;$/;"	m	class:SDLGLApp	access:protected
SDLGLApp::mainGLContext	app/sdlglapp.h	/^	SDL_GLContext mainGLContext; \/\/ en sdlcontext?$/;"	m	class:SDLGLApp	access:protected
SDLGLApp::mainWindow	app/sdlglapp.h	/^	SDL_Window* mainWindow;$/;"	m	class:SDLGLApp	access:protected
SDLGLApp::running	app/sdlglapp.h	/^	bool running;$/;"	m	class:SDLGLApp	access:private
SDLGLApp::sdlwinflags	app/sdlglapp.h	/^	uint32_t sdlwinflags;$/;"	m	class:SDLGLApp	access:protected
SDLGLApp::winHeight	app/sdlglapp.h	/^	int winWidth, winHeight;$/;"	m	class:SDLGLApp	access:protected
SDLGLApp::winWidth	app/sdlglapp.h	/^	int winWidth, winHeight;$/;"	m	class:SDLGLApp	access:protected
SDLGLApp::~SDLGLApp	app/sdlglapp.cpp	/^SDLGLApp::~SDLGLApp()$/;"	f	class:SDLGLApp	signature:()
SDLGLApp::~SDLGLApp	app/sdlglapp.h	/^	virtual ~SDLGLApp ();$/;"	p	class:SDLGLApp	access:public	signature:()
SEARCH_STATE_FAILED	ailib/stlastar.h	/^		SEARCH_STATE_FAILED,$/;"	e	enum:AStarSearch::__anon9
SEARCH_STATE_INVALID	ailib/stlastar.h	/^		SEARCH_STATE_INVALID$/;"	e	enum:AStarSearch::__anon9
SEARCH_STATE_NOT_INITIALISED	ailib/stlastar.h	/^		SEARCH_STATE_NOT_INITIALISED,$/;"	e	enum:AStarSearch::__anon9
SEARCH_STATE_OUT_OF_MEMORY	ailib/stlastar.h	/^		SEARCH_STATE_OUT_OF_MEMORY,$/;"	e	enum:AStarSearch::__anon9
SEARCH_STATE_SEARCHING	ailib/stlastar.h	/^		SEARCH_STATE_SEARCHING,$/;"	e	enum:AStarSearch::__anon9
SEARCH_STATE_SUCCEEDED	ailib/stlastar.h	/^		SEARCH_STATE_SUCCEEDED,$/;"	e	enum:AStarSearch::__anon9
SFW	entity/script/inventory.h	/^		SFW$/;"	e	enum:__anon6::Type
SHOOT_DISTANCE	constants.h	/^static const float SHOOT_DISTANCE = 15.f;$/;"	v
SIGHT_ANGLE	constants.h	/^static const float SIGHT_ANGLE = 90.f;$/;"	v
SIGHT_DISTANCE	constants.h	/^static const float SIGHT_DISTANCE = 2000.f;$/;"	v
SPR	entity/player.h	/^	float SPR;$/;"	m	class:Player	access:public
SPR_per_shot	entity/script/playerweapon.h	/^	float SPR_per_shot;$/;"	m	class:PlayerWeapon	access:public
STBIDEF	render/stb_image.h	218;"	d
STBIDEF	render/stb_image.h	220;"	d
STBI_ASSERT	render/stb_image.h	358;"	d
STBI_HAS_LROTL	render/stb_image.h	397;"	d
STBI_INCLUDE_STB_IMAGE_H	render/stb_image.h	79;"	d
STBI_NOTUSED	render/stb_image.h	391;"	d
STBI_NOTUSED	render/stb_image.h	393;"	d
STBI_VERSION	render/stb_image.h	199;"	d
STBI__BYTECAST	render/stb_image.h	2479;"	d
STBI__F_avg	render/stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon22
STBI__F_avg_first	render/stb_image.h	/^   STBI__F_avg_first, STBI__F_paeth_first$/;"	e	enum:__anon22
STBI__F_none	render/stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon22
STBI__F_paeth	render/stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon22
STBI__F_paeth_first	render/stb_image.h	/^   STBI__F_avg_first, STBI__F_paeth_first$/;"	e	enum:__anon22
STBI__F_sub	render/stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon22
STBI__F_up	render/stb_image.h	/^   STBI__F_none=0, STBI__F_sub=1, STBI__F_up=2, STBI__F_avg=3, STBI__F_paeth=4,$/;"	e	enum:__anon22
STBI__HDR_BUFLEN	render/stb_image.h	4190;"	d
STBI__IDCT_1D	render/stb_image.h	1246;"	d
STBI__MARKER_none	render/stb_image.h	1360;"	d
STBI__RESTART	render/stb_image.h	1377;"	d
STBI__ZFAST_BITS	render/stb_image.h	1992;"	d
STBI__ZFAST_MASK	render/stb_image.h	1993;"	d
STBI_default	render/stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon10
STBI_grey	render/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon10
STBI_grey_alpha	render/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon10
STBI_rgb	render/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon10
STBI_rgb_alpha	render/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon10
STB_IMAGE_IMPLEMENTATION	render/Bitmap.cpp	22;"	d	file:
STLASTAR_H	ailib/stlastar.h	27;"	d
SaveToFile	map/map.h	/^	void SaveToFile( const char* path )$/;"	f	class:Map	access:public	signature:( const char* path )
SearchStep	ailib/stlastar.h	/^	unsigned int SearchStep()$/;"	f	class:AStarSearch	access:public	signature:()
Set	core/matrix2d.h	/^	void Set( T val )$/;"	f	class:Matrix2D	access:public	signature:( T val )
Set	core/matrix2d.h	/^	void Set( int row, int col, T val )$/;"	f	class:Matrix2D	access:public	signature:( int row, int col, T val )
Set	map/map.h	/^		void Set( int x, int y, int block_type )$/;"	f	struct:Map::BlockData	access:public	signature:( int x, int y, int block_type )
Set	map/map.h	/^	void Set( int x, int y, int block )$/;"	f	class:Map	access:public	signature:( int x, int y, int block )
SetAngle	render/sprite3d.h	/^	void SetAngle( float angle )$/;"	f	class:Sprite3D	access:public	signature:( float angle )
SetAngleY	entity/entity.h	/^	void SetAngleY( float angle )$/;"	f	class:Entity	access:public	signature:( float angle )
SetAspect	render/camera.cpp	/^void Camera::SetAspect( float a )$/;"	f	class:Camera	signature:( float a )
SetAspect	render/camera.h	/^	void SetAspect( float a );$/;"	p	class:Camera	access:public	signature:( float a )
SetController	entity/entity.cpp	/^void Entity::SetController( EntityController* controller )$/;"	f	class:Entity	signature:( EntityController* controller )
SetController	entity/entity.h	/^	void SetController( EntityController* controller );$/;"	p	class:Entity	access:public	signature:( EntityController* controller )
SetCurrentFrame	render/sprite3d.h	/^	void SetCurrentFrame( float x, float y )$/;"	f	class:Sprite3D	access:public	signature:( float x, float y )
SetHorizontalAngle	render/camera.h	/^	void SetHorizontalAngle( float angle )$/;"	f	class:Camera	access:public	signature:( float angle )
SetLogicAngleY	entity/entity.h	/^	void SetLogicAngleY( float angle )$/;"	f	class:Entity	access:public	signature:( float angle )
SetMap	ailib/mapsearchnode.h	/^	static SetMap( Map* pmap )$/;"	f	class:MapSearchNode	access:public	signature:( Map* pmap )
SetOrigin	entity/script/helpers.cpp	/^		void SetOrigin( )$/;"	f	class:MyRayCB	access:public	signature:( )
SetPhysicBody	entity/entity.h	/^	void SetPhysicBody( b2Body* body )$/;"	f	class:Entity	access:public	signature:( b2Body* body )
SetPosition	render/camera.cpp	/^void Camera::SetPosition( const cml::vector3f& pos )$/;"	f	class:Camera	signature:( const cml::vector3f& pos )
SetPosition	render/camera.h	/^	void SetPosition( const cml::vector3f& pos );$/;"	p	class:Camera	access:public	signature:( const cml::vector3f& pos )
SetQuadAngleY	entity/entity.h	/^	void SetQuadAngleY( float angle )$/;"	f	class:Entity	access:public	signature:( float angle )
SetShaders	render/program.h	/^	void SetShaders( Shader vert, Shader frag )$/;"	f	class:Program	access:public	signature:( Shader vert, Shader frag )
SetSize	render/font.h	/^	void SetSize( int size )$/;"	f	class:Font	access:private	signature:( int size )
SetSprite	entity/entity.h	/^	void SetSprite( Sprite3D* sprite )$/;"	f	class:Entity	access:public	signature:( Sprite3D* sprite )
SetStartAndGoalStates	ailib/stlastar.h	/^	void SetStartAndGoalStates( UserState &Start, UserState &Goal )$/;"	f	class:AStarSearch	access:public	signature:( UserState &Start, UserState &Goal )
SetType	entity/entity.h	/^	void SetType( Entity::Type t )$/;"	f	class:Entity	access:public	signature:( Entity::Type t )
SetVP	render/renderer.h	/^	void SetVP( const cml::matrix44f_c& view, const cml::matrix44f_c& projection )$/;"	f	class:Renderer	access:public	signature:( const cml::matrix44f_c& view, const cml::matrix44f_c& projection )
SetViewerPos	render/renderer.h	/^	void SetViewerPos( cml::vector3f& vp )$/;"	f	class:Renderer	access:public	signature:( cml::vector3f& vp )
Setup	app/app.cpp	/^void App::Setup(int argc, char** argv)$/;"	f	class:App	signature:(int argc, char** argv)
Setup	app/app.h	/^	void Setup(int argc, char** argv);$/;"	p	class:App	access:private	signature:(int argc, char** argv)
Setup	app/sdlglapp.cpp	/^void SDLGLApp::Setup(int argc, char** argv)$/;"	f	class:SDLGLApp	signature:(int argc, char** argv)
Setup	app/sdlglapp.h	/^	virtual void Setup(int argc, char** argv);$/;"	p	class:SDLGLApp	access:protected	signature:(int argc, char** argv)
SetupPlayer	app/app.cpp	/^void App::SetupPlayer()$/;"	f	class:App	signature:()
SetupPlayer	app/app.h	/^	void SetupPlayer();$/;"	p	class:App	access:private	signature:()
Shader	render/shader.cpp	/^Shader::Shader()$/;"	f	class:Shader	signature:()
Shader	render/shader.h	/^	Shader(  );$/;"	p	class:Shader	access:public	signature:( )
Shader	render/shader.h	/^class Shader$/;"	c
Shader::FRAGMENT	render/shader.h	/^	const static int FRAGMENT = 1;$/;"	m	class:Shader	access:public
Shader::GEOMETRY	render/shader.h	/^	const static int GEOMETRY = 2;$/;"	m	class:Shader	access:public
Shader::LoadFromFile	render/shader.cpp	/^bool Shader::LoadFromFile( Render::Context* gl, const char* path, int t )$/;"	f	class:Shader	signature:( Render::Context* gl, const char* path, int t )
Shader::LoadFromFile	render/shader.h	/^	bool LoadFromFile( Render::Context* gl, const char* path, int t );$/;"	p	class:Shader	access:public	signature:( Render::Context* gl, const char* path, int t )
Shader::Object	render/shader.cpp	/^GLuint Shader::Object()$/;"	f	class:Shader	signature:()
Shader::Object	render/shader.h	/^	GLuint Object();$/;"	p	class:Shader	access:public	signature:()
Shader::Shader	render/shader.cpp	/^Shader::Shader()$/;"	f	class:Shader	signature:()
Shader::Shader	render/shader.h	/^	Shader(  );$/;"	p	class:Shader	access:public	signature:( )
Shader::VERTEX	render/shader.h	/^	const static int VERTEX = 0;$/;"	m	class:Shader	access:public
Shader::dict	render/shader.cpp	/^const GLenum Shader::dict[] = {$/;"	m	class:Shader	file:
Shader::dict	render/shader.h	/^	static const GLenum dict[];$/;"	m	class:Shader	access:private
Shader::handle	render/shader.h	/^	GLuint handle;$/;"	m	class:Shader	access:private
ShaderSource	render/context.h	/^  PFNGLSHADERSOURCEPROC ShaderSource;$/;"	m	class:Render::Context	access:public
Shoot	entity/script/helpers.cpp	/^void Shoot( Actor* actor, EntityFactory* ef )$/;"	f	signature:( Actor* actor, EntityFactory* ef )
Shoot	entity/script/helpers.h	/^void Shoot( Actor* actor, EntityFactory* ef );$/;"	p	signature:( Actor* actor, EntityFactory* ef )
Shoot	entity/script/playerweapon.h	/^	virtual void Shoot() {}$/;"	f	class:PlayerWeapon	access:public	signature:()
Size	core/dynamicarray.h	/^	size_t Size()$/;"	f	class:DynamicArray	access:public	signature:()
SmoothNoise	texgen/canvas.h	/^	double SmoothNoise( Matrix2D<float>& noise, double x, double y )$/;"	f	class:Canvas	access:public	signature:( Matrix2D<float>& noise, double x, double y )
SpawnBullet	entity/entityfactory.cpp	/^void EntityFactory::SpawnBullet( const cml::vector2f& pos, const cml::vector2f& dir, CollisionLayer col, uint16_t mask, Sprite3D* sprite, float time )$/;"	f	class:EntityFactory	signature:( const cml::vector2f& pos, const cml::vector2f& dir, CollisionLayer col, uint16_t mask, Sprite3D* sprite, float time )
SpawnBullet	entity/entityfactory.h	/^	void SpawnBullet( const cml::vector2f& pos, const cml::vector2f& dir, CollisionLayer col, uint16_t mask, Sprite3D* sprite, float time );$/;"	p	class:EntityFactory	access:public	signature:( const cml::vector2f& pos, const cml::vector2f& dir, CollisionLayer col, uint16_t mask, Sprite3D* sprite, float time )
SpawnEnemy	entity/entityfactory.cpp	/^Actor* EntityFactory::SpawnEnemy( float x, float y )$/;"	f	class:EntityFactory	signature:( float x, float y )
SpawnEnemy	entity/entityfactory.h	/^	Actor* SpawnEnemy( float x, float y );$/;"	p	class:EntityFactory	access:public	signature:( float x, float y )
SpawnEnemyBullet	entity/entityfactory.cpp	/^void EntityFactory::SpawnEnemyBullet( const cml::vector2f& pos, const cml::vector2f& dir, float time )$/;"	f	class:EntityFactory	signature:( const cml::vector2f& pos, const cml::vector2f& dir, float time )
SpawnEnemyBullet	entity/entityfactory.h	/^	void SpawnEnemyBullet( const cml::vector2f& pos, const cml::vector2f& dir, float time );$/;"	p	class:EntityFactory	access:public	signature:( const cml::vector2f& pos, const cml::vector2f& dir, float time )
SpawnPickup	entity/entityfactory.cpp	/^void EntityFactory::SpawnPickup( const cml::vector2f& pos )$/;"	f	class:EntityFactory	signature:( const cml::vector2f& pos )
SpawnPickup	entity/entityfactory.h	/^	void SpawnPickup( const cml::vector2f& pos );$/;"	p	class:EntityFactory	access:public	signature:( const cml::vector2f& pos )
SpawnPlayer	entity/entityfactory.cpp	/^Player* EntityFactory::SpawnPlayer( float x, float y ){$/;"	f	class:EntityFactory	signature:( float x, float y )
SpawnPlayer	entity/entityfactory.h	/^	Player* SpawnPlayer( float x, float y );$/;"	p	class:EntityFactory	access:public	signature:( float x, float y )
SpawnPlayerBullet	entity/entityfactory.cpp	/^void EntityFactory::SpawnPlayerBullet( cml::vector2f pos, cml::vector2f dir, float time )$/;"	f	class:EntityFactory	signature:( cml::vector2f pos, cml::vector2f dir, float time )
SpawnPlayerBullet	entity/entityfactory.h	/^	void SpawnPlayerBullet( cml::vector2f pos, cml::vector2f dir, float time );$/;"	p	class:EntityFactory	access:public	signature:( cml::vector2f pos, cml::vector2f dir, float time )
SpawnPlayerWeapon	entity/entityfactory.cpp	/^Entity* EntityFactory::SpawnPlayerWeapon(float x, float y)$/;"	f	class:EntityFactory	signature:(float x, float y)
SpawnPlayerWeapon	entity/entityfactory.h	/^	Entity* SpawnPlayerWeapon( float x, float y );$/;"	p	class:EntityFactory	access:public	signature:( float x, float y )
Sprite	render/assets.h	/^	Sprite3D* Sprite( int spriteid )$/;"	f	class:Assets	access:public	signature:( int spriteid )
Sprite3D	render/sprite3d.h	/^class Sprite3D$/;"	c
Sprite3D::CurrentFrame	render/sprite3d.h	/^	const cml::vector2f& CurrentFrame()$/;"	f	class:Sprite3D	access:public	signature:()
Sprite3D::Dispose	render/sprite3d.h	/^	void Dispose( Render::Context* gl )$/;"	f	class:Sprite3D	access:public	signature:( Render::Context* gl )
Sprite3D::FrameSize	render/sprite3d.h	/^	const cml::vector2f& FrameSize()$/;"	f	class:Sprite3D	access:public	signature:()
Sprite3D::GetQuad	render/sprite3d.h	/^	Quad& GetQuad()$/;"	f	class:Sprite3D	access:public	signature:()
Sprite3D::GetTex	render/sprite3d.h	/^	tdogl::Texture* GetTex()$/;"	f	class:Sprite3D	access:public	signature:()
Sprite3D::Prepare	render/sprite3d.h	/^	void Prepare( Render::Context* gl, tdogl::Texture* tex, int frames_x = 1, int frames_y = 1 )$/;"	f	class:Sprite3D	access:public	signature:( Render::Context* gl, tdogl::Texture* tex, int frames_x = 1, int frames_y = 1 )
Sprite3D::SetAngle	render/sprite3d.h	/^	void SetAngle( float angle )$/;"	f	class:Sprite3D	access:public	signature:( float angle )
Sprite3D::SetCurrentFrame	render/sprite3d.h	/^	void SetCurrentFrame( float x, float y )$/;"	f	class:Sprite3D	access:public	signature:( float x, float y )
Sprite3D::angle	render/sprite3d.h	/^	float angle;$/;"	m	class:Sprite3D	access:private
Sprite3D::current_frame	render/sprite3d.h	/^	cml::vector2f \/* i? *\/ current_frame, num_frames;$/;"	m	class:Sprite3D	access:private
Sprite3D::num_frames	render/sprite3d.h	/^	cml::vector2f \/* i? *\/ current_frame, num_frames;$/;"	m	class:Sprite3D	access:private
Sprite3D::quad	render/sprite3d.h	/^	Quad quad;$/;"	m	class:Sprite3D	access:private
Sprite3D::size	render/sprite3d.h	/^	cml::vector2f size;$/;"	m	class:Sprite3D	access:private
Sprite3D::tex	render/sprite3d.h	/^	tdogl::Texture* tex;$/;"	m	class:Sprite3D	access:private
Step	entity/controller/bulletcontroller.h	/^	void Step( Entity* e, uint32_t delta )$/;"	f	class:BulletController	access:public	signature:( Entity* e, uint32_t delta )
Step	entity/controller/debugtransformcontroller.h	/^	void Step( Entity* e, uint32_t delta )$/;"	f	class:DebugTransformController	access:public	signature:( Entity* e, uint32_t delta )
Step	entity/controller/entitycontroller.h	/^	virtual void Step( Entity* e, uint32_t delta ) {}$/;"	f	class:EntityController	access:public	signature:( Entity* e, uint32_t delta )
Step	entity/controller/mobaicontroller.h	/^	void Step( Entity* e, uint32_t delta )$/;"	f	class:MobAIController	access:public	signature:( Entity* e, uint32_t delta )
Step	entity/controller/nullcontroller.h	/^	void Step( Entity* e, uint32_t delta )$/;"	f	class:NullController	access:public	signature:( Entity* e, uint32_t delta )
Step	entity/controller/pickupcontroller.h	/^	void Step( Entity* e, uint32_t delta )$/;"	f	class:PickupController	access:public	signature:( Entity* e, uint32_t delta )
Step	entity/controller/playerhumancontroller.cpp	/^void PlayerHumanController::Step( Entity* e, uint32_t delta )$/;"	f	class:PlayerHumanController	signature:( Entity* e, uint32_t delta )
Step	entity/controller/playerhumancontroller.h	/^	void Step( Entity* e, uint32_t delta );$/;"	p	class:PlayerHumanController	access:public	signature:( Entity* e, uint32_t delta )
Step	entity/entity.cpp	/^void Entity::Step( uint32_t delta )$/;"	f	class:Entity	signature:( uint32_t delta )
Step	entity/entity.h	/^	void Step( uint32_t delta );$/;"	p	class:Entity	access:public	signature:( uint32_t delta )
Step	entity/script/effectsystem.h	/^	void Step( Entity* ent, uint32_t delta )$/;"	f	class:FalloutSystem	access:public	signature:( Entity* ent, uint32_t delta )
Step	physics/physics.cpp	/^void Physics::Step()$/;"	f	class:Physics	signature:()
Step	physics/physics.h	/^	void Step();$/;"	p	class:Physics	access:public	signature:()
Stop	app/sdlglapp.h	/^	void Stop()$/;"	f	class:SDLGLApp	access:protected	signature:()
Stress	physics/physics.cpp	/^void Physics::Stress(Player* p)$/;"	f	class:Physics	signature:(Player* p)
Stress	physics/physics.h	/^	void Stress(Player*p);$/;"	p	class:Physics	access:public	signature:(Player*p)
TEX_ARMA	render/assets.h	/^const int TEX_ARMA = 0;$/;"	v
TEX_FIREBALL	render/assets.h	/^const int TEX_FIREBALL = 10;$/;"	v
TEX_GREENBULLET	render/assets.h	/^const int TEX_GREENBULLET = 7;$/;"	v
TEX_MAX	render/assets.h	/^const int TEX_MAX = 11;$/;"	v
TEX_PICKSFW	render/assets.h	/^const int TEX_PICKSFW = 9;$/;"	v
TEX_REDBULLET	render/assets.h	/^const int TEX_REDBULLET = 8;$/;"	v
TEX_ROBOT	render/assets.h	/^const int TEX_ROBOT = 5;$/;"	v
TEX_SUELO	render/assets.h	/^const int TEX_SUELO = 4;$/;"	v
TEX_TECHO	render/assets.h	/^const int TEX_TECHO = 6;$/;"	v
TEX_TEX1	render/assets.h	/^const int TEX_TEX1 = 1;$/;"	v
TEX_TEX2	render/assets.h	/^const int TEX_TEX2 = 2;$/;"	v
TEX_TEX3	render/assets.h	/^const int TEX_TEX3 = 3;$/;"	v
TexImage2D	render/context.h	/^  PFNGLTEXIMAGE2DPROC TexImage2D;$/;"	m	class:Render::Context	access:public
TexParameteri	render/context.h	/^  PFNGLTEXPARAMETERIPROC TexParameteri;$/;"	m	class:Render::Context	access:public
TexSubImage2D	render/context.h	/^  PFNGLTEXSUBIMAGE2DPROC TexSubImage2D;$/;"	m	class:Render::Context	access:public
Texture	render/Texture.cpp	/^Texture::Texture(Context* gl, const Bitmap& bitmap, GLint minMagFiler, GLint wrapMode) :$/;"	f	class:Texture	signature:(Context* gl, const Bitmap& bitmap, GLint minMagFiler, GLint wrapMode)
Texture	render/Texture.h	/^        Texture(Context* gl, const Bitmap& bitmap,$/;"	p	class:tdogl::Texture	access:public	signature:(Context* gl, const Bitmap& bitmap, GLint minMagFiler = GL_NEAREST, GLint wrapMode = GL_CLAMP_TO_EDGE)
Texture	render/Texture.h	/^        Texture(const Texture&);$/;"	p	class:tdogl::Texture	access:private	signature:(const Texture&)
Texture	render/Texture.h	/^    class Texture {$/;"	c	namespace:tdogl
Texture	render/assets.h	/^	tdogl::Texture* Texture( int textureid )$/;"	f	class:Assets	access:public	signature:( int textureid )
Texture	render/font.h	/^	GLuint Texture() { return tex; }$/;"	f	class:Font	access:public	signature:()
Texture::Texture	render/Texture.cpp	/^Texture::Texture(Context* gl, const Bitmap& bitmap, GLint minMagFiler, GLint wrapMode) :$/;"	f	class:Texture	signature:(Context* gl, const Bitmap& bitmap, GLint minMagFiler, GLint wrapMode)
Texture::object	render/Texture.cpp	/^GLuint Texture::object() const$/;"	f	class:Texture	signature:() const
Texture::originalHeight	render/Texture.cpp	/^GLfloat Texture::originalHeight() const$/;"	f	class:Texture	signature:() const
Texture::originalWidth	render/Texture.cpp	/^GLfloat Texture::originalWidth() const$/;"	f	class:Texture	signature:() const
Texture::~Texture	render/Texture.cpp	/^Texture::~Texture()$/;"	f	class:Texture	signature:()
TextureFormatForBitmapFormat	render/Texture.cpp	/^static GLenum TextureFormatForBitmapFormat(Bitmap::Format format)$/;"	f	file:	signature:(Bitmap::Format format)
Tick	core/fpscounter.h	/^	void Tick( T time )$/;"	f	class:FPSCounter	access:public	signature:( T time )
ToBitmap	texgen/canvas.h	/^	void ToBitmap( tdogl::Bitmap& bmp )$/;"	f	class:Canvas	access:public	signature:( tdogl::Bitmap& bmp )
Top	map/mapdata.h	/^	int Top() { return y-floor(h\/2.f); }$/;"	f	struct:mapgen::Room	access:public	signature:()
Transform	core/transform.cpp	/^Transform::Transform()$/;"	f	class:Transform	signature:()
Transform	core/transform.h	/^	Transform();$/;"	p	class:Transform	access:public	signature:()
Transform	core/transform.h	/^class Transform$/;"	c
Transform::AddChild	core/transform.cpp	/^	for( int i = 0; i < this->children.Size(); i++ ) {$/;"	f	class:Transform	signature:(Transform* child)
Transform::AddChild	core/transform.h	/^	void AddChild( Transform* child );$/;"	p	class:Transform	access:public	signature:( Transform* child )
Transform::Model	core/transform.cpp	/^	for( int i = 0; i < this->children.Size(); i++ ) {$/;"	f	class:Transform	signature:()
Transform::Model	core/transform.h	/^	cml::matrix44f_c Model();$/;"	p	class:Transform	access:public	signature:()
Transform::Transform	core/transform.cpp	/^Transform::Transform()$/;"	f	class:Transform	signature:()
Transform::Transform	core/transform.h	/^	Transform();$/;"	p	class:Transform	access:public	signature:()
Transform::Update	core/transform.cpp	/^void Transform::Update(const Transform& parent)$/;"	f	class:Transform	signature:(const Transform& parent)
Transform::Update	core/transform.h	/^	void Update( const Transform& parent );$/;"	p	class:Transform	access:public	signature:( const Transform& parent )
Transform::Update2	core/transform.cpp	/^void Transform::Update2(const Transform& parent)$/;"	f	class:Transform	signature:(const Transform& parent)
Transform::Update2	core/transform.h	/^	void Update2( const Transform& parent );$/;"	p	class:Transform	access:public	signature:( const Transform& parent )
Transform::children	core/transform.h	/^	DynamicArray<Transform*> children;$/;"	m	class:Transform	access:public
Transform::entity	core/transform.h	/^	Entity* entity;$/;"	m	class:Transform	access:public
Transform::local	core/transform.h	/^	cml::matrix44f_c local;$/;"	m	class:Transform	access:public
Transform::local_position	core/transform.h	/^	cml::vector3f local_position;$/;"	m	class:Transform	access:public
Transform::local_rotation	core/transform.h	/^	cml::vector3f local_rotation;$/;"	m	class:Transform	access:public
Transform::logic_angle	core/transform.h	/^	float logic_angle = 0.f;$/;"	m	class:Transform	access:public
Transform::position	core/transform.h	/^	cml::vector3f position;$/;"	m	class:Transform	access:public
Transform::rotation	core/transform.h	/^	cml::vector3f rotation;$/;"	m	class:Transform	access:public
Transform::world	core/transform.h	/^	cml::matrix44f_c world;$/;"	m	class:Transform	access:public
Turbulence	texgen/canvas.h	/^	double Turbulence( Matrix2D<float>& noise, double x, double y, double size, bool bifilter = true, double base = 128.0 )$/;"	f	class:Canvas	access:public	signature:( Matrix2D<float>& noise, double x, double y, double size, bool bifilter = true, double base = 128.0 )
Type	entity/entity.h	/^	enum Type$/;"	g	class:Entity	access:public
Type	entity/pickup.h	/^	enum Type {$/;"	g	class:Pickup	access:public
Type	entity/script/inventory.h	/^	enum Type$/;"	g	struct:__anon6	access:public
Type	map/mapdata.h	/^	enum Type {$/;"	g	struct:mapgen::RoomConnection	access:public
TypeString	entity/entity.h	/^	const char* TypeString()$/;"	f	class:Entity	access:public	signature:()
USE_FSA_MEMORY	ailib/stlastar.h	47;"	d
Uniform1f	render/context.h	/^  PFNGLUNIFORM1FPROC Uniform1f;$/;"	m	class:Render::Context	access:public
Uniform1fv	render/context.h	/^  PFNGLUNIFORM1FVPROC Uniform1fv;$/;"	m	class:Render::Context	access:public
Uniform1i	render/context.h	/^  PFNGLUNIFORM1IPROC Uniform1i;$/;"	m	class:Render::Context	access:public
Uniform2f	render/context.h	/^  PFNGLUNIFORM2FPROC Uniform2f;$/;"	m	class:Render::Context	access:public
Uniform3f	render/context.h	/^  PFNGLUNIFORM3FPROC Uniform3f;$/;"	m	class:Render::Context	access:public
Uniform4f	render/context.h	/^  PFNGLUNIFORM4FPROC Uniform4f;$/;"	m	class:Render::Context	access:public
UniformMatrix4fv	render/context.h	/^  PFNGLUNIFORMMATRIX4FVPROC UniformMatrix4fv;$/;"	m	class:Render::Context	access:public
Up	render/camera.cpp	/^cml::vector3f Camera::Up() const$/;"	f	class:Camera	signature:() const
Up	render/camera.h	/^	cml::vector3f Up() const;$/;"	p	class:Camera	access:public	signature:() const
Update	app/app.cpp	/^void App::Update(uint32_t delta)$/;"	f	class:App	signature:(uint32_t delta)
Update	app/app.h	/^	void Update(uint32_t delta);$/;"	p	class:App	access:private	signature:(uint32_t delta)
Update	app/sdlglapp.cpp	/^void SDLGLApp::Update(uint32_t delta)$/;"	f	class:SDLGLApp	signature:(uint32_t delta)
Update	app/sdlglapp.h	/^	virtual void Update(uint32_t delta);$/;"	p	class:SDLGLApp	access:protected	signature:(uint32_t delta)
Update	core/transform.cpp	/^void Transform::Update(const Transform& parent)$/;"	f	class:Transform	signature:(const Transform& parent)
Update	core/transform.h	/^	void Update( const Transform& parent );$/;"	p	class:Transform	access:public	signature:( const Transform& parent )
Update	render/animation.h	/^	void Update( Data& d )$/;"	f	class:Animation	access:public	signature:( Data& d )
Update2	core/transform.cpp	/^void Transform::Update2(const Transform& parent)$/;"	f	class:Transform	signature:(const Transform& parent)
Update2	core/transform.h	/^	void Update2( const Transform& parent );$/;"	p	class:Transform	access:public	signature:( const Transform& parent )
UpdateActors	app/app.cpp	/^void App::UpdateActors( uint32_t delta )$/;"	f	class:App	signature:( uint32_t delta )
UpdateActors	app/app.h	/^	void UpdateActors( uint32_t delta );$/;"	p	class:App	access:private	signature:( uint32_t delta )
UpdateGPUQuads	render/font.h	/^	int UpdateGPUQuads( Render::Context* gl, const char* text, float x, float y, float sx, float sy )$/;"	f	class:Font	access:public	signature:( Render::Context* gl, const char* text, float x, float y, float sx, float sy )
UpdateRest	entity/entityfactory.cpp	/^void EntityFactory::UpdateRest(uint32_t delta)$/;"	f	class:EntityFactory	signature:(uint32_t delta)
UpdateRest	entity/entityfactory.h	/^	void UpdateRest( uint32_t delta );$/;"	p	class:EntityFactory	access:public	signature:( uint32_t delta )
UpdateUVs	render/quad.h	/^	void UpdateUVs( float xstep = 1.f, float ystep = 1.f)$/;"	f	class:Quad	access:public	signature:( float xstep = 1.f, float ystep = 1.f)
UpdateVertices	render/plane.h	/^	void UpdateVertices( int width, int height, int planewidth, int planeheight )$/;"	f	class:Plane	access:public	signature:( int width, int height, int planewidth, int planeheight )
UpdateVertices	render/quad.h	/^	void UpdateVertices( float width, float height )$/;"	f	class:Quad	access:public	signature:( float width, float height )
UploadBufferData	render/mesh.h	/^	void UploadBufferData( Render::Context* gl, GLuint vbo, int items_per_attr, GLfloat* buffer )$/;"	f	class:Mesh	access:public	signature:( Render::Context* gl, GLuint vbo, int items_per_attr, GLfloat* buffer )
UseCreatedFBO	render/renderer.h	/^	void UseCreatedFBO() { gl->BindFramebuffer( GL_FRAMEBUFFER, frameBuffer ); }$/;"	f	class:Renderer	access:public	signature:()
UseDefaultFBO	render/renderer.h	/^	void UseDefaultFBO() { gl->BindFramebuffer( GL_FRAMEBUFFER, 0 ); }$/;"	f	class:Renderer	access:public	signature:()
UseProgram	render/context.h	/^  PFNGLUSEPROGRAMPROC UseProgram;$/;"	m	class:Render::Context	access:public
UserType	ailib/fsa.h	/^		USER_TYPE UserType;$/;"	m	struct:FixedSizeAllocator::FSA_ELEMENT	access:public
VCorridor	map/mapgen.cpp	/^void VCorridor( Map& map, int y0, int y1, int x, int block_type )$/;"	f	namespace:mapgen	signature:( Map& map, int y0, int y1, int x, int block_type )
VCorridor	map/mapgen.h	/^void VCorridor( Map& map, int y0, int y1, int x, Map::BlockType block_type = Map::BLOCK_FREE );$/;"	p	namespace:mapgen	signature:( Map& map, int y0, int y1, int x, Map::BlockType block_type = Map::BLOCK_FREE )
VERTEX	render/shader.h	/^	const static int VERTEX = 0;$/;"	m	class:Shader	access:public
VertexAttribDivisor	render/context.h	/^  PFNGLVERTEXATTRIBDIVISORPROC VertexAttribDivisor;$/;"	m	class:Render::Context	access:public
VertexAttribPointer	render/context.h	/^  PFNGLVERTEXATTRIBPOINTERPROC VertexAttribPointer;$/;"	m	class:Render::Context	access:public
WARP	map/mapdata.h	/^		PATH, WARP, HACK$/;"	e	enum:mapgen::RoomConnection::Type
WIN32_LEAN_AND_MEAN	render/glcorearb.h	41;"	d
Weapon	entity/script/weapon.h	/^class Weapon$/;"	c
Weapon::bullet_duration	entity/script/weapon.h	/^	float bullet_duration=100;$/;"	m	class:Weapon	access:public
Weapon::bullet_speed	entity/script/weapon.h	/^	float bullet_speed=100;$/;"	m	class:Weapon	access:public
Weapon::last_shot	entity/script/weapon.h	/^	uint32_t last_shot=0;$/;"	m	class:Weapon	access:public
Weapon::rate	entity/script/weapon.h	/^	uint32_t rate=1;$/;"	m	class:Weapon	access:public
Width	map/map.h	/^	int Width()$/;"	f	class:Map	access:public	signature:()
Width	texgen/canvas.h	/^	int Width()$/;"	f	class:Canvas	access:public	signature:()
XYZUV_INST	render/mesh.h	/^		XYZUV_INST,$/;"	m	class:Mesh::AttribConfig	access:private
XYZ_UV_RST	render/mesh.h	/^		XYZ_UV_RST,$/;"	m	class:Mesh::AttribConfig	access:private
__SHAD__	render/shader.h	3;"	d
__anon11::eof	render/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon11	access:public
__anon11::read	render/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read $/;"	m	struct:__anon11	access:public
__anon11::skip	render/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon11	access:public
__anon12::buffer_start	render/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon12	access:public
__anon12::buflen	render/stb_image.h	/^   int buflen;$/;"	m	struct:__anon12	access:public
__anon12::img_buffer	render/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon12	access:public
__anon12::img_buffer_end	render/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon12	access:public
__anon12::img_buffer_original	render/stb_image.h	/^   stbi_uc *img_buffer_original;$/;"	m	struct:__anon12	access:public
__anon12::img_n	render/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon12	access:public
__anon12::img_out_n	render/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon12	access:public
__anon12::img_x	render/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon12	access:public
__anon12::img_y	render/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon12	access:public
__anon12::io	render/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon12	access:public
__anon12::io_user_data	render/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon12	access:public
__anon12::read_from_callbacks	render/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon12	access:public
__anon14::code	render/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon14	access:public
__anon14::delta	render/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon14	access:public
__anon14::fast	render/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon14	access:public
__anon14::maxcode	render/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon14	access:public
__anon14::size	render/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon14	access:public
__anon14::values	render/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon14	access:public
__anon15::__anon16::data	render/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon15::__anon16	access:public
__anon15::__anon16::dc_pred	render/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon15::__anon16	access:public
__anon15::__anon16::h	render/stb_image.h	/^      int h,v;$/;"	m	struct:__anon15::__anon16	access:public
__anon15::__anon16::h2	render/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon15::__anon16	access:public
__anon15::__anon16::ha	render/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon15::__anon16	access:public
__anon15::__anon16::hd	render/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon15::__anon16	access:public
__anon15::__anon16::id	render/stb_image.h	/^      int id;$/;"	m	struct:__anon15::__anon16	access:public
__anon15::__anon16::linebuf	render/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon15::__anon16	access:public
__anon15::__anon16::raw_data	render/stb_image.h	/^      void *raw_data;$/;"	m	struct:__anon15::__anon16	access:public
__anon15::__anon16::tq	render/stb_image.h	/^      int tq;$/;"	m	struct:__anon15::__anon16	access:public
__anon15::__anon16::v	render/stb_image.h	/^      int h,v;$/;"	m	struct:__anon15::__anon16	access:public
__anon15::__anon16::w2	render/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon15::__anon16	access:public
__anon15::__anon16::x	render/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon15::__anon16	access:public
__anon15::__anon16::y	render/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon15::__anon16	access:public
__anon15::code_bits	render/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon15	access:public
__anon15::code_buffer	render/stb_image.h	/^   stbi__uint32         code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon15	access:public
__anon15::dequant	render/stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon15	access:public
__anon15::dequant2	render/stb_image.h	/^   unsigned short dequant2[4][64];$/;"	m	struct:__anon15	access:public
__anon15::huff_ac	render/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon15	access:public
__anon15::huff_dc	render/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon15	access:public
__anon15::img_comp	render/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon15	typeref:struct:__anon15::__anon16	access:public
__anon15::img_h_max	render/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon15	access:public
__anon15::img_mcu_h	render/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon15	access:public
__anon15::img_mcu_w	render/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon15	access:public
__anon15::img_mcu_x	render/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon15	access:public
__anon15::img_mcu_y	render/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon15	access:public
__anon15::img_v_max	render/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon15	access:public
__anon15::marker	render/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon15	access:public
__anon15::nomore	render/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon15	access:public
__anon15::order	render/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon15	access:public
__anon15::restart_interval	render/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon15	access:public
__anon15::s	render/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon15	access:public
__anon15::scan_n	render/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon15	access:public
__anon15::todo	render/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon15	access:public
__anon17::hs	render/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon17	access:public
__anon17::line0	render/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon17	access:public
__anon17::line1	render/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon17	access:public
__anon17::resample	render/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon17	access:public
__anon17::vs	render/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon17	access:public
__anon17::w_lores	render/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion $/;"	m	struct:__anon17	access:public
__anon17::ypos	render/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon17	access:public
__anon17::ystep	render/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon17	access:public
__anon18::fast	render/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon18	access:public
__anon18::firstcode	render/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon18	access:public
__anon18::firstsymbol	render/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon18	access:public
__anon18::maxcode	render/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon18	access:public
__anon18::size	render/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon18	access:public
__anon18::value	render/stb_image.h	/^   stbi__uint16 value[288]; $/;"	m	struct:__anon18	access:public
__anon19::code_buffer	render/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon19	access:public
__anon19::num_bits	render/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon19	access:public
__anon19::z_distance	render/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon19	access:public
__anon19::z_expandable	render/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon19	access:public
__anon19::z_length	render/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon19	access:public
__anon19::zbuffer	render/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon19	access:public
__anon19::zbuffer_end	render/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon19	access:public
__anon19::zout	render/stb_image.h	/^   char *zout;$/;"	m	struct:__anon19	access:public
__anon19::zout_end	render/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon19	access:public
__anon19::zout_start	render/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon19	access:public
__anon20::length	render/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon20	access:public
__anon20::type	render/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon20	access:public
__anon21::expanded	render/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon21	access:public
__anon21::idata	render/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon21	access:public
__anon21::out	render/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon21	access:public
__anon21::s	render/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon21	access:public
__anon23::channel	render/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon23	access:public
__anon23::size	render/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon23	access:public
__anon23::type	render/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon23	access:public
__anon24::first	render/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon24	access:public
__anon24::prefix	render/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon24	access:public
__anon24::suffix	render/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon24	access:public
__anon25::bgindex	render/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon25	access:public
__anon25::codes	render/stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon25	access:public
__anon25::color_table	render/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon25	access:public
__anon25::cur_x	render/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon25	access:public
__anon25::cur_y	render/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon25	access:public
__anon25::eflags	render/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon25	access:public
__anon25::flags	render/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon25	access:public
__anon25::h	render/stb_image.h	/^   int w,h;$/;"	m	struct:__anon25	access:public
__anon25::lflags	render/stb_image.h	/^   int lflags;$/;"	m	struct:__anon25	access:public
__anon25::line_size	render/stb_image.h	/^   int line_size;$/;"	m	struct:__anon25	access:public
__anon25::lpal	render/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon25	access:public
__anon25::max_x	render/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon25	access:public
__anon25::max_y	render/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon25	access:public
__anon25::out	render/stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon25	access:public
__anon25::pal	render/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon25	access:public
__anon25::parse	render/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon25	access:public
__anon25::ratio	render/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon25	access:public
__anon25::start_x	render/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon25	access:public
__anon25::start_y	render/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon25	access:public
__anon25::step	render/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon25	access:public
__anon25::transparent	render/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon25	access:public
__anon25::w	render/stb_image.h	/^   int w,h;$/;"	m	struct:__anon25	access:public
__anon6::SFW	entity/script/inventory.h	/^		SFW$/;"	e	enum:__anon6::Type
__anon6::Type	entity/script/inventory.h	/^	enum Type$/;"	g	struct:__anon6	access:public
__anon6::space	entity/script/inventory.h	/^	int space;$/;"	m	struct:__anon6	access:public
__glcorearb_h_	render/glcorearb.h	2;"	d
_format	render/Bitmap.h	/^        Format _format;$/;"	m	class:tdogl::Bitmap	access:private
_getPixelOffset	render/Bitmap.h	/^        static void _getPixelOffset(unsigned col, unsigned row, unsigned width, unsigned height, Format format);$/;"	p	class:tdogl::Bitmap	access:private	signature:(unsigned col, unsigned row, unsigned width, unsigned height, Format format)
_height	render/Bitmap.h	/^        unsigned _height;$/;"	m	class:tdogl::Bitmap	access:private
_object	render/Texture.h	/^        GLuint _object;$/;"	m	class:tdogl::Texture	access:private
_originalHeight	render/Texture.h	/^        GLfloat _originalHeight;$/;"	m	class:tdogl::Texture	access:private
_originalWidth	render/Texture.h	/^        GLfloat _originalWidth;$/;"	m	class:tdogl::Texture	access:private
_pixels	render/Bitmap.h	/^        unsigned char* _pixels;$/;"	m	class:tdogl::Bitmap	access:private
_set	render/Bitmap.cpp	/^void Bitmap::_set(unsigned width, $/;"	f	class:Bitmap	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels)
_set	render/Bitmap.h	/^        void _set(unsigned width, unsigned height, Format format, const unsigned char* pixels);$/;"	p	class:tdogl::Bitmap	access:private	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels)
_width	render/Bitmap.h	/^        unsigned _width;$/;"	m	class:tdogl::Bitmap	access:private
actorlist	entity/entityfactory.h	/^	DynamicArray<Entity*>* actorlist;$/;"	m	class:EntityFactory	access:private
actors	app/app.h	/^	DynamicArray<Entity*> actors;				\/\/ list of actors$/;"	m	class:App	access:private
agi	entity/actor.h	/^	struct { float pwr, def, psi, dkm, agi; } stats;$/;"	m	struct:Actor::__anon2	access:public
alloc	ailib/fsa.h	/^	USER_TYPE *alloc()$/;"	f	class:FixedSizeAllocator	access:public	signature:()
ammo	entity/player.h	/^	int ammo = 200;$/;"	m	class:Player	access:public
angle	entity/mob.h	/^		float angle = SIGHT_ANGLE;$/;"	m	struct:Mob::__anon1	access:public
angle	render/sprite3d.h	/^	float angle;$/;"	m	class:Sprite3D	access:private
angle_to_player	entity/mob.h	/^	float angle_to_player;$/;"	m	class:Mob	access:public
array	render/renderer.h	/^	GLfloat array[256];$/;"	m	class:Renderer	access:private
aspect	render/camera.h	/^	float aspect;	\/\/ aspect Ratio$/;"	m	class:Camera	access:private
assets	app/app.h	/^	Assets assets;$/;"	m	class:App	access:private
assets	entity/entityfactory.h	/^	Assets* assets;$/;"	m	class:EntityFactory	access:private
astarsearch	ailib/blackboard.h	/^	AStarSearch<MapSearchNode> astarsearch;$/;"	m	class:Blackboard	access:public
attack	entity/actor.h	/^	bool attack;$/;"	m	class:Actor	access:public
attrconf	render/mesh.h	/^	AttribConfig attrconf;$/;"	m	class:Mesh	access:protected
attribute_coord	render/font.h	/^	GLuint attribute_coord, uniform_tex;$/;"	m	class:Font	access:private
attribute_coord	render/renderer.h	/^	GLuint attribute_coord, uniform_tex, uniform_color;$/;"	m	class:Renderer	access:private
ax	render/font.h	/^		float ax; \/\/ advance.x$/;"	m	struct:Font::character_info	access:public
axis	entity/controller/playerhumancontroller.h	/^	cml::vector2f axis, rotation_offset;$/;"	m	class:PlayerHumanController	access:private
ay	render/font.h	/^		float ay; \/\/ advance.y$/;"	m	struct:Font::character_info	access:public
back	entity/controller/playerhumancontroller.h	/^	bool forward, back, left, right;$/;"	m	class:PlayerHumanController	access:private
bgindex	render/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon25	access:public
bh	render/font.h	/^		float bh; \/\/ bitmap.rows;$/;"	m	struct:Font::character_info	access:public
bitmapFromFile	render/Bitmap.cpp	/^Bitmap Bitmap::bitmapFromFile(std::string filePath) {$/;"	f	class:Bitmap	signature:(std::string filePath)
bitmapFromFile	render/Bitmap.h	/^        static Bitmap bitmapFromFile(std::string filePath);$/;"	p	class:tdogl::Bitmap	access:public	signature:(std::string filePath)
bl	render/font.h	/^		float bl; \/\/ bitmap_left;$/;"	m	struct:Font::character_info	access:public
block	render/renderer.h	/^	Block block;$/;"	m	class:Renderer	access:private
block_type	map/map.h	/^		int block_type;$/;"	m	struct:Map::BlockData	access:public
blockprog	render/renderer.h	/^	Program quadprog, blockprog, planeprog, postprog, fontprog;$/;"	m	class:Renderer	access:private
body	entity/entity.h	/^	b2Body* body;$/;"	m	class:Entity	access:protected
bt	render/font.h	/^		float bt; \/\/ bitmap_top;$/;"	m	struct:Font::character_info	access:public
buffer_start	render/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon12	access:public
buflen	render/stb_image.h	/^   int buflen;$/;"	m	struct:__anon12	access:public
bullet_duration	entity/script/weapon.h	/^	float bullet_duration=100;$/;"	m	class:Weapon	access:public
bullet_speed	entity/script/weapon.h	/^	float bullet_speed=100;$/;"	m	class:Weapon	access:public
bulletlist	entity/entityfactory.h	/^	DynamicArray<Entity*>* bulletlist;$/;"	m	class:EntityFactory	access:private
bullets	app/app.h	/^	DynamicArray<Entity*> bullets;				\/\/ list of bullets$/;"	m	class:App	access:private
bw	render/font.h	/^		float bw; \/\/ bitmap.width;$/;"	m	struct:Font::character_info	access:public
c	render/font.h	/^	} c[128];$/;"	m	class:Font	typeref:struct:Font::character_info	access:private
cam	app/app.h	/^	Camera cam;$/;"	m	class:App	access:private
capacity	core/dynamicarray.h	/^	size_t capacity;$/;"	m	class:DynamicArray	access:private
channel	render/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon23	access:public
character_info	render/font.h	/^	struct character_info {$/;"	s	class:Font	access:private
child	ailib/stlastar.h	/^			Node *child; \/\/ used after the search for the application to view the search in reverse$/;"	m	class:AStarSearch::Node	access:public
children	core/transform.h	/^	DynamicArray<Transform*> children;$/;"	m	class:Transform	access:public
code	render/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon14	access:public
code_bits	render/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon15	access:public
code_buffer	render/stb_image.h	/^   stbi__uint32         code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon15	access:public
code_buffer	render/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon19	access:public
codes	render/stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon25	access:public
color_table	render/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon25	access:public
colors	render/block.h	/^	static const GLfloat colors[];$/;"	m	class:Block	access:public
cols	core/matrix2d.h	/^	int rows, cols;$/;"	m	class:Matrix2D	access:private
config	map/mapdata.h	/^	RoomGenConfig config;$/;"	m	struct:mapgen::MapData	access:public
confuse	entity/actor.h	/^	struct { uint32_t slow, freeze, confuse; } effect;$/;"	m	struct:Actor::__anon5	access:public
connection	map/mapdata.h	/^	RoomConnection connection;$/;"	m	struct:mapgen::Intersection	access:public
connections	map/mapdata.h	/^	DynamicArray<RoomConnection> connections;$/;"	m	struct:mapgen::MapData	access:public
contactlistener	physics/physics.h	/^	ContactListener contactlistener;$/;"	m	class:Physics	access:private
controller	entity/entity.h	/^	EntityController* controller;$/;"	m	class:Entity	access:public
coord	app/app.h	/^	float coord;$/;"	m	class:App	access:private
copyRectFromBitmap	render/Bitmap.cpp	/^void Bitmap::copyRectFromBitmap(const Bitmap& src, $/;"	f	class:Bitmap	signature:(const Bitmap& src, unsigned srcCol, unsigned srcRow, unsigned destCol, unsigned destRow, unsigned width, unsigned height)
copyRectFromBitmap	render/Bitmap.h	/^        void copyRectFromBitmap(const Bitmap& src, $/;"	p	class:tdogl::Bitmap	access:public	signature:(const Bitmap& src, unsigned srcCol, unsigned srcRow, unsigned destCol, unsigned destRow, unsigned width, unsigned height)
core	core/core.h	/^namespace core {$/;"	n
ctx	render/sdlcontext.h	/^  SDL_GLContext ctx;$/;"	m	class:Render::SDL::Context	access:private
cube_fog_range	render/renderer.h	/^	float cube_fog_range;$/;"	m	class:Renderer	access:private
cur_x	render/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon25	access:public
cur_y	render/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon25	access:public
current	entity/actor.h	/^	struct { int current, total; } hp;$/;"	m	struct:Actor::__anon3	access:public
current	render/animation.h	/^		int current;$/;"	m	struct:Animation::Data	access:public
current	render/context.h	/^  static Context* current;$/;"	m	class:Render::Context	access:public
current_frame	render/sprite3d.h	/^	cml::vector2f \/* i? *\/ current_frame, num_frames;$/;"	m	class:Sprite3D	access:private
data	core/dynamicarray.h	/^	T* data;$/;"	m	class:DynamicArray	access:private
data	core/matrix2d.h	/^	T* data;$/;"	m	class:Matrix2D	access:private
data	render/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon15::__anon16	access:public
data	texgen/canvas.h	/^	Matrix2D<Color> data;$/;"	m	class:Canvas	access:private
data	texgen/color.h	/^	uint8_t data[4];$/;"	m	class:Color	access:private
dc_pred	render/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon15::__anon16	access:public
decode_jpeg_header	render/stb_image.h	/^static int decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f	signature:(stbi__jpeg *z, int scan)
decode_jpeg_image	render/stb_image.h	/^static int decode_jpeg_image(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
def	entity/actor.h	/^	struct { float pwr, def, psi, dkm, agi; } stats;$/;"	m	struct:Actor::__anon2	access:public
default_font	render/renderer.h	/^	Font default_font;$/;"	m	class:Renderer	access:private
delta	render/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon14	access:public
deltatime	app/app.h	/^	uint32_t deltatime;$/;"	m	class:App	access:private
dequant	render/stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon15	access:public
dequant2	render/stb_image.h	/^   unsigned short dequant2[4][64];$/;"	m	struct:__anon15	access:public
dict	render/shader.cpp	/^const GLenum Shader::dict[] = {$/;"	m	class:Shader	file:
dict	render/shader.h	/^	static const GLenum dict[];$/;"	m	class:Shader	access:private
didcollide	entity/script/helpers.cpp	/^		bool didcollide;$/;"	m	class:MyRayCB	file:	access:public
distance	entity/mob.h	/^		float distance = SIGHT_DISTANCE;$/;"	m	struct:Mob::__anon1	access:public
dkm	entity/actor.h	/^	struct { float pwr, def, psi, dkm, agi; } stats;$/;"	m	struct:Actor::__anon2	access:public
dmg	entity/bullet.h	/^	float dmg;$/;"	m	class:Bullet	access:public
duration	entity/actor.h	/^	struct { uint32_t duration, last_pain; } fallout;$/;"	m	struct:Actor::__anon4	access:public
efactory	app/app.h	/^	EntityFactory efactory;$/;"	m	class:App	access:private
effect	entity/actor.h	/^	struct { uint32_t slow, freeze, confuse; } effect;$/;"	m	class:Actor	typeref:struct:Actor::__anon5	access:public
effect	entity/bullet.h	/^	int effect;$/;"	m	class:Bullet	access:public
eflags	render/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon25	access:public
element	entity/bullet.h	/^	int element;$/;"	m	class:Bullet	access:public
entity	core/transform.h	/^	Entity* entity;$/;"	m	class:Transform	access:public
entityfactory	entity/controller/entitycontroller.cpp	/^EntityFactory* EntityController::entityfactory = NULL;$/;"	m	class:EntityController	file:
entityfactory	entity/controller/entitycontroller.h	/^	static EntityFactory* entityfactory;$/;"	m	class:EntityController	access:protected
eof	render/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon11	access:public
expanded	render/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon21	access:public
f	ailib/stlastar.h	/^			float f; \/\/ sum of cumulative cost of predecessors and self and heuristic$/;"	m	class:AStarSearch::Node	access:public
face	render/font.h	/^	FT_Face face;$/;"	m	class:Font	access:private
faction	entity/actor.h	/^	Faction faction;$/;"	m	class:Actor	access:public
fallout	entity/actor.h	/^	struct { uint32_t duration, last_pain; } fallout;$/;"	m	class:Actor	typeref:struct:Actor::__anon4	access:public
farClip	render/camera.h	/^	float farClip;	\/\/ Far clipping plane distance$/;"	m	class:Camera	access:private
fast	render/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon18	access:public
fast	render/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon14	access:public
fieldOfView	render/camera.h	/^	float fieldOfView;		\/\/ Field of View Angle$/;"	m	class:Camera	access:private
filetobuf	render/shader.cpp	/^char* filetobuf(const char *file)$/;"	f	signature:(const char *file)
filetobuf	render/shader.h	/^char* filetobuf(const char *file);$/;"	p	signature:(const char *file)
first	render/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon24	access:public
first_row_filter	render/stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
firstcode	render/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon18	access:public
firstsymbol	render/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon18	access:public
flags	render/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon25	access:public
flipVertically	render/Bitmap.cpp	/^void Bitmap::flipVertically() {$/;"	f	class:Bitmap	signature:()
flipVertically	render/Bitmap.h	/^        void flipVertically();$/;"	p	class:tdogl::Bitmap	access:public	signature:()
float2fixed	render/stb_image.h	1781;"	d
floatdist	core/random.h	/^	std::uniform_real_distribution<float> floatdist;$/;"	m	class:RNG	access:private
font	app/app.h	/^	Font font;$/;"	m	class:App	access:private
fontprog	render/renderer.h	/^	Program quadprog, blockprog, planeprog, postprog, fontprog;$/;"	m	class:Renderer	access:private
fontvao	render/renderer.h	/^	GLuint fontvao, fontvbo;$/;"	m	class:Renderer	access:private
fontvbo	render/renderer.h	/^	GLuint fontvao, fontvbo;$/;"	m	class:Renderer	access:private
format	render/Bitmap.cpp	/^Bitmap::Format Bitmap::format() const {$/;"	f	class:Bitmap	signature:() const
format	render/Bitmap.h	/^        Format format() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
forward	entity/controller/playerhumancontroller.h	/^	bool forward, back, left, right;$/;"	m	class:PlayerHumanController	access:private
frag	render/program.h	/^	Shader frag;$/;"	m	class:Program	access:private
frameBuffer	render/renderer.h	/^	GLuint frameBuffer, texColorBuffer, rboDepthStencil, postvao, postvbo;$/;"	m	class:Renderer	access:private
frames	core/fpscounter.h	/^	int frames;$/;"	m	class:FPSCounter	access:private
frames	render/animation.h	/^	DynamicArray<Frame> frames;$/;"	m	class:Animation	access:private
free	ailib/fsa.h	/^	void free( USER_TYPE *user_data )$/;"	f	class:FixedSizeAllocator	access:public	signature:( USER_TYPE *user_data )
freeze	entity/actor.h	/^	struct { uint32_t slow, freeze, confuse; } effect;$/;"	m	struct:Actor::__anon5	access:public
ftlib	render/renderer.h	/^	FT_Library ftlib;$/;"	m	class:Renderer	access:private
g	ailib/stlastar.h	/^			float g; \/\/ cost of this node + it's predecessors$/;"	m	class:AStarSearch::Node	access:public
gen	core/random.h	/^	std::mt19937 gen;$/;"	m	class:RNG	access:private
getPixel	render/Bitmap.cpp	/^unsigned char* Bitmap::getPixel(unsigned int column, unsigned int row) const {$/;"	f	class:Bitmap	signature:(unsigned int column, unsigned int row) const
getPixel	render/Bitmap.h	/^        unsigned char* getPixel(unsigned int column, unsigned int row) const;$/;"	p	class:tdogl::Bitmap	access:public	signature:(unsigned int column, unsigned int row) const
gl	app/sdlglapp.h	/^	Render::SDL::Context* gl;$/;"	m	class:SDLGLApp	access:protected
gl	render/Texture.h	/^    	Context *gl;$/;"	m	class:tdogl::Texture	access:private
gl	render/renderer.h	/^	Render::Context* gl;$/;"	m	class:Renderer	access:private
glActiveShaderProgram	render/glcorearb.h	/^GLAPI void APIENTRY glActiveShaderProgram (GLuint pipeline, GLuint program);$/;"	p	signature:(GLuint pipeline, GLuint program)
glActiveTexture	render/glcorearb.h	/^GLAPI void APIENTRY glActiveTexture (GLenum texture);$/;"	p	signature:(GLenum texture)
glAttachShader	render/glcorearb.h	/^GLAPI void APIENTRY glAttachShader (GLuint program, GLuint shader);$/;"	p	signature:(GLuint program, GLuint shader)
glBeginConditionalRender	render/glcorearb.h	/^GLAPI void APIENTRY glBeginConditionalRender (GLuint id, GLenum mode);$/;"	p	signature:(GLuint id, GLenum mode)
glBeginQuery	render/glcorearb.h	/^GLAPI void APIENTRY glBeginQuery (GLenum target, GLuint id);$/;"	p	signature:(GLenum target, GLuint id)
glBeginQueryIndexed	render/glcorearb.h	/^GLAPI void APIENTRY glBeginQueryIndexed (GLenum target, GLuint index, GLuint id);$/;"	p	signature:(GLenum target, GLuint index, GLuint id)
glBeginTransformFeedback	render/glcorearb.h	/^GLAPI void APIENTRY glBeginTransformFeedback (GLenum primitiveMode);$/;"	p	signature:(GLenum primitiveMode)
glBindAttribLocation	render/glcorearb.h	/^GLAPI void APIENTRY glBindAttribLocation (GLuint program, GLuint index, const GLchar *name);$/;"	p	signature:(GLuint program, GLuint index, const GLchar *name)
glBindBuffer	render/glcorearb.h	/^GLAPI void APIENTRY glBindBuffer (GLenum target, GLuint buffer);$/;"	p	signature:(GLenum target, GLuint buffer)
glBindBufferBase	render/glcorearb.h	/^GLAPI void APIENTRY glBindBufferBase (GLenum target, GLuint index, GLuint buffer);$/;"	p	signature:(GLenum target, GLuint index, GLuint buffer)
glBindBufferRange	render/glcorearb.h	/^GLAPI void APIENTRY glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);$/;"	p	signature:(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
glBindBuffersBase	render/glcorearb.h	/^GLAPI void APIENTRY glBindBuffersBase (GLenum target, GLuint first, GLsizei count, const GLuint *buffers);$/;"	p	signature:(GLenum target, GLuint first, GLsizei count, const GLuint *buffers)
glBindBuffersRange	render/glcorearb.h	/^GLAPI void APIENTRY glBindBuffersRange (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);$/;"	p	signature:(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
glBindFragDataLocation	render/glcorearb.h	/^GLAPI void APIENTRY glBindFragDataLocation (GLuint program, GLuint color, const GLchar *name);$/;"	p	signature:(GLuint program, GLuint color, const GLchar *name)
glBindFragDataLocationIndexed	render/glcorearb.h	/^GLAPI void APIENTRY glBindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);$/;"	p	signature:(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
glBindFramebuffer	render/glcorearb.h	/^GLAPI void APIENTRY glBindFramebuffer (GLenum target, GLuint framebuffer);$/;"	p	signature:(GLenum target, GLuint framebuffer)
glBindImageTexture	render/glcorearb.h	/^GLAPI void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);$/;"	p	signature:(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
glBindImageTextures	render/glcorearb.h	/^GLAPI void APIENTRY glBindImageTextures (GLuint first, GLsizei count, const GLuint *textures);$/;"	p	signature:(GLuint first, GLsizei count, const GLuint *textures)
glBindProgramPipeline	render/glcorearb.h	/^GLAPI void APIENTRY glBindProgramPipeline (GLuint pipeline);$/;"	p	signature:(GLuint pipeline)
glBindRenderbuffer	render/glcorearb.h	/^GLAPI void APIENTRY glBindRenderbuffer (GLenum target, GLuint renderbuffer);$/;"	p	signature:(GLenum target, GLuint renderbuffer)
glBindSampler	render/glcorearb.h	/^GLAPI void APIENTRY glBindSampler (GLuint unit, GLuint sampler);$/;"	p	signature:(GLuint unit, GLuint sampler)
glBindSamplers	render/glcorearb.h	/^GLAPI void APIENTRY glBindSamplers (GLuint first, GLsizei count, const GLuint *samplers);$/;"	p	signature:(GLuint first, GLsizei count, const GLuint *samplers)
glBindTexture	render/glcorearb.h	/^GLAPI void APIENTRY glBindTexture (GLenum target, GLuint texture);$/;"	p	signature:(GLenum target, GLuint texture)
glBindTextures	render/glcorearb.h	/^GLAPI void APIENTRY glBindTextures (GLuint first, GLsizei count, const GLuint *textures);$/;"	p	signature:(GLuint first, GLsizei count, const GLuint *textures)
glBindTransformFeedback	render/glcorearb.h	/^GLAPI void APIENTRY glBindTransformFeedback (GLenum target, GLuint id);$/;"	p	signature:(GLenum target, GLuint id)
glBindVertexArray	render/glcorearb.h	/^GLAPI void APIENTRY glBindVertexArray (GLuint array);$/;"	p	signature:(GLuint array)
glBindVertexBuffer	render/glcorearb.h	/^GLAPI void APIENTRY glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);$/;"	p	signature:(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
glBindVertexBuffers	render/glcorearb.h	/^GLAPI void APIENTRY glBindVertexBuffers (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);$/;"	p	signature:(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
glBlendColor	render/glcorearb.h	/^GLAPI void APIENTRY glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	p	signature:(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
glBlendEquation	render/glcorearb.h	/^GLAPI void APIENTRY glBlendEquation (GLenum mode);$/;"	p	signature:(GLenum mode)
glBlendEquationSeparate	render/glcorearb.h	/^GLAPI void APIENTRY glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha);$/;"	p	signature:(GLenum modeRGB, GLenum modeAlpha)
glBlendEquationSeparatei	render/glcorearb.h	/^GLAPI void APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha);$/;"	p	signature:(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
glBlendEquationSeparateiARB	render/glcorearb.h	/^GLAPI void APIENTRY glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha);$/;"	p	signature:(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
glBlendEquationi	render/glcorearb.h	/^GLAPI void APIENTRY glBlendEquationi (GLuint buf, GLenum mode);$/;"	p	signature:(GLuint buf, GLenum mode)
glBlendEquationiARB	render/glcorearb.h	/^GLAPI void APIENTRY glBlendEquationiARB (GLuint buf, GLenum mode);$/;"	p	signature:(GLuint buf, GLenum mode)
glBlendFunc	render/glcorearb.h	/^GLAPI void APIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor);$/;"	p	signature:(GLenum sfactor, GLenum dfactor)
glBlendFuncSeparate	render/glcorearb.h	/^GLAPI void APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);$/;"	p	signature:(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
glBlendFuncSeparatei	render/glcorearb.h	/^GLAPI void APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);$/;"	p	signature:(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
glBlendFuncSeparateiARB	render/glcorearb.h	/^GLAPI void APIENTRY glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);$/;"	p	signature:(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
glBlendFunci	render/glcorearb.h	/^GLAPI void APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum dst);$/;"	p	signature:(GLuint buf, GLenum src, GLenum dst)
glBlendFunciARB	render/glcorearb.h	/^GLAPI void APIENTRY glBlendFunciARB (GLuint buf, GLenum src, GLenum dst);$/;"	p	signature:(GLuint buf, GLenum src, GLenum dst)
glBlitFramebuffer	render/glcorearb.h	/^GLAPI void APIENTRY glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);$/;"	p	signature:(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
glBufferData	render/glcorearb.h	/^GLAPI void APIENTRY glBufferData (GLenum target, GLsizeiptr size, const void *data, GLenum usage);$/;"	p	signature:(GLenum target, GLsizeiptr size, const void *data, GLenum usage)
glBufferStorage	render/glcorearb.h	/^GLAPI void APIENTRY glBufferStorage (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);$/;"	p	signature:(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)
glBufferSubData	render/glcorearb.h	/^GLAPI void APIENTRY glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);$/;"	p	signature:(GLenum target, GLintptr offset, GLsizeiptr size, const void *data)
glCheckFramebufferStatus	render/glcorearb.h	/^GLAPI GLenum APIENTRY glCheckFramebufferStatus (GLenum target);$/;"	p	signature:(GLenum target)
glClampColor	render/glcorearb.h	/^GLAPI void APIENTRY glClampColor (GLenum target, GLenum clamp);$/;"	p	signature:(GLenum target, GLenum clamp)
glClear	render/glcorearb.h	/^GLAPI void APIENTRY glClear (GLbitfield mask);$/;"	p	signature:(GLbitfield mask)
glClearBufferData	render/glcorearb.h	/^GLAPI void APIENTRY glClearBufferData (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);$/;"	p	signature:(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data)
glClearBufferSubData	render/glcorearb.h	/^GLAPI void APIENTRY glClearBufferSubData (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);$/;"	p	signature:(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)
glClearBufferfi	render/glcorearb.h	/^GLAPI void APIENTRY glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);$/;"	p	signature:(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
glClearBufferfv	render/glcorearb.h	/^GLAPI void APIENTRY glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat *value);$/;"	p	signature:(GLenum buffer, GLint drawbuffer, const GLfloat *value)
glClearBufferiv	render/glcorearb.h	/^GLAPI void APIENTRY glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint *value);$/;"	p	signature:(GLenum buffer, GLint drawbuffer, const GLint *value)
glClearBufferuiv	render/glcorearb.h	/^GLAPI void APIENTRY glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint *value);$/;"	p	signature:(GLenum buffer, GLint drawbuffer, const GLuint *value)
glClearColor	render/glcorearb.h	/^GLAPI void APIENTRY glClearColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);$/;"	p	signature:(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
glClearDepth	render/glcorearb.h	/^GLAPI void APIENTRY glClearDepth (GLdouble depth);$/;"	p	signature:(GLdouble depth)
glClearDepthf	render/glcorearb.h	/^GLAPI void APIENTRY glClearDepthf (GLfloat d);$/;"	p	signature:(GLfloat d)
glClearStencil	render/glcorearb.h	/^GLAPI void APIENTRY glClearStencil (GLint s);$/;"	p	signature:(GLint s)
glClearTexImage	render/glcorearb.h	/^GLAPI void APIENTRY glClearTexImage (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);$/;"	p	signature:(GLuint texture, GLint level, GLenum format, GLenum type, const void *data)
glClearTexSubImage	render/glcorearb.h	/^GLAPI void APIENTRY glClearTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);$/;"	p	signature:(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)
glClientWaitSync	render/glcorearb.h	/^GLAPI GLenum APIENTRY glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	p	signature:(GLsync sync, GLbitfield flags, GLuint64 timeout)
glColorMask	render/glcorearb.h	/^GLAPI void APIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);$/;"	p	signature:(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
glColorMaski	render/glcorearb.h	/^GLAPI void APIENTRY glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);$/;"	p	signature:(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
glCompileShader	render/glcorearb.h	/^GLAPI void APIENTRY glCompileShader (GLuint shader);$/;"	p	signature:(GLuint shader)
glCompileShaderIncludeARB	render/glcorearb.h	/^GLAPI void APIENTRY glCompileShaderIncludeARB (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);$/;"	p	signature:(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length)
glCompressedTexImage1D	render/glcorearb.h	/^GLAPI void APIENTRY glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);$/;"	p	signature:(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)
glCompressedTexImage2D	render/glcorearb.h	/^GLAPI void APIENTRY glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);$/;"	p	signature:(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)
glCompressedTexImage3D	render/glcorearb.h	/^GLAPI void APIENTRY glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);$/;"	p	signature:(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)
glCompressedTexSubImage1D	render/glcorearb.h	/^GLAPI void APIENTRY glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)
glCompressedTexSubImage2D	render/glcorearb.h	/^GLAPI void APIENTRY glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)
glCompressedTexSubImage3D	render/glcorearb.h	/^GLAPI void APIENTRY glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)
glCopyBufferSubData	render/glcorearb.h	/^GLAPI void APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);$/;"	p	signature:(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
glCopyImageSubData	render/glcorearb.h	/^GLAPI void APIENTRY glCopyImageSubData (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);$/;"	p	signature:(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
glCopyTexImage1D	render/glcorearb.h	/^GLAPI void APIENTRY glCopyTexImage1D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);$/;"	p	signature:(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
glCopyTexImage2D	render/glcorearb.h	/^GLAPI void APIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);$/;"	p	signature:(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
glCopyTexSubImage1D	render/glcorearb.h	/^GLAPI void APIENTRY glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
glCopyTexSubImage2D	render/glcorearb.h	/^GLAPI void APIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
glCopyTexSubImage3D	render/glcorearb.h	/^GLAPI void APIENTRY glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
glCreateProgram	render/glcorearb.h	/^GLAPI GLuint APIENTRY glCreateProgram (void);$/;"	p	signature:(void)
glCreateShader	render/glcorearb.h	/^GLAPI GLuint APIENTRY glCreateShader (GLenum type);$/;"	p	signature:(GLenum type)
glCreateShaderProgramv	render/glcorearb.h	/^GLAPI GLuint APIENTRY glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar *const*strings);$/;"	p	signature:(GLenum type, GLsizei count, const GLchar *const*strings)
glCreateSyncFromCLeventARB	render/glcorearb.h	/^GLAPI GLsync APIENTRY glCreateSyncFromCLeventARB (struct _cl_context *context, struct _cl_event *event, GLbitfield flags);$/;"	p	signature:(struct _cl_context *context, struct _cl_event *event, GLbitfield flags)
glCullFace	render/glcorearb.h	/^GLAPI void APIENTRY glCullFace (GLenum mode);$/;"	p	signature:(GLenum mode)
glDebugMessageCallback	render/glcorearb.h	/^GLAPI void APIENTRY glDebugMessageCallback (GLDEBUGPROC callback, const void *userParam);$/;"	p	signature:(GLDEBUGPROC callback, const void *userParam)
glDebugMessageCallbackARB	render/glcorearb.h	/^GLAPI void APIENTRY glDebugMessageCallbackARB (GLDEBUGPROCARB callback, const void *userParam);$/;"	p	signature:(GLDEBUGPROCARB callback, const void *userParam)
glDebugMessageControl	render/glcorearb.h	/^GLAPI void APIENTRY glDebugMessageControl (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);$/;"	p	signature:(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
glDebugMessageControlARB	render/glcorearb.h	/^GLAPI void APIENTRY glDebugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);$/;"	p	signature:(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
glDebugMessageInsert	render/glcorearb.h	/^GLAPI void APIENTRY glDebugMessageInsert (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);$/;"	p	signature:(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
glDebugMessageInsertARB	render/glcorearb.h	/^GLAPI void APIENTRY glDebugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);$/;"	p	signature:(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
glDeleteBuffers	render/glcorearb.h	/^GLAPI void APIENTRY glDeleteBuffers (GLsizei n, const GLuint *buffers);$/;"	p	signature:(GLsizei n, const GLuint *buffers)
glDeleteFramebuffers	render/glcorearb.h	/^GLAPI void APIENTRY glDeleteFramebuffers (GLsizei n, const GLuint *framebuffers);$/;"	p	signature:(GLsizei n, const GLuint *framebuffers)
glDeleteNamedStringARB	render/glcorearb.h	/^GLAPI void APIENTRY glDeleteNamedStringARB (GLint namelen, const GLchar *name);$/;"	p	signature:(GLint namelen, const GLchar *name)
glDeleteProgram	render/glcorearb.h	/^GLAPI void APIENTRY glDeleteProgram (GLuint program);$/;"	p	signature:(GLuint program)
glDeleteProgramPipelines	render/glcorearb.h	/^GLAPI void APIENTRY glDeleteProgramPipelines (GLsizei n, const GLuint *pipelines);$/;"	p	signature:(GLsizei n, const GLuint *pipelines)
glDeleteQueries	render/glcorearb.h	/^GLAPI void APIENTRY glDeleteQueries (GLsizei n, const GLuint *ids);$/;"	p	signature:(GLsizei n, const GLuint *ids)
glDeleteRenderbuffers	render/glcorearb.h	/^GLAPI void APIENTRY glDeleteRenderbuffers (GLsizei n, const GLuint *renderbuffers);$/;"	p	signature:(GLsizei n, const GLuint *renderbuffers)
glDeleteSamplers	render/glcorearb.h	/^GLAPI void APIENTRY glDeleteSamplers (GLsizei count, const GLuint *samplers);$/;"	p	signature:(GLsizei count, const GLuint *samplers)
glDeleteShader	render/glcorearb.h	/^GLAPI void APIENTRY glDeleteShader (GLuint shader);$/;"	p	signature:(GLuint shader)
glDeleteSync	render/glcorearb.h	/^GLAPI void APIENTRY glDeleteSync (GLsync sync);$/;"	p	signature:(GLsync sync)
glDeleteTextures	render/glcorearb.h	/^GLAPI void APIENTRY glDeleteTextures (GLsizei n, const GLuint *textures);$/;"	p	signature:(GLsizei n, const GLuint *textures)
glDeleteTransformFeedbacks	render/glcorearb.h	/^GLAPI void APIENTRY glDeleteTransformFeedbacks (GLsizei n, const GLuint *ids);$/;"	p	signature:(GLsizei n, const GLuint *ids)
glDeleteVertexArrays	render/glcorearb.h	/^GLAPI void APIENTRY glDeleteVertexArrays (GLsizei n, const GLuint *arrays);$/;"	p	signature:(GLsizei n, const GLuint *arrays)
glDepthFunc	render/glcorearb.h	/^GLAPI void APIENTRY glDepthFunc (GLenum func);$/;"	p	signature:(GLenum func)
glDepthMask	render/glcorearb.h	/^GLAPI void APIENTRY glDepthMask (GLboolean flag);$/;"	p	signature:(GLboolean flag)
glDepthRange	render/glcorearb.h	/^GLAPI void APIENTRY glDepthRange (GLdouble near, GLdouble far);$/;"	p	signature:(GLdouble near, GLdouble far)
glDepthRangeArrayv	render/glcorearb.h	/^GLAPI void APIENTRY glDepthRangeArrayv (GLuint first, GLsizei count, const GLdouble *v);$/;"	p	signature:(GLuint first, GLsizei count, const GLdouble *v)
glDepthRangeIndexed	render/glcorearb.h	/^GLAPI void APIENTRY glDepthRangeIndexed (GLuint index, GLdouble n, GLdouble f);$/;"	p	signature:(GLuint index, GLdouble n, GLdouble f)
glDepthRangef	render/glcorearb.h	/^GLAPI void APIENTRY glDepthRangef (GLfloat n, GLfloat f);$/;"	p	signature:(GLfloat n, GLfloat f)
glDetachShader	render/glcorearb.h	/^GLAPI void APIENTRY glDetachShader (GLuint program, GLuint shader);$/;"	p	signature:(GLuint program, GLuint shader)
glDisable	render/glcorearb.h	/^GLAPI void APIENTRY glDisable (GLenum cap);$/;"	p	signature:(GLenum cap)
glDisableVertexAttribArray	render/glcorearb.h	/^GLAPI void APIENTRY glDisableVertexAttribArray (GLuint index);$/;"	p	signature:(GLuint index)
glDisablei	render/glcorearb.h	/^GLAPI void APIENTRY glDisablei (GLenum target, GLuint index);$/;"	p	signature:(GLenum target, GLuint index)
glDispatchCompute	render/glcorearb.h	/^GLAPI void APIENTRY glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);$/;"	p	signature:(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
glDispatchComputeGroupSizeARB	render/glcorearb.h	/^GLAPI void APIENTRY glDispatchComputeGroupSizeARB (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);$/;"	p	signature:(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
glDispatchComputeIndirect	render/glcorearb.h	/^GLAPI void APIENTRY glDispatchComputeIndirect (GLintptr indirect);$/;"	p	signature:(GLintptr indirect)
glDrawArrays	render/glcorearb.h	/^GLAPI void APIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count);$/;"	p	signature:(GLenum mode, GLint first, GLsizei count)
glDrawArraysIndirect	render/glcorearb.h	/^GLAPI void APIENTRY glDrawArraysIndirect (GLenum mode, const void *indirect);$/;"	p	signature:(GLenum mode, const void *indirect)
glDrawArraysInstanced	render/glcorearb.h	/^GLAPI void APIENTRY glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);$/;"	p	signature:(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
glDrawArraysInstancedBaseInstance	render/glcorearb.h	/^GLAPI void APIENTRY glDrawArraysInstancedBaseInstance (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);$/;"	p	signature:(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
glDrawBuffer	render/glcorearb.h	/^GLAPI void APIENTRY glDrawBuffer (GLenum mode);$/;"	p	signature:(GLenum mode)
glDrawBuffers	render/glcorearb.h	/^GLAPI void APIENTRY glDrawBuffers (GLsizei n, const GLenum *bufs);$/;"	p	signature:(GLsizei n, const GLenum *bufs)
glDrawElements	render/glcorearb.h	/^GLAPI void APIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum type, const void *indices);$/;"	p	signature:(GLenum mode, GLsizei count, GLenum type, const void *indices)
glDrawElementsBaseVertex	render/glcorearb.h	/^GLAPI void APIENTRY glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);$/;"	p	signature:(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)
glDrawElementsIndirect	render/glcorearb.h	/^GLAPI void APIENTRY glDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect);$/;"	p	signature:(GLenum mode, GLenum type, const void *indirect)
glDrawElementsInstanced	render/glcorearb.h	/^GLAPI void APIENTRY glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);$/;"	p	signature:(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)
glDrawElementsInstancedBaseInstance	render/glcorearb.h	/^GLAPI void APIENTRY glDrawElementsInstancedBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);$/;"	p	signature:(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)
glDrawElementsInstancedBaseVertex	render/glcorearb.h	/^GLAPI void APIENTRY glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);$/;"	p	signature:(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)
glDrawElementsInstancedBaseVertexBaseInstance	render/glcorearb.h	/^GLAPI void APIENTRY glDrawElementsInstancedBaseVertexBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);$/;"	p	signature:(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
glDrawRangeElements	render/glcorearb.h	/^GLAPI void APIENTRY glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);$/;"	p	signature:(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)
glDrawRangeElementsBaseVertex	render/glcorearb.h	/^GLAPI void APIENTRY glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);$/;"	p	signature:(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)
glDrawTransformFeedback	render/glcorearb.h	/^GLAPI void APIENTRY glDrawTransformFeedback (GLenum mode, GLuint id);$/;"	p	signature:(GLenum mode, GLuint id)
glDrawTransformFeedbackInstanced	render/glcorearb.h	/^GLAPI void APIENTRY glDrawTransformFeedbackInstanced (GLenum mode, GLuint id, GLsizei instancecount);$/;"	p	signature:(GLenum mode, GLuint id, GLsizei instancecount)
glDrawTransformFeedbackStream	render/glcorearb.h	/^GLAPI void APIENTRY glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream);$/;"	p	signature:(GLenum mode, GLuint id, GLuint stream)
glDrawTransformFeedbackStreamInstanced	render/glcorearb.h	/^GLAPI void APIENTRY glDrawTransformFeedbackStreamInstanced (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);$/;"	p	signature:(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)
glEnable	render/glcorearb.h	/^GLAPI void APIENTRY glEnable (GLenum cap);$/;"	p	signature:(GLenum cap)
glEnableVertexAttribArray	render/glcorearb.h	/^GLAPI void APIENTRY glEnableVertexAttribArray (GLuint index);$/;"	p	signature:(GLuint index)
glEnablei	render/glcorearb.h	/^GLAPI void APIENTRY glEnablei (GLenum target, GLuint index);$/;"	p	signature:(GLenum target, GLuint index)
glEndConditionalRender	render/glcorearb.h	/^GLAPI void APIENTRY glEndConditionalRender (void);$/;"	p	signature:(void)
glEndQuery	render/glcorearb.h	/^GLAPI void APIENTRY glEndQuery (GLenum target);$/;"	p	signature:(GLenum target)
glEndQueryIndexed	render/glcorearb.h	/^GLAPI void APIENTRY glEndQueryIndexed (GLenum target, GLuint index);$/;"	p	signature:(GLenum target, GLuint index)
glEndTransformFeedback	render/glcorearb.h	/^GLAPI void APIENTRY glEndTransformFeedback (void);$/;"	p	signature:(void)
glFenceSync	render/glcorearb.h	/^GLAPI GLsync APIENTRY glFenceSync (GLenum condition, GLbitfield flags);$/;"	p	signature:(GLenum condition, GLbitfield flags)
glFinish	render/glcorearb.h	/^GLAPI void APIENTRY glFinish (void);$/;"	p	signature:(void)
glFlush	render/glcorearb.h	/^GLAPI void APIENTRY glFlush (void);$/;"	p	signature:(void)
glFlushMappedBufferRange	render/glcorearb.h	/^GLAPI void APIENTRY glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length);$/;"	p	signature:(GLenum target, GLintptr offset, GLsizeiptr length)
glFramebufferParameteri	render/glcorearb.h	/^GLAPI void APIENTRY glFramebufferParameteri (GLenum target, GLenum pname, GLint param);$/;"	p	signature:(GLenum target, GLenum pname, GLint param)
glFramebufferRenderbuffer	render/glcorearb.h	/^GLAPI void APIENTRY glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);$/;"	p	signature:(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
glFramebufferTexture	render/glcorearb.h	/^GLAPI void APIENTRY glFramebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level);$/;"	p	signature:(GLenum target, GLenum attachment, GLuint texture, GLint level)
glFramebufferTexture1D	render/glcorearb.h	/^GLAPI void APIENTRY glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	p	signature:(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
glFramebufferTexture2D	render/glcorearb.h	/^GLAPI void APIENTRY glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	p	signature:(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
glFramebufferTexture3D	render/glcorearb.h	/^GLAPI void APIENTRY glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);$/;"	p	signature:(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
glFramebufferTextureLayer	render/glcorearb.h	/^GLAPI void APIENTRY glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);$/;"	p	signature:(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
glFrontFace	render/glcorearb.h	/^GLAPI void APIENTRY glFrontFace (GLenum mode);$/;"	p	signature:(GLenum mode)
glGenBuffers	render/glcorearb.h	/^GLAPI void APIENTRY glGenBuffers (GLsizei n, GLuint *buffers);$/;"	p	signature:(GLsizei n, GLuint *buffers)
glGenFramebuffers	render/glcorearb.h	/^GLAPI void APIENTRY glGenFramebuffers (GLsizei n, GLuint *framebuffers);$/;"	p	signature:(GLsizei n, GLuint *framebuffers)
glGenProgramPipelines	render/glcorearb.h	/^GLAPI void APIENTRY glGenProgramPipelines (GLsizei n, GLuint *pipelines);$/;"	p	signature:(GLsizei n, GLuint *pipelines)
glGenQueries	render/glcorearb.h	/^GLAPI void APIENTRY glGenQueries (GLsizei n, GLuint *ids);$/;"	p	signature:(GLsizei n, GLuint *ids)
glGenRenderbuffers	render/glcorearb.h	/^GLAPI void APIENTRY glGenRenderbuffers (GLsizei n, GLuint *renderbuffers);$/;"	p	signature:(GLsizei n, GLuint *renderbuffers)
glGenSamplers	render/glcorearb.h	/^GLAPI void APIENTRY glGenSamplers (GLsizei count, GLuint *samplers);$/;"	p	signature:(GLsizei count, GLuint *samplers)
glGenTextures	render/glcorearb.h	/^GLAPI void APIENTRY glGenTextures (GLsizei n, GLuint *textures);$/;"	p	signature:(GLsizei n, GLuint *textures)
glGenTransformFeedbacks	render/glcorearb.h	/^GLAPI void APIENTRY glGenTransformFeedbacks (GLsizei n, GLuint *ids);$/;"	p	signature:(GLsizei n, GLuint *ids)
glGenVertexArrays	render/glcorearb.h	/^GLAPI void APIENTRY glGenVertexArrays (GLsizei n, GLuint *arrays);$/;"	p	signature:(GLsizei n, GLuint *arrays)
glGenerateMipmap	render/glcorearb.h	/^GLAPI void APIENTRY glGenerateMipmap (GLenum target);$/;"	p	signature:(GLenum target)
glGetActiveAtomicCounterBufferiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);$/;"	p	signature:(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
glGetActiveAttrib	render/glcorearb.h	/^GLAPI void APIENTRY glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);$/;"	p	signature:(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
glGetActiveSubroutineName	render/glcorearb.h	/^GLAPI void APIENTRY glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);$/;"	p	signature:(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)
glGetActiveSubroutineUniformName	render/glcorearb.h	/^GLAPI void APIENTRY glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);$/;"	p	signature:(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)
glGetActiveSubroutineUniformiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);$/;"	p	signature:(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)
glGetActiveUniform	render/glcorearb.h	/^GLAPI void APIENTRY glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);$/;"	p	signature:(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
glGetActiveUniformBlockName	render/glcorearb.h	/^GLAPI void APIENTRY glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);$/;"	p	signature:(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
glGetActiveUniformBlockiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);$/;"	p	signature:(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
glGetActiveUniformName	render/glcorearb.h	/^GLAPI void APIENTRY glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);$/;"	p	signature:(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
glGetActiveUniformsiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);$/;"	p	signature:(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
glGetAttachedShaders	render/glcorearb.h	/^GLAPI void APIENTRY glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);$/;"	p	signature:(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
glGetAttribLocation	render/glcorearb.h	/^GLAPI GLint APIENTRY glGetAttribLocation (GLuint program, const GLchar *name);$/;"	p	signature:(GLuint program, const GLchar *name)
glGetBooleani_v	render/glcorearb.h	/^GLAPI void APIENTRY glGetBooleani_v (GLenum target, GLuint index, GLboolean *data);$/;"	p	signature:(GLenum target, GLuint index, GLboolean *data)
glGetBooleanv	render/glcorearb.h	/^GLAPI void APIENTRY glGetBooleanv (GLenum pname, GLboolean *data);$/;"	p	signature:(GLenum pname, GLboolean *data)
glGetBufferParameteri64v	render/glcorearb.h	/^GLAPI void APIENTRY glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint64 *params)
glGetBufferParameteriv	render/glcorearb.h	/^GLAPI void APIENTRY glGetBufferParameteriv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glGetBufferPointerv	render/glcorearb.h	/^GLAPI void APIENTRY glGetBufferPointerv (GLenum target, GLenum pname, void **params);$/;"	p	signature:(GLenum target, GLenum pname, void **params)
glGetBufferSubData	render/glcorearb.h	/^GLAPI void APIENTRY glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, void *data);$/;"	p	signature:(GLenum target, GLintptr offset, GLsizeiptr size, void *data)
glGetCompressedTexImage	render/glcorearb.h	/^GLAPI void APIENTRY glGetCompressedTexImage (GLenum target, GLint level, void *img);$/;"	p	signature:(GLenum target, GLint level, void *img)
glGetDebugMessageLog	render/glcorearb.h	/^GLAPI GLuint APIENTRY glGetDebugMessageLog (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);$/;"	p	signature:(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
glGetDebugMessageLogARB	render/glcorearb.h	/^GLAPI GLuint APIENTRY glGetDebugMessageLogARB (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);$/;"	p	signature:(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
glGetDoublei_v	render/glcorearb.h	/^GLAPI void APIENTRY glGetDoublei_v (GLenum target, GLuint index, GLdouble *data);$/;"	p	signature:(GLenum target, GLuint index, GLdouble *data)
glGetDoublev	render/glcorearb.h	/^GLAPI void APIENTRY glGetDoublev (GLenum pname, GLdouble *data);$/;"	p	signature:(GLenum pname, GLdouble *data)
glGetError	render/glcorearb.h	/^GLAPI GLenum APIENTRY glGetError (void);$/;"	p	signature:(void)
glGetFloati_v	render/glcorearb.h	/^GLAPI void APIENTRY glGetFloati_v (GLenum target, GLuint index, GLfloat *data);$/;"	p	signature:(GLenum target, GLuint index, GLfloat *data)
glGetFloatv	render/glcorearb.h	/^GLAPI void APIENTRY glGetFloatv (GLenum pname, GLfloat *data);$/;"	p	signature:(GLenum pname, GLfloat *data)
glGetFragDataIndex	render/glcorearb.h	/^GLAPI GLint APIENTRY glGetFragDataIndex (GLuint program, const GLchar *name);$/;"	p	signature:(GLuint program, const GLchar *name)
glGetFragDataLocation	render/glcorearb.h	/^GLAPI GLint APIENTRY glGetFragDataLocation (GLuint program, const GLchar *name);$/;"	p	signature:(GLuint program, const GLchar *name)
glGetFramebufferAttachmentParameteriv	render/glcorearb.h	/^GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum attachment, GLenum pname, GLint *params)
glGetFramebufferParameteriv	render/glcorearb.h	/^GLAPI void APIENTRY glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glGetGraphicsResetStatusARB	render/glcorearb.h	/^GLAPI GLenum APIENTRY glGetGraphicsResetStatusARB (void);$/;"	p	signature:(void)
glGetImageHandleARB	render/glcorearb.h	/^GLAPI GLuint64 APIENTRY glGetImageHandleARB (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);$/;"	p	signature:(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
glGetInteger64i_v	render/glcorearb.h	/^GLAPI void APIENTRY glGetInteger64i_v (GLenum target, GLuint index, GLint64 *data);$/;"	p	signature:(GLenum target, GLuint index, GLint64 *data)
glGetInteger64v	render/glcorearb.h	/^GLAPI void APIENTRY glGetInteger64v (GLenum pname, GLint64 *data);$/;"	p	signature:(GLenum pname, GLint64 *data)
glGetIntegeri_v	render/glcorearb.h	/^GLAPI void APIENTRY glGetIntegeri_v (GLenum target, GLuint index, GLint *data);$/;"	p	signature:(GLenum target, GLuint index, GLint *data)
glGetIntegerv	render/glcorearb.h	/^GLAPI void APIENTRY glGetIntegerv (GLenum pname, GLint *data);$/;"	p	signature:(GLenum pname, GLint *data)
glGetInternalformati64v	render/glcorearb.h	/^GLAPI void APIENTRY glGetInternalformati64v (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);$/;"	p	signature:(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
glGetInternalformativ	render/glcorearb.h	/^GLAPI void APIENTRY glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);$/;"	p	signature:(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
glGetMultisamplefv	render/glcorearb.h	/^GLAPI void APIENTRY glGetMultisamplefv (GLenum pname, GLuint index, GLfloat *val);$/;"	p	signature:(GLenum pname, GLuint index, GLfloat *val)
glGetNamedStringARB	render/glcorearb.h	/^GLAPI void APIENTRY glGetNamedStringARB (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);$/;"	p	signature:(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
glGetNamedStringivARB	render/glcorearb.h	/^GLAPI void APIENTRY glGetNamedStringivARB (GLint namelen, const GLchar *name, GLenum pname, GLint *params);$/;"	p	signature:(GLint namelen, const GLchar *name, GLenum pname, GLint *params)
glGetObjectLabel	render/glcorearb.h	/^GLAPI void APIENTRY glGetObjectLabel (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);$/;"	p	signature:(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
glGetObjectPtrLabel	render/glcorearb.h	/^GLAPI void APIENTRY glGetObjectPtrLabel (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);$/;"	p	signature:(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
glGetPointerv	render/glcorearb.h	/^GLAPI void APIENTRY glGetPointerv (GLenum pname, void **params);$/;"	p	signature:(GLenum pname, void **params)
glGetProgramBinary	render/glcorearb.h	/^GLAPI void APIENTRY glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);$/;"	p	signature:(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)
glGetProgramInfoLog	render/glcorearb.h	/^GLAPI void APIENTRY glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	p	signature:(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
glGetProgramInterfaceiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint *params);$/;"	p	signature:(GLuint program, GLenum programInterface, GLenum pname, GLint *params)
glGetProgramPipelineInfoLog	render/glcorearb.h	/^GLAPI void APIENTRY glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	p	signature:(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
glGetProgramPipelineiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint *params);$/;"	p	signature:(GLuint pipeline, GLenum pname, GLint *params)
glGetProgramResourceIndex	render/glcorearb.h	/^GLAPI GLuint APIENTRY glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar *name);$/;"	p	signature:(GLuint program, GLenum programInterface, const GLchar *name)
glGetProgramResourceLocation	render/glcorearb.h	/^GLAPI GLint APIENTRY glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar *name);$/;"	p	signature:(GLuint program, GLenum programInterface, const GLchar *name)
glGetProgramResourceLocationIndex	render/glcorearb.h	/^GLAPI GLint APIENTRY glGetProgramResourceLocationIndex (GLuint program, GLenum programInterface, const GLchar *name);$/;"	p	signature:(GLuint program, GLenum programInterface, const GLchar *name)
glGetProgramResourceName	render/glcorearb.h	/^GLAPI void APIENTRY glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);$/;"	p	signature:(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
glGetProgramResourceiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);$/;"	p	signature:(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
glGetProgramStageiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint *values);$/;"	p	signature:(GLuint program, GLenum shadertype, GLenum pname, GLint *values)
glGetProgramiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetProgramiv (GLuint program, GLenum pname, GLint *params);$/;"	p	signature:(GLuint program, GLenum pname, GLint *params)
glGetQueryIndexediv	render/glcorearb.h	/^GLAPI void APIENTRY glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLuint index, GLenum pname, GLint *params)
glGetQueryObjecti64v	render/glcorearb.h	/^GLAPI void APIENTRY glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 *params);$/;"	p	signature:(GLuint id, GLenum pname, GLint64 *params)
glGetQueryObjectiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetQueryObjectiv (GLuint id, GLenum pname, GLint *params);$/;"	p	signature:(GLuint id, GLenum pname, GLint *params)
glGetQueryObjectui64v	render/glcorearb.h	/^GLAPI void APIENTRY glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 *params);$/;"	p	signature:(GLuint id, GLenum pname, GLuint64 *params)
glGetQueryObjectuiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint *params);$/;"	p	signature:(GLuint id, GLenum pname, GLuint *params)
glGetQueryiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetQueryiv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glGetRenderbufferParameteriv	render/glcorearb.h	/^GLAPI void APIENTRY glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glGetSamplerParameterIiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint *params);$/;"	p	signature:(GLuint sampler, GLenum pname, GLint *params)
glGetSamplerParameterIuiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint *params);$/;"	p	signature:(GLuint sampler, GLenum pname, GLuint *params)
glGetSamplerParameterfv	render/glcorearb.h	/^GLAPI void APIENTRY glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat *params);$/;"	p	signature:(GLuint sampler, GLenum pname, GLfloat *params)
glGetSamplerParameteriv	render/glcorearb.h	/^GLAPI void APIENTRY glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint *params);$/;"	p	signature:(GLuint sampler, GLenum pname, GLint *params)
glGetShaderInfoLog	render/glcorearb.h	/^GLAPI void APIENTRY glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);$/;"	p	signature:(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
glGetShaderPrecisionFormat	render/glcorearb.h	/^GLAPI void APIENTRY glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);$/;"	p	signature:(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
glGetShaderSource	render/glcorearb.h	/^GLAPI void APIENTRY glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);$/;"	p	signature:(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
glGetShaderiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetShaderiv (GLuint shader, GLenum pname, GLint *params);$/;"	p	signature:(GLuint shader, GLenum pname, GLint *params)
glGetString	render/glcorearb.h	/^GLAPI const GLubyte *APIENTRY glGetString (GLenum name);$/;"	p	signature:(GLenum name)
glGetStringi	render/glcorearb.h	/^GLAPI const GLubyte *APIENTRY glGetStringi (GLenum name, GLuint index);$/;"	p	signature:(GLenum name, GLuint index)
glGetSubroutineIndex	render/glcorearb.h	/^GLAPI GLuint APIENTRY glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar *name);$/;"	p	signature:(GLuint program, GLenum shadertype, const GLchar *name)
glGetSubroutineUniformLocation	render/glcorearb.h	/^GLAPI GLint APIENTRY glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar *name);$/;"	p	signature:(GLuint program, GLenum shadertype, const GLchar *name)
glGetSynciv	render/glcorearb.h	/^GLAPI void APIENTRY glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);$/;"	p	signature:(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
glGetTexImage	render/glcorearb.h	/^GLAPI void APIENTRY glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, void *pixels);$/;"	p	signature:(GLenum target, GLint level, GLenum format, GLenum type, void *pixels)
glGetTexLevelParameterfv	render/glcorearb.h	/^GLAPI void APIENTRY glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum target, GLint level, GLenum pname, GLfloat *params)
glGetTexLevelParameteriv	render/glcorearb.h	/^GLAPI void APIENTRY glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLint level, GLenum pname, GLint *params)
glGetTexParameterIiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetTexParameterIiv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glGetTexParameterIuiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLuint *params)
glGetTexParameterfv	render/glcorearb.h	/^GLAPI void APIENTRY glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params);$/;"	p	signature:(GLenum target, GLenum pname, GLfloat *params)
glGetTexParameteriv	render/glcorearb.h	/^GLAPI void APIENTRY glGetTexParameteriv (GLenum target, GLenum pname, GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, GLint *params)
glGetTextureHandleARB	render/glcorearb.h	/^GLAPI GLuint64 APIENTRY glGetTextureHandleARB (GLuint texture);$/;"	p	signature:(GLuint texture)
glGetTextureSamplerHandleARB	render/glcorearb.h	/^GLAPI GLuint64 APIENTRY glGetTextureSamplerHandleARB (GLuint texture, GLuint sampler);$/;"	p	signature:(GLuint texture, GLuint sampler)
glGetTransformFeedbackVarying	render/glcorearb.h	/^GLAPI void APIENTRY glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);$/;"	p	signature:(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
glGetUniformBlockIndex	render/glcorearb.h	/^GLAPI GLuint APIENTRY glGetUniformBlockIndex (GLuint program, const GLchar *uniformBlockName);$/;"	p	signature:(GLuint program, const GLchar *uniformBlockName)
glGetUniformIndices	render/glcorearb.h	/^GLAPI void APIENTRY glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);$/;"	p	signature:(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices)
glGetUniformLocation	render/glcorearb.h	/^GLAPI GLint APIENTRY glGetUniformLocation (GLuint program, const GLchar *name);$/;"	p	signature:(GLuint program, const GLchar *name)
glGetUniformSubroutineuiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint *params);$/;"	p	signature:(GLenum shadertype, GLint location, GLuint *params)
glGetUniformdv	render/glcorearb.h	/^GLAPI void APIENTRY glGetUniformdv (GLuint program, GLint location, GLdouble *params);$/;"	p	signature:(GLuint program, GLint location, GLdouble *params)
glGetUniformfv	render/glcorearb.h	/^GLAPI void APIENTRY glGetUniformfv (GLuint program, GLint location, GLfloat *params);$/;"	p	signature:(GLuint program, GLint location, GLfloat *params)
glGetUniformiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetUniformiv (GLuint program, GLint location, GLint *params);$/;"	p	signature:(GLuint program, GLint location, GLint *params)
glGetUniformuiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetUniformuiv (GLuint program, GLint location, GLuint *params);$/;"	p	signature:(GLuint program, GLint location, GLuint *params)
glGetVertexAttribIiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribIiv (GLuint index, GLenum pname, GLint *params);$/;"	p	signature:(GLuint index, GLenum pname, GLint *params)
glGetVertexAttribIuiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint *params);$/;"	p	signature:(GLuint index, GLenum pname, GLuint *params)
glGetVertexAttribLdv	render/glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble *params);$/;"	p	signature:(GLuint index, GLenum pname, GLdouble *params)
glGetVertexAttribLui64vARB	render/glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribLui64vARB (GLuint index, GLenum pname, GLuint64EXT *params);$/;"	p	signature:(GLuint index, GLenum pname, GLuint64EXT *params)
glGetVertexAttribPointerv	render/glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribPointerv (GLuint index, GLenum pname, void **pointer);$/;"	p	signature:(GLuint index, GLenum pname, void **pointer)
glGetVertexAttribdv	render/glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble *params);$/;"	p	signature:(GLuint index, GLenum pname, GLdouble *params)
glGetVertexAttribfv	render/glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat *params);$/;"	p	signature:(GLuint index, GLenum pname, GLfloat *params)
glGetVertexAttribiv	render/glcorearb.h	/^GLAPI void APIENTRY glGetVertexAttribiv (GLuint index, GLenum pname, GLint *params);$/;"	p	signature:(GLuint index, GLenum pname, GLint *params)
glGetnCompressedTexImageARB	render/glcorearb.h	/^GLAPI void APIENTRY glGetnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, void *img);$/;"	p	signature:(GLenum target, GLint lod, GLsizei bufSize, void *img)
glGetnTexImageARB	render/glcorearb.h	/^GLAPI void APIENTRY glGetnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);$/;"	p	signature:(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img)
glGetnUniformdvARB	render/glcorearb.h	/^GLAPI void APIENTRY glGetnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);$/;"	p	signature:(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
glGetnUniformfvARB	render/glcorearb.h	/^GLAPI void APIENTRY glGetnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);$/;"	p	signature:(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
glGetnUniformivARB	render/glcorearb.h	/^GLAPI void APIENTRY glGetnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint *params);$/;"	p	signature:(GLuint program, GLint location, GLsizei bufSize, GLint *params)
glGetnUniformuivARB	render/glcorearb.h	/^GLAPI void APIENTRY glGetnUniformuivARB (GLuint program, GLint location, GLsizei bufSize, GLuint *params);$/;"	p	signature:(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
glHint	render/glcorearb.h	/^GLAPI void APIENTRY glHint (GLenum target, GLenum mode);$/;"	p	signature:(GLenum target, GLenum mode)
glInvalidateBufferData	render/glcorearb.h	/^GLAPI void APIENTRY glInvalidateBufferData (GLuint buffer);$/;"	p	signature:(GLuint buffer)
glInvalidateBufferSubData	render/glcorearb.h	/^GLAPI void APIENTRY glInvalidateBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr length);$/;"	p	signature:(GLuint buffer, GLintptr offset, GLsizeiptr length)
glInvalidateFramebuffer	render/glcorearb.h	/^GLAPI void APIENTRY glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments);$/;"	p	signature:(GLenum target, GLsizei numAttachments, const GLenum *attachments)
glInvalidateSubFramebuffer	render/glcorearb.h	/^GLAPI void APIENTRY glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
glInvalidateTexImage	render/glcorearb.h	/^GLAPI void APIENTRY glInvalidateTexImage (GLuint texture, GLint level);$/;"	p	signature:(GLuint texture, GLint level)
glInvalidateTexSubImage	render/glcorearb.h	/^GLAPI void APIENTRY glInvalidateTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);$/;"	p	signature:(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
glIsBuffer	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsBuffer (GLuint buffer);$/;"	p	signature:(GLuint buffer)
glIsEnabled	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsEnabled (GLenum cap);$/;"	p	signature:(GLenum cap)
glIsEnabledi	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsEnabledi (GLenum target, GLuint index);$/;"	p	signature:(GLenum target, GLuint index)
glIsFramebuffer	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsFramebuffer (GLuint framebuffer);$/;"	p	signature:(GLuint framebuffer)
glIsImageHandleResidentARB	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsImageHandleResidentARB (GLuint64 handle);$/;"	p	signature:(GLuint64 handle)
glIsNamedStringARB	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsNamedStringARB (GLint namelen, const GLchar *name);$/;"	p	signature:(GLint namelen, const GLchar *name)
glIsProgram	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsProgram (GLuint program);$/;"	p	signature:(GLuint program)
glIsProgramPipeline	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsProgramPipeline (GLuint pipeline);$/;"	p	signature:(GLuint pipeline)
glIsQuery	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsQuery (GLuint id);$/;"	p	signature:(GLuint id)
glIsRenderbuffer	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsRenderbuffer (GLuint renderbuffer);$/;"	p	signature:(GLuint renderbuffer)
glIsSampler	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsSampler (GLuint sampler);$/;"	p	signature:(GLuint sampler)
glIsShader	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsShader (GLuint shader);$/;"	p	signature:(GLuint shader)
glIsSync	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsSync (GLsync sync);$/;"	p	signature:(GLsync sync)
glIsTexture	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsTexture (GLuint texture);$/;"	p	signature:(GLuint texture)
glIsTextureHandleResidentARB	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsTextureHandleResidentARB (GLuint64 handle);$/;"	p	signature:(GLuint64 handle)
glIsTransformFeedback	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsTransformFeedback (GLuint id);$/;"	p	signature:(GLuint id)
glIsVertexArray	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glIsVertexArray (GLuint array);$/;"	p	signature:(GLuint array)
glLineWidth	render/glcorearb.h	/^GLAPI void APIENTRY glLineWidth (GLfloat width);$/;"	p	signature:(GLfloat width)
glLinkProgram	render/glcorearb.h	/^GLAPI void APIENTRY glLinkProgram (GLuint program);$/;"	p	signature:(GLuint program)
glLogicOp	render/glcorearb.h	/^GLAPI void APIENTRY glLogicOp (GLenum opcode);$/;"	p	signature:(GLenum opcode)
glMakeImageHandleNonResidentARB	render/glcorearb.h	/^GLAPI void APIENTRY glMakeImageHandleNonResidentARB (GLuint64 handle);$/;"	p	signature:(GLuint64 handle)
glMakeImageHandleResidentARB	render/glcorearb.h	/^GLAPI void APIENTRY glMakeImageHandleResidentARB (GLuint64 handle, GLenum access);$/;"	p	signature:(GLuint64 handle, GLenum access)
glMakeTextureHandleNonResidentARB	render/glcorearb.h	/^GLAPI void APIENTRY glMakeTextureHandleNonResidentARB (GLuint64 handle);$/;"	p	signature:(GLuint64 handle)
glMakeTextureHandleResidentARB	render/glcorearb.h	/^GLAPI void APIENTRY glMakeTextureHandleResidentARB (GLuint64 handle);$/;"	p	signature:(GLuint64 handle)
glMapBuffer	render/glcorearb.h	/^GLAPI void *APIENTRY glMapBuffer (GLenum target, GLenum access);$/;"	p	signature:(GLenum target, GLenum access)
glMapBufferRange	render/glcorearb.h	/^GLAPI void *APIENTRY glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);$/;"	p	signature:(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
glMemoryBarrier	render/glcorearb.h	/^GLAPI void APIENTRY glMemoryBarrier (GLbitfield barriers);$/;"	p	signature:(GLbitfield barriers)
glMinSampleShading	render/glcorearb.h	/^GLAPI void APIENTRY glMinSampleShading (GLfloat value);$/;"	p	signature:(GLfloat value)
glMinSampleShadingARB	render/glcorearb.h	/^GLAPI void APIENTRY glMinSampleShadingARB (GLfloat value);$/;"	p	signature:(GLfloat value)
glMultiDrawArrays	render/glcorearb.h	/^GLAPI void APIENTRY glMultiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);$/;"	p	signature:(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount)
glMultiDrawArraysIndirect	render/glcorearb.h	/^GLAPI void APIENTRY glMultiDrawArraysIndirect (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);$/;"	p	signature:(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)
glMultiDrawArraysIndirectCountARB	render/glcorearb.h	/^GLAPI void APIENTRY glMultiDrawArraysIndirectCountARB (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);$/;"	p	signature:(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
glMultiDrawElements	render/glcorearb.h	/^GLAPI void APIENTRY glMultiDrawElements (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);$/;"	p	signature:(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount)
glMultiDrawElementsBaseVertex	render/glcorearb.h	/^GLAPI void APIENTRY glMultiDrawElementsBaseVertex (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);$/;"	p	signature:(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex)
glMultiDrawElementsIndirect	render/glcorearb.h	/^GLAPI void APIENTRY glMultiDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);$/;"	p	signature:(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)
glMultiDrawElementsIndirectCountARB	render/glcorearb.h	/^GLAPI void APIENTRY glMultiDrawElementsIndirectCountARB (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);$/;"	p	signature:(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
glNamedStringARB	render/glcorearb.h	/^GLAPI void APIENTRY glNamedStringARB (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);$/;"	p	signature:(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
glObjectLabel	render/glcorearb.h	/^GLAPI void APIENTRY glObjectLabel (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);$/;"	p	signature:(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
glObjectPtrLabel	render/glcorearb.h	/^GLAPI void APIENTRY glObjectPtrLabel (const void *ptr, GLsizei length, const GLchar *label);$/;"	p	signature:(const void *ptr, GLsizei length, const GLchar *label)
glPatchParameterfv	render/glcorearb.h	/^GLAPI void APIENTRY glPatchParameterfv (GLenum pname, const GLfloat *values);$/;"	p	signature:(GLenum pname, const GLfloat *values)
glPatchParameteri	render/glcorearb.h	/^GLAPI void APIENTRY glPatchParameteri (GLenum pname, GLint value);$/;"	p	signature:(GLenum pname, GLint value)
glPauseTransformFeedback	render/glcorearb.h	/^GLAPI void APIENTRY glPauseTransformFeedback (void);$/;"	p	signature:(void)
glPixelStoref	render/glcorearb.h	/^GLAPI void APIENTRY glPixelStoref (GLenum pname, GLfloat param);$/;"	p	signature:(GLenum pname, GLfloat param)
glPixelStorei	render/glcorearb.h	/^GLAPI void APIENTRY glPixelStorei (GLenum pname, GLint param);$/;"	p	signature:(GLenum pname, GLint param)
glPointParameterf	render/glcorearb.h	/^GLAPI void APIENTRY glPointParameterf (GLenum pname, GLfloat param);$/;"	p	signature:(GLenum pname, GLfloat param)
glPointParameterfv	render/glcorearb.h	/^GLAPI void APIENTRY glPointParameterfv (GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum pname, const GLfloat *params)
glPointParameteri	render/glcorearb.h	/^GLAPI void APIENTRY glPointParameteri (GLenum pname, GLint param);$/;"	p	signature:(GLenum pname, GLint param)
glPointParameteriv	render/glcorearb.h	/^GLAPI void APIENTRY glPointParameteriv (GLenum pname, const GLint *params);$/;"	p	signature:(GLenum pname, const GLint *params)
glPointSize	render/glcorearb.h	/^GLAPI void APIENTRY glPointSize (GLfloat size);$/;"	p	signature:(GLfloat size)
glPolygonMode	render/glcorearb.h	/^GLAPI void APIENTRY glPolygonMode (GLenum face, GLenum mode);$/;"	p	signature:(GLenum face, GLenum mode)
glPolygonOffset	render/glcorearb.h	/^GLAPI void APIENTRY glPolygonOffset (GLfloat factor, GLfloat units);$/;"	p	signature:(GLfloat factor, GLfloat units)
glPopDebugGroup	render/glcorearb.h	/^GLAPI void APIENTRY glPopDebugGroup (void);$/;"	p	signature:(void)
glPrimitiveRestartIndex	render/glcorearb.h	/^GLAPI void APIENTRY glPrimitiveRestartIndex (GLuint index);$/;"	p	signature:(GLuint index)
glProgramBinary	render/glcorearb.h	/^GLAPI void APIENTRY glProgramBinary (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);$/;"	p	signature:(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)
glProgramParameteri	render/glcorearb.h	/^GLAPI void APIENTRY glProgramParameteri (GLuint program, GLenum pname, GLint value);$/;"	p	signature:(GLuint program, GLenum pname, GLint value)
glProgramUniform1d	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1d (GLuint program, GLint location, GLdouble v0);$/;"	p	signature:(GLuint program, GLint location, GLdouble v0)
glProgramUniform1dv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLdouble *value)
glProgramUniform1f	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1f (GLuint program, GLint location, GLfloat v0);$/;"	p	signature:(GLuint program, GLint location, GLfloat v0)
glProgramUniform1fv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLfloat *value)
glProgramUniform1i	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1i (GLuint program, GLint location, GLint v0);$/;"	p	signature:(GLuint program, GLint location, GLint v0)
glProgramUniform1iv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLint *value)
glProgramUniform1ui	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1ui (GLuint program, GLint location, GLuint v0);$/;"	p	signature:(GLuint program, GLint location, GLuint v0)
glProgramUniform1uiv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLuint *value)
glProgramUniform2d	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1);$/;"	p	signature:(GLuint program, GLint location, GLdouble v0, GLdouble v1)
glProgramUniform2dv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLdouble *value)
glProgramUniform2f	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1);$/;"	p	signature:(GLuint program, GLint location, GLfloat v0, GLfloat v1)
glProgramUniform2fv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLfloat *value)
glProgramUniform2i	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1);$/;"	p	signature:(GLuint program, GLint location, GLint v0, GLint v1)
glProgramUniform2iv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLint *value)
glProgramUniform2ui	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1);$/;"	p	signature:(GLuint program, GLint location, GLuint v0, GLuint v1)
glProgramUniform2uiv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLuint *value)
glProgramUniform3d	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);$/;"	p	signature:(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)
glProgramUniform3dv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLdouble *value)
glProgramUniform3f	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	p	signature:(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
glProgramUniform3fv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLfloat *value)
glProgramUniform3i	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);$/;"	p	signature:(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
glProgramUniform3iv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLint *value)
glProgramUniform3ui	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	p	signature:(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
glProgramUniform3uiv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLuint *value)
glProgramUniform4d	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);$/;"	p	signature:(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)
glProgramUniform4dv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLdouble *value)
glProgramUniform4f	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);$/;"	p	signature:(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
glProgramUniform4fv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLfloat *value)
glProgramUniform4i	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);$/;"	p	signature:(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
glProgramUniform4iv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLint *value)
glProgramUniform4ui	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);$/;"	p	signature:(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
glProgramUniform4uiv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLuint *value)
glProgramUniformHandleui64ARB	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformHandleui64ARB (GLuint program, GLint location, GLuint64 value);$/;"	p	signature:(GLuint program, GLint location, GLuint64 value)
glProgramUniformHandleui64vARB	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformHandleui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *values);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, const GLuint64 *values)
glProgramUniformMatrix2dv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix2fv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix2x3dv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix2x3fv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix2x4dv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix2x4fv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix3dv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix3fv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix3x2dv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix3x2fv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix3x4dv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix3x4fv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix4dv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix4fv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix4x2dv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix4x2fv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProgramUniformMatrix4x3dv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glProgramUniformMatrix4x3fv	render/glcorearb.h	/^GLAPI void APIENTRY glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glProvokingVertex	render/glcorearb.h	/^GLAPI void APIENTRY glProvokingVertex (GLenum mode);$/;"	p	signature:(GLenum mode)
glPushDebugGroup	render/glcorearb.h	/^GLAPI void APIENTRY glPushDebugGroup (GLenum source, GLuint id, GLsizei length, const GLchar *message);$/;"	p	signature:(GLenum source, GLuint id, GLsizei length, const GLchar *message)
glQueryCounter	render/glcorearb.h	/^GLAPI void APIENTRY glQueryCounter (GLuint id, GLenum target);$/;"	p	signature:(GLuint id, GLenum target)
glReadBuffer	render/glcorearb.h	/^GLAPI void APIENTRY glReadBuffer (GLenum mode);$/;"	p	signature:(GLenum mode)
glReadPixels	render/glcorearb.h	/^GLAPI void APIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)
glReadnPixelsARB	render/glcorearb.h	/^GLAPI void APIENTRY glReadnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)
glReleaseShaderCompiler	render/glcorearb.h	/^GLAPI void APIENTRY glReleaseShaderCompiler (void);$/;"	p	signature:(void)
glRenderbufferStorage	render/glcorearb.h	/^GLAPI void APIENTRY glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);$/;"	p	signature:(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
glRenderbufferStorageMultisample	render/glcorearb.h	/^GLAPI void APIENTRY glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	p	signature:(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
glResumeTransformFeedback	render/glcorearb.h	/^GLAPI void APIENTRY glResumeTransformFeedback (void);$/;"	p	signature:(void)
glSampleCoverage	render/glcorearb.h	/^GLAPI void APIENTRY glSampleCoverage (GLfloat value, GLboolean invert);$/;"	p	signature:(GLfloat value, GLboolean invert)
glSampleMaski	render/glcorearb.h	/^GLAPI void APIENTRY glSampleMaski (GLuint maskNumber, GLbitfield mask);$/;"	p	signature:(GLuint maskNumber, GLbitfield mask)
glSamplerParameterIiv	render/glcorearb.h	/^GLAPI void APIENTRY glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint *param);$/;"	p	signature:(GLuint sampler, GLenum pname, const GLint *param)
glSamplerParameterIuiv	render/glcorearb.h	/^GLAPI void APIENTRY glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint *param);$/;"	p	signature:(GLuint sampler, GLenum pname, const GLuint *param)
glSamplerParameterf	render/glcorearb.h	/^GLAPI void APIENTRY glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param);$/;"	p	signature:(GLuint sampler, GLenum pname, GLfloat param)
glSamplerParameterfv	render/glcorearb.h	/^GLAPI void APIENTRY glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat *param);$/;"	p	signature:(GLuint sampler, GLenum pname, const GLfloat *param)
glSamplerParameteri	render/glcorearb.h	/^GLAPI void APIENTRY glSamplerParameteri (GLuint sampler, GLenum pname, GLint param);$/;"	p	signature:(GLuint sampler, GLenum pname, GLint param)
glSamplerParameteriv	render/glcorearb.h	/^GLAPI void APIENTRY glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint *param);$/;"	p	signature:(GLuint sampler, GLenum pname, const GLint *param)
glScissor	render/glcorearb.h	/^GLAPI void APIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height)
glScissorArrayv	render/glcorearb.h	/^GLAPI void APIENTRY glScissorArrayv (GLuint first, GLsizei count, const GLint *v);$/;"	p	signature:(GLuint first, GLsizei count, const GLint *v)
glScissorIndexed	render/glcorearb.h	/^GLAPI void APIENTRY glScissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);$/;"	p	signature:(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
glScissorIndexedv	render/glcorearb.h	/^GLAPI void APIENTRY glScissorIndexedv (GLuint index, const GLint *v);$/;"	p	signature:(GLuint index, const GLint *v)
glShaderBinary	render/glcorearb.h	/^GLAPI void APIENTRY glShaderBinary (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);$/;"	p	signature:(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length)
glShaderSource	render/glcorearb.h	/^GLAPI void APIENTRY glShaderSource (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);$/;"	p	signature:(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)
glShaderStorageBlockBinding	render/glcorearb.h	/^GLAPI void APIENTRY glShaderStorageBlockBinding (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);$/;"	p	signature:(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
glStencilFunc	render/glcorearb.h	/^GLAPI void APIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask);$/;"	p	signature:(GLenum func, GLint ref, GLuint mask)
glStencilFuncSeparate	render/glcorearb.h	/^GLAPI void APIENTRY glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask);$/;"	p	signature:(GLenum face, GLenum func, GLint ref, GLuint mask)
glStencilMask	render/glcorearb.h	/^GLAPI void APIENTRY glStencilMask (GLuint mask);$/;"	p	signature:(GLuint mask)
glStencilMaskSeparate	render/glcorearb.h	/^GLAPI void APIENTRY glStencilMaskSeparate (GLenum face, GLuint mask);$/;"	p	signature:(GLenum face, GLuint mask)
glStencilOp	render/glcorearb.h	/^GLAPI void APIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);$/;"	p	signature:(GLenum fail, GLenum zfail, GLenum zpass)
glStencilOpSeparate	render/glcorearb.h	/^GLAPI void APIENTRY glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);$/;"	p	signature:(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
glTexBuffer	render/glcorearb.h	/^GLAPI void APIENTRY glTexBuffer (GLenum target, GLenum internalformat, GLuint buffer);$/;"	p	signature:(GLenum target, GLenum internalformat, GLuint buffer)
glTexBufferRange	render/glcorearb.h	/^GLAPI void APIENTRY glTexBufferRange (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);$/;"	p	signature:(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
glTexImage1D	render/glcorearb.h	/^GLAPI void APIENTRY glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)
glTexImage2D	render/glcorearb.h	/^GLAPI void APIENTRY glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)
glTexImage2DMultisample	render/glcorearb.h	/^GLAPI void APIENTRY glTexImage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);$/;"	p	signature:(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
glTexImage3D	render/glcorearb.h	/^GLAPI void APIENTRY glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)
glTexImage3DMultisample	render/glcorearb.h	/^GLAPI void APIENTRY glTexImage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);$/;"	p	signature:(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
glTexPageCommitmentARB	render/glcorearb.h	/^GLAPI void APIENTRY glTexPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident)
glTexParameterIiv	render/glcorearb.h	/^GLAPI void APIENTRY glTexParameterIiv (GLenum target, GLenum pname, const GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLint *params)
glTexParameterIuiv	render/glcorearb.h	/^GLAPI void APIENTRY glTexParameterIuiv (GLenum target, GLenum pname, const GLuint *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLuint *params)
glTexParameterf	render/glcorearb.h	/^GLAPI void APIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat param);$/;"	p	signature:(GLenum target, GLenum pname, GLfloat param)
glTexParameterfv	render/glcorearb.h	/^GLAPI void APIENTRY glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLfloat *params)
glTexParameteri	render/glcorearb.h	/^GLAPI void APIENTRY glTexParameteri (GLenum target, GLenum pname, GLint param);$/;"	p	signature:(GLenum target, GLenum pname, GLint param)
glTexParameteriv	render/glcorearb.h	/^GLAPI void APIENTRY glTexParameteriv (GLenum target, GLenum pname, const GLint *params);$/;"	p	signature:(GLenum target, GLenum pname, const GLint *params)
glTexStorage1D	render/glcorearb.h	/^GLAPI void APIENTRY glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);$/;"	p	signature:(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
glTexStorage2D	render/glcorearb.h	/^GLAPI void APIENTRY glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);$/;"	p	signature:(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
glTexStorage2DMultisample	render/glcorearb.h	/^GLAPI void APIENTRY glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);$/;"	p	signature:(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
glTexStorage3D	render/glcorearb.h	/^GLAPI void APIENTRY glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);$/;"	p	signature:(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
glTexStorage3DMultisample	render/glcorearb.h	/^GLAPI void APIENTRY glTexStorage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);$/;"	p	signature:(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
glTexSubImage1D	render/glcorearb.h	/^GLAPI void APIENTRY glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)
glTexSubImage2D	render/glcorearb.h	/^GLAPI void APIENTRY glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)
glTexSubImage3D	render/glcorearb.h	/^GLAPI void APIENTRY glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);$/;"	p	signature:(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)
glTextureView	render/glcorearb.h	/^GLAPI void APIENTRY glTextureView (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);$/;"	p	signature:(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
glTransformFeedbackVaryings	render/glcorearb.h	/^GLAPI void APIENTRY glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);$/;"	p	signature:(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)
glUniform1d	render/glcorearb.h	/^GLAPI void APIENTRY glUniform1d (GLint location, GLdouble x);$/;"	p	signature:(GLint location, GLdouble x)
glUniform1dv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform1dv (GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, const GLdouble *value)
glUniform1f	render/glcorearb.h	/^GLAPI void APIENTRY glUniform1f (GLint location, GLfloat v0);$/;"	p	signature:(GLint location, GLfloat v0)
glUniform1fv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform1fv (GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, const GLfloat *value)
glUniform1i	render/glcorearb.h	/^GLAPI void APIENTRY glUniform1i (GLint location, GLint v0);$/;"	p	signature:(GLint location, GLint v0)
glUniform1iv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform1iv (GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLint *value)
glUniform1ui	render/glcorearb.h	/^GLAPI void APIENTRY glUniform1ui (GLint location, GLuint v0);$/;"	p	signature:(GLint location, GLuint v0)
glUniform1uiv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform1uiv (GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLuint *value)
glUniform2d	render/glcorearb.h	/^GLAPI void APIENTRY glUniform2d (GLint location, GLdouble x, GLdouble y);$/;"	p	signature:(GLint location, GLdouble x, GLdouble y)
glUniform2dv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform2dv (GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, const GLdouble *value)
glUniform2f	render/glcorearb.h	/^GLAPI void APIENTRY glUniform2f (GLint location, GLfloat v0, GLfloat v1);$/;"	p	signature:(GLint location, GLfloat v0, GLfloat v1)
glUniform2fv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform2fv (GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, const GLfloat *value)
glUniform2i	render/glcorearb.h	/^GLAPI void APIENTRY glUniform2i (GLint location, GLint v0, GLint v1);$/;"	p	signature:(GLint location, GLint v0, GLint v1)
glUniform2iv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform2iv (GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLint *value)
glUniform2ui	render/glcorearb.h	/^GLAPI void APIENTRY glUniform2ui (GLint location, GLuint v0, GLuint v1);$/;"	p	signature:(GLint location, GLuint v0, GLuint v1)
glUniform2uiv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform2uiv (GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLuint *value)
glUniform3d	render/glcorearb.h	/^GLAPI void APIENTRY glUniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLint location, GLdouble x, GLdouble y, GLdouble z)
glUniform3dv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform3dv (GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, const GLdouble *value)
glUniform3f	render/glcorearb.h	/^GLAPI void APIENTRY glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	p	signature:(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
glUniform3fv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform3fv (GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, const GLfloat *value)
glUniform3i	render/glcorearb.h	/^GLAPI void APIENTRY glUniform3i (GLint location, GLint v0, GLint v1, GLint v2);$/;"	p	signature:(GLint location, GLint v0, GLint v1, GLint v2)
glUniform3iv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform3iv (GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLint *value)
glUniform3ui	render/glcorearb.h	/^GLAPI void APIENTRY glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	p	signature:(GLint location, GLuint v0, GLuint v1, GLuint v2)
glUniform3uiv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform3uiv (GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLuint *value)
glUniform4d	render/glcorearb.h	/^GLAPI void APIENTRY glUniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	p	signature:(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
glUniform4dv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform4dv (GLint location, GLsizei count, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, const GLdouble *value)
glUniform4f	render/glcorearb.h	/^GLAPI void APIENTRY glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);$/;"	p	signature:(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
glUniform4fv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform4fv (GLint location, GLsizei count, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, const GLfloat *value)
glUniform4i	render/glcorearb.h	/^GLAPI void APIENTRY glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);$/;"	p	signature:(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
glUniform4iv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform4iv (GLint location, GLsizei count, const GLint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLint *value)
glUniform4ui	render/glcorearb.h	/^GLAPI void APIENTRY glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);$/;"	p	signature:(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
glUniform4uiv	render/glcorearb.h	/^GLAPI void APIENTRY glUniform4uiv (GLint location, GLsizei count, const GLuint *value);$/;"	p	signature:(GLint location, GLsizei count, const GLuint *value)
glUniformBlockBinding	render/glcorearb.h	/^GLAPI void APIENTRY glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);$/;"	p	signature:(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
glUniformHandleui64ARB	render/glcorearb.h	/^GLAPI void APIENTRY glUniformHandleui64ARB (GLint location, GLuint64 value);$/;"	p	signature:(GLint location, GLuint64 value)
glUniformHandleui64vARB	render/glcorearb.h	/^GLAPI void APIENTRY glUniformHandleui64vARB (GLint location, GLsizei count, const GLuint64 *value);$/;"	p	signature:(GLint location, GLsizei count, const GLuint64 *value)
glUniformMatrix2dv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix2fv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix2x3dv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix2x3fv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix2x4dv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix2x4fv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix3dv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix3fv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix3x2dv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix3x2fv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix3x4dv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix3x4fv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix4dv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix4fv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix4x2dv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix4x2fv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformMatrix4x3dv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
glUniformMatrix4x3fv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	p	signature:(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
glUniformSubroutinesuiv	render/glcorearb.h	/^GLAPI void APIENTRY glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint *indices);$/;"	p	signature:(GLenum shadertype, GLsizei count, const GLuint *indices)
glUnmapBuffer	render/glcorearb.h	/^GLAPI GLboolean APIENTRY glUnmapBuffer (GLenum target);$/;"	p	signature:(GLenum target)
glUseProgram	render/glcorearb.h	/^GLAPI void APIENTRY glUseProgram (GLuint program);$/;"	p	signature:(GLuint program)
glUseProgramStages	render/glcorearb.h	/^GLAPI void APIENTRY glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program);$/;"	p	signature:(GLuint pipeline, GLbitfield stages, GLuint program)
glValidateProgram	render/glcorearb.h	/^GLAPI void APIENTRY glValidateProgram (GLuint program);$/;"	p	signature:(GLuint program)
glValidateProgramPipeline	render/glcorearb.h	/^GLAPI void APIENTRY glValidateProgramPipeline (GLuint pipeline);$/;"	p	signature:(GLuint pipeline)
glVertexAttrib1d	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib1d (GLuint index, GLdouble x);$/;"	p	signature:(GLuint index, GLdouble x)
glVertexAttrib1dv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib1dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttrib1f	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib1f (GLuint index, GLfloat x);$/;"	p	signature:(GLuint index, GLfloat x)
glVertexAttrib1fv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib1fv (GLuint index, const GLfloat *v);$/;"	p	signature:(GLuint index, const GLfloat *v)
glVertexAttrib1s	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib1s (GLuint index, GLshort x);$/;"	p	signature:(GLuint index, GLshort x)
glVertexAttrib1sv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib1sv (GLuint index, const GLshort *v);$/;"	p	signature:(GLuint index, const GLshort *v)
glVertexAttrib2d	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y);$/;"	p	signature:(GLuint index, GLdouble x, GLdouble y)
glVertexAttrib2dv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib2dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttrib2f	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y);$/;"	p	signature:(GLuint index, GLfloat x, GLfloat y)
glVertexAttrib2fv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib2fv (GLuint index, const GLfloat *v);$/;"	p	signature:(GLuint index, const GLfloat *v)
glVertexAttrib2s	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib2s (GLuint index, GLshort x, GLshort y);$/;"	p	signature:(GLuint index, GLshort x, GLshort y)
glVertexAttrib2sv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib2sv (GLuint index, const GLshort *v);$/;"	p	signature:(GLuint index, const GLshort *v)
glVertexAttrib3d	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLuint index, GLdouble x, GLdouble y, GLdouble z)
glVertexAttrib3dv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib3dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttrib3f	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z);$/;"	p	signature:(GLuint index, GLfloat x, GLfloat y, GLfloat z)
glVertexAttrib3fv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib3fv (GLuint index, const GLfloat *v);$/;"	p	signature:(GLuint index, const GLfloat *v)
glVertexAttrib3s	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z);$/;"	p	signature:(GLuint index, GLshort x, GLshort y, GLshort z)
glVertexAttrib3sv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib3sv (GLuint index, const GLshort *v);$/;"	p	signature:(GLuint index, const GLshort *v)
glVertexAttrib4Nbv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4Nbv (GLuint index, const GLbyte *v);$/;"	p	signature:(GLuint index, const GLbyte *v)
glVertexAttrib4Niv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4Niv (GLuint index, const GLint *v);$/;"	p	signature:(GLuint index, const GLint *v)
glVertexAttrib4Nsv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4Nsv (GLuint index, const GLshort *v);$/;"	p	signature:(GLuint index, const GLshort *v)
glVertexAttrib4Nub	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);$/;"	p	signature:(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
glVertexAttrib4Nubv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4Nubv (GLuint index, const GLubyte *v);$/;"	p	signature:(GLuint index, const GLubyte *v)
glVertexAttrib4Nuiv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4Nuiv (GLuint index, const GLuint *v);$/;"	p	signature:(GLuint index, const GLuint *v)
glVertexAttrib4Nusv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4Nusv (GLuint index, const GLushort *v);$/;"	p	signature:(GLuint index, const GLushort *v)
glVertexAttrib4bv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4bv (GLuint index, const GLbyte *v);$/;"	p	signature:(GLuint index, const GLbyte *v)
glVertexAttrib4d	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	p	signature:(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
glVertexAttrib4dv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttrib4f	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	p	signature:(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
glVertexAttrib4fv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4fv (GLuint index, const GLfloat *v);$/;"	p	signature:(GLuint index, const GLfloat *v)
glVertexAttrib4iv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4iv (GLuint index, const GLint *v);$/;"	p	signature:(GLuint index, const GLint *v)
glVertexAttrib4s	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);$/;"	p	signature:(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
glVertexAttrib4sv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4sv (GLuint index, const GLshort *v);$/;"	p	signature:(GLuint index, const GLshort *v)
glVertexAttrib4ubv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4ubv (GLuint index, const GLubyte *v);$/;"	p	signature:(GLuint index, const GLubyte *v)
glVertexAttrib4uiv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4uiv (GLuint index, const GLuint *v);$/;"	p	signature:(GLuint index, const GLuint *v)
glVertexAttrib4usv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttrib4usv (GLuint index, const GLushort *v);$/;"	p	signature:(GLuint index, const GLushort *v)
glVertexAttribBinding	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribBinding (GLuint attribindex, GLuint bindingindex);$/;"	p	signature:(GLuint attribindex, GLuint bindingindex)
glVertexAttribDivisor	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribDivisor (GLuint index, GLuint divisor);$/;"	p	signature:(GLuint index, GLuint divisor)
glVertexAttribFormat	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);$/;"	p	signature:(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
glVertexAttribI1i	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI1i (GLuint index, GLint x);$/;"	p	signature:(GLuint index, GLint x)
glVertexAttribI1iv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI1iv (GLuint index, const GLint *v);$/;"	p	signature:(GLuint index, const GLint *v)
glVertexAttribI1ui	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI1ui (GLuint index, GLuint x);$/;"	p	signature:(GLuint index, GLuint x)
glVertexAttribI1uiv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI1uiv (GLuint index, const GLuint *v);$/;"	p	signature:(GLuint index, const GLuint *v)
glVertexAttribI2i	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI2i (GLuint index, GLint x, GLint y);$/;"	p	signature:(GLuint index, GLint x, GLint y)
glVertexAttribI2iv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI2iv (GLuint index, const GLint *v);$/;"	p	signature:(GLuint index, const GLint *v)
glVertexAttribI2ui	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI2ui (GLuint index, GLuint x, GLuint y);$/;"	p	signature:(GLuint index, GLuint x, GLuint y)
glVertexAttribI2uiv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI2uiv (GLuint index, const GLuint *v);$/;"	p	signature:(GLuint index, const GLuint *v)
glVertexAttribI3i	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI3i (GLuint index, GLint x, GLint y, GLint z);$/;"	p	signature:(GLuint index, GLint x, GLint y, GLint z)
glVertexAttribI3iv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI3iv (GLuint index, const GLint *v);$/;"	p	signature:(GLuint index, const GLint *v)
glVertexAttribI3ui	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI3ui (GLuint index, GLuint x, GLuint y, GLuint z);$/;"	p	signature:(GLuint index, GLuint x, GLuint y, GLuint z)
glVertexAttribI3uiv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI3uiv (GLuint index, const GLuint *v);$/;"	p	signature:(GLuint index, const GLuint *v)
glVertexAttribI4bv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4bv (GLuint index, const GLbyte *v);$/;"	p	signature:(GLuint index, const GLbyte *v)
glVertexAttribI4i	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w);$/;"	p	signature:(GLuint index, GLint x, GLint y, GLint z, GLint w)
glVertexAttribI4iv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4iv (GLuint index, const GLint *v);$/;"	p	signature:(GLuint index, const GLint *v)
glVertexAttribI4sv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4sv (GLuint index, const GLshort *v);$/;"	p	signature:(GLuint index, const GLshort *v)
glVertexAttribI4ubv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4ubv (GLuint index, const GLubyte *v);$/;"	p	signature:(GLuint index, const GLubyte *v)
glVertexAttribI4ui	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);$/;"	p	signature:(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
glVertexAttribI4uiv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4uiv (GLuint index, const GLuint *v);$/;"	p	signature:(GLuint index, const GLuint *v)
glVertexAttribI4usv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribI4usv (GLuint index, const GLushort *v);$/;"	p	signature:(GLuint index, const GLushort *v)
glVertexAttribIFormat	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);$/;"	p	signature:(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
glVertexAttribIPointer	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);$/;"	p	signature:(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
glVertexAttribL1d	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL1d (GLuint index, GLdouble x);$/;"	p	signature:(GLuint index, GLdouble x)
glVertexAttribL1dv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL1dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttribL1ui64ARB	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL1ui64ARB (GLuint index, GLuint64EXT x);$/;"	p	signature:(GLuint index, GLuint64EXT x)
glVertexAttribL1ui64vARB	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL1ui64vARB (GLuint index, const GLuint64EXT *v);$/;"	p	signature:(GLuint index, const GLuint64EXT *v)
glVertexAttribL2d	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL2d (GLuint index, GLdouble x, GLdouble y);$/;"	p	signature:(GLuint index, GLdouble x, GLdouble y)
glVertexAttribL2dv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL2dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttribL3d	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);$/;"	p	signature:(GLuint index, GLdouble x, GLdouble y, GLdouble z)
glVertexAttribL3dv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL3dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttribL4d	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	p	signature:(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
glVertexAttribL4dv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribL4dv (GLuint index, const GLdouble *v);$/;"	p	signature:(GLuint index, const GLdouble *v)
glVertexAttribLFormat	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribLFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);$/;"	p	signature:(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
glVertexAttribLPointer	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);$/;"	p	signature:(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
glVertexAttribP1ui	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, GLuint value)
glVertexAttribP1uiv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
glVertexAttribP2ui	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, GLuint value)
glVertexAttribP2uiv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
glVertexAttribP3ui	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, GLuint value)
glVertexAttribP3uiv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
glVertexAttribP4ui	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, GLuint value)
glVertexAttribP4uiv	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);$/;"	p	signature:(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
glVertexAttribPointer	render/glcorearb.h	/^GLAPI void APIENTRY glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);$/;"	p	signature:(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)
glVertexBindingDivisor	render/glcorearb.h	/^GLAPI void APIENTRY glVertexBindingDivisor (GLuint bindingindex, GLuint divisor);$/;"	p	signature:(GLuint bindingindex, GLuint divisor)
glViewport	render/glcorearb.h	/^GLAPI void APIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	p	signature:(GLint x, GLint y, GLsizei width, GLsizei height)
glViewportArrayv	render/glcorearb.h	/^GLAPI void APIENTRY glViewportArrayv (GLuint first, GLsizei count, const GLfloat *v);$/;"	p	signature:(GLuint first, GLsizei count, const GLfloat *v)
glViewportIndexedf	render/glcorearb.h	/^GLAPI void APIENTRY glViewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);$/;"	p	signature:(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
glViewportIndexedfv	render/glcorearb.h	/^GLAPI void APIENTRY glViewportIndexedfv (GLuint index, const GLfloat *v);$/;"	p	signature:(GLuint index, const GLfloat *v)
glWaitSync	render/glcorearb.h	/^GLAPI void APIENTRY glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	p	signature:(GLsync sync, GLbitfield flags, GLuint64 timeout)
h	ailib/stlastar.h	/^			float h; \/\/ heuristic estimate of distance to goal$/;"	m	class:AStarSearch::Node	access:public
h	map/mapdata.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
h	render/font.h	/^	int w, h;$/;"	m	class:Font	access:private
h	render/stb_image.h	/^      int h,v;$/;"	m	struct:__anon15::__anon16	access:public
h	render/stb_image.h	/^   int w,h;$/;"	m	struct:__anon25	access:public
h2	render/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon15::__anon16	access:public
ha	render/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon15::__anon16	access:public
handicap	entity/mob.h	/^	int handicap;$/;"	m	class:Mob	access:public
handle	render/program.h	/^	GLuint handle;$/;"	m	class:Program	access:private
handle	render/shader.h	/^	GLuint handle;$/;"	m	class:Shader	access:private
hd	render/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon15::__anon16	access:public
height	render/Bitmap.cpp	/^unsigned int Bitmap::height() const {$/;"	f	class:Bitmap	signature:() const
height	render/Bitmap.h	/^        unsigned height() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
height	render/quad.h	/^	int width, height;$/;"	m	class:Quad	access:private
horizontalAngle	render/camera.h	/^	float horizontalAngle;$/;"	m	class:Camera	access:private
hp	entity/actor.h	/^	struct { int current, total; } hp;$/;"	m	class:Actor	typeref:struct:Actor::__anon3	access:public
hs	render/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon17	access:public
huff_ac	render/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon15	access:public
huff_dc	render/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon15	access:public
id	render/stb_image.h	/^      int id;$/;"	m	struct:__anon15::__anon16	access:public
idata	render/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon21	access:public
ids	map/mapdata.h	/^	Map::BlockType ids[2];$/;"	m	struct:mapgen::Intersection	access:public
ids	map/mapdata.h	/^	Map::BlockType ids[2];$/;"	m	struct:mapgen::Path	access:public
ids	map/mapdata.h	/^	Map::BlockType ids[2];$/;"	m	struct:mapgen::RoomConnection	access:public
img_buffer	render/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon12	access:public
img_buffer_end	render/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon12	access:public
img_buffer_original	render/stb_image.h	/^   stbi_uc *img_buffer_original;$/;"	m	struct:__anon12	access:public
img_comp	render/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon15	typeref:struct:__anon15::__anon16	access:public
img_h_max	render/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon15	access:public
img_mcu_h	render/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon15	access:public
img_mcu_w	render/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon15	access:public
img_mcu_x	render/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon15	access:public
img_mcu_y	render/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon15	access:public
img_n	render/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon12	access:public
img_out_n	render/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon12	access:public
img_v_max	render/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon15	access:public
img_x	render/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon12	access:public
img_y	render/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon12	access:public
int32_t	render/glcorearb.h	/^typedef __int32 int32_t;$/;"	t
int32_t	render/glcorearb.h	/^typedef long int int32_t;$/;"	t
int64_t	render/glcorearb.h	/^typedef __int64 int64_t;$/;"	t
int64_t	render/glcorearb.h	/^typedef long int int64_t;$/;"	t
int64_t	render/glcorearb.h	/^typedef long long int int64_t;$/;"	t
intdist	core/random.h	/^	std::uniform_int_distribution<int> intdist;$/;"	m	class:RNG	access:private
inventory	entity/player.h	/^	Inventory* inventory;$/;"	m	class:Player	access:public
inventory_open	entity/player.h	/^	bool inventory_open;$/;"	m	class:Player	access:public
io	render/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon12	access:public
io_user_data	render/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon12	access:public
isAlive	entity/entity.h	/^	bool isAlive;$/;"	m	class:Entity	access:protected
items	entity/script/inventory.h	/^	DynamicArray<Item*> items;$/;"	m	class:Inventory	access:private
iterDbgClosed	ailib/stlastar.h	/^	typename vector< Node * >::iterator iterDbgClosed;$/;"	m	class:AStarSearch	access:private
iterDbgOpen	ailib/stlastar.h	/^	typename vector< Node * >::iterator iterDbgOpen;$/;"	m	class:AStarSearch	access:private
last_pain	entity/actor.h	/^	int last_pain;$/;"	m	class:Actor	access:public
last_pain	entity/actor.h	/^	struct { uint32_t duration, last_pain; } fallout;$/;"	m	struct:Actor::__anon4	access:public
last_shot	entity/script/weapon.h	/^	uint32_t last_shot=0;$/;"	m	class:Weapon	access:public
left	entity/controller/playerhumancontroller.h	/^	bool forward, back, left, right;$/;"	m	class:PlayerHumanController	access:private
length	render/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon20	access:public
lflags	render/stb_image.h	/^   int lflags;$/;"	m	struct:__anon25	access:public
line0	render/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon17	access:public
line1	render/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon17	access:public
line_size	render/stb_image.h	/^   int line_size;$/;"	m	struct:__anon25	access:public
linebuf	render/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon15::__anon16	access:public
load_jpeg_image	render/stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f	signature:(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)
local	core/transform.h	/^	cml::matrix44f_c local;$/;"	m	class:Transform	access:public
local_position	core/transform.h	/^	cml::vector3f local_position;$/;"	m	class:Transform	access:public
local_rotation	core/transform.h	/^	cml::vector3f local_rotation;$/;"	m	class:Transform	access:public
locations	render/program.h	/^	DynamicArray<GLuint> locations;$/;"	m	class:Program	access:private
logic_angle	core/transform.h	/^	float logic_angle = 0.f;$/;"	m	class:Transform	access:public
lpal	render/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon25	access:public
m_AllocateNodeCount	ailib/stlastar.h	/^	int m_AllocateNodeCount;$/;"	m	class:AStarSearch	access:private
m_CancelRequest	ailib/stlastar.h	/^	bool m_CancelRequest;$/;"	m	class:AStarSearch	access:private
m_ClosedList	ailib/stlastar.h	/^	vector< Node * > m_ClosedList; $/;"	m	class:AStarSearch	access:private
m_CurrentSolutionNode	ailib/stlastar.h	/^	Node *m_CurrentSolutionNode;$/;"	m	class:AStarSearch	access:private
m_FixedSizeAllocator	ailib/stlastar.h	/^ 	FixedSizeAllocator<Node> m_FixedSizeAllocator;$/;"	m	class:AStarSearch	access:private
m_Goal	ailib/stlastar.h	/^	Node *m_Goal;$/;"	m	class:AStarSearch	access:private
m_MaxElements	ailib/fsa.h	/^	unsigned int m_MaxElements;$/;"	m	class:FixedSizeAllocator	access:private
m_OpenList	ailib/stlastar.h	/^	vector< Node *> m_OpenList;$/;"	m	class:AStarSearch	access:private
m_Start	ailib/stlastar.h	/^	Node *m_Start;$/;"	m	class:AStarSearch	access:private
m_State	ailib/stlastar.h	/^	unsigned int m_State;$/;"	m	class:AStarSearch	access:private
m_Steps	ailib/stlastar.h	/^	int m_Steps;$/;"	m	class:AStarSearch	access:private
m_Successors	ailib/stlastar.h	/^	vector< Node * > m_Successors;$/;"	m	class:AStarSearch	access:private
m_UserState	ailib/stlastar.h	/^			UserState m_UserState;$/;"	m	class:AStarSearch::Node	access:public
m_pFirstFree	ailib/fsa.h	/^	FSA_ELEMENT *m_pFirstFree;$/;"	m	class:FixedSizeAllocator	access:private
m_pFirstUsed	ailib/fsa.h	/^	FSA_ELEMENT *m_pFirstUsed;$/;"	m	class:FixedSizeAllocator	access:private
m_pMemory	ailib/fsa.h	/^	FSA_ELEMENT *m_pMemory;$/;"	m	class:FixedSizeAllocator	access:private
main	main.cpp	/^int main( int argc, char** argv )$/;"	f	signature:( int argc, char** argv )
mainGLContext	app/sdlglapp.h	/^	SDL_GLContext mainGLContext; \/\/ en sdlcontext?$/;"	m	class:SDLGLApp	access:protected
mainWindow	app/sdlglapp.h	/^	SDL_Window* mainWindow;$/;"	m	class:SDLGLApp	access:protected
map	ailib/mapsearchnode.h	/^	static Map map;$/;"	m	class:MapSearchNode	access:private
map	app/app.h	/^	Map map;$/;"	m	class:App	access:private
map_data	map/map.h	/^	Matrix2D<int> map_data;$/;"	m	class:Map	access:private
map_height	map/mapdata.h	/^	int map_width, map_height;$/;"	m	struct:mapgen::RoomGenConfig	access:public
map_width	map/mapdata.h	/^	int map_width, map_height;$/;"	m	struct:mapgen::RoomGenConfig	access:public
mapdata	app/app.h	/^	mapgen::MapData mapdata;					\/\/ map generation data$/;"	m	class:App	access:private
mapgen	map/mapdata.h	/^namespace mapgen$/;"	n
mapgen	map/mapgen.cpp	/^namespace mapgen$/;"	n	file:
mapgen	map/mapgen.h	/^namespace mapgen$/;"	n
mapgen::ConstructDoors	map/mapgen.cpp	/^Map ConstructDoors( Map map )$/;"	f	namespace:mapgen	signature:( Map map )
mapgen::ConstructRoomMap	map/mapgen.cpp	/^Map ConstructRoomMap( Map map, DynamicArray<Room>& rooms )$/;"	f	namespace:mapgen	signature:( Map map, DynamicArray<Room>& rooms )
mapgen::ConstructRoomMap	map/mapgen.h	/^Map ConstructRoomMap( Map map, DynamicArray<Room>& rooms );$/;"	p	namespace:mapgen	signature:( Map map, DynamicArray<Room>& rooms )
mapgen::Decorate	map/mapgen.cpp	/^Map Decorate( Map map )$/;"	f	namespace:mapgen	signature:( Map map )
mapgen::Decorate	map/mapgen.h	/^Map Decorate( Map map );$/;"	p	namespace:mapgen	signature:( Map map )
mapgen::Fill	map/mapgen.cpp	/^void Fill( Map& map, Map::BlockType block )$/;"	f	namespace:mapgen	signature:( Map& map, Map::BlockType block )
mapgen::Fill	map/mapgen.h	/^void Fill( Map& map );$/;"	p	namespace:mapgen	signature:( Map& map )
mapgen::Flatten	map/mapgen.cpp	/^Map Flatten( Map map )$/;"	f	namespace:mapgen	signature:( Map map )
mapgen::Flatten	map/mapgen.h	/^Map Flatten( Map map );$/;"	p	namespace:mapgen	signature:( Map map )
mapgen::GenRooms	map/mapgen.cpp	/^void GenRooms( RNG& rng, mapgen::RoomGenConfig cfg, DynamicArray<Room>& list_rooms)$/;"	f	namespace:mapgen	signature:( RNG& rng, mapgen::RoomGenConfig cfg, DynamicArray<Room>& list_rooms)
mapgen::GenRooms	map/mapgen.h	/^void GenRooms( RNG& rng, mapgen::RoomGenConfig cfg, DynamicArray<Room>& list_rooms);$/;"	p	namespace:mapgen	signature:( RNG& rng, mapgen::RoomGenConfig cfg, DynamicArray<Room>& list_rooms)
mapgen::HCorridor	map/mapgen.cpp	/^void HCorridor( Map& map, int x0, int x1, int y, int block_type )$/;"	f	namespace:mapgen	signature:( Map& map, int x0, int x1, int y, int block_type )
mapgen::HCorridor	map/mapgen.h	/^void HCorridor( Map& map, int x0, int x1, int y, Map::BlockType block_type = Map::BLOCK_FREE );$/;"	p	namespace:mapgen	signature:( Map& map, int x0, int x1, int y, Map::BlockType block_type = Map::BLOCK_FREE )
mapgen::Intersection	map/mapdata.h	/^struct Intersection$/;"	s	namespace:mapgen
mapgen::Intersection::connection	map/mapdata.h	/^	RoomConnection connection;$/;"	m	struct:mapgen::Intersection	access:public
mapgen::Intersection::ids	map/mapdata.h	/^	Map::BlockType ids[2];$/;"	m	struct:mapgen::Intersection	access:public
mapgen::Intersection::x	map/mapdata.h	/^	int x, y;$/;"	m	struct:mapgen::Intersection	access:public
mapgen::Intersection::y	map/mapdata.h	/^	int x, y;$/;"	m	struct:mapgen::Intersection	access:public
mapgen::MapData	map/mapdata.h	/^struct MapData$/;"	s	namespace:mapgen
mapgen::MapData::config	map/mapdata.h	/^	RoomGenConfig config;$/;"	m	struct:mapgen::MapData	access:public
mapgen::MapData::connections	map/mapdata.h	/^	DynamicArray<RoomConnection> connections;$/;"	m	struct:mapgen::MapData	access:public
mapgen::MapData::rooms	map/mapdata.h	/^	DynamicArray<Room> rooms;$/;"	m	struct:mapgen::MapData	access:public
mapgen::Path	map/mapdata.h	/^struct Path$/;"	s	namespace:mapgen
mapgen::Path::ids	map/mapdata.h	/^	Map::BlockType ids[2];$/;"	m	struct:mapgen::Path	access:public
mapgen::RasterMapData	map/mapgen.cpp	/^Map RasterMapData( MapData& md )$/;"	f	namespace:mapgen	signature:( MapData& md )
mapgen::RasterMapData	map/mapgen.h	/^Map RasterMapData( MapData& md );$/;"	p	namespace:mapgen	signature:( MapData& md )
mapgen::RasterMapData2	map/mapgen.cpp	/^Map RasterMapData2( MapData& md )$/;"	f	namespace:mapgen	signature:( MapData& md )
mapgen::RasterPaths	map/mapgen.cpp	/^void RasterPaths( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type )$/;"	f	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type )
mapgen::RasterPaths	map/mapgen.h	/^void RasterPaths( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type = Map::BLOCK_FREE );$/;"	p	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type = Map::BLOCK_FREE )
mapgen::RasterRooms	map/mapgen.cpp	/^void RasterRooms( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type )$/;"	f	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type )
mapgen::RasterRooms	map/mapgen.h	/^void RasterRooms( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type = Map::BLOCK_FREE );$/;"	p	namespace:mapgen	signature:( DynamicArray<Room>& rooms, Map& map, Map::BlockType block_type = Map::BLOCK_FREE )
mapgen::Room	map/mapdata.h	/^struct Room$/;"	s	namespace:mapgen
mapgen::Room::Bot	map/mapdata.h	/^	int Bot() { return y + floor(h\/2.f); }$/;"	f	struct:mapgen::Room	access:public	signature:()
mapgen::Room::Debug	map/mapdata.h	/^	void Debug()$/;"	f	struct:mapgen::Room	access:public	signature:()
mapgen::Room::Intersects	map/mapdata.h	/^	bool Intersects( Room& other )$/;"	f	struct:mapgen::Room	access:public	signature:( Room& other )
mapgen::Room::Left	map/mapdata.h	/^	int Left() { return x-floor(w\/2.f); }$/;"	f	struct:mapgen::Room	access:public	signature:()
mapgen::Room::RandomPosition	map/mapdata.h	/^	cml::vector2i RandomPosition( RNG& rng, int reduce = 0 )$/;"	f	struct:mapgen::Room	access:public	signature:( RNG& rng, int reduce = 0 )
mapgen::Room::Right	map/mapdata.h	/^	int Right() { return x + floor(w\/2.f); }$/;"	f	struct:mapgen::Room	access:public	signature:()
mapgen::Room::Room	map/mapdata.h	/^	Room( int x, int y, int w, int h ) { this->x = x; this->y = y; this->w = w; this->h = h; }$/;"	f	struct:mapgen::Room	access:public	signature:( int x, int y, int w, int h )
mapgen::Room::Top	map/mapdata.h	/^	int Top() { return y-floor(h\/2.f); }$/;"	f	struct:mapgen::Room	access:public	signature:()
mapgen::Room::h	map/mapdata.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
mapgen::Room::w	map/mapdata.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
mapgen::Room::x	map/mapdata.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
mapgen::Room::y	map/mapdata.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
mapgen::RoomConnection	map/mapdata.h	/^struct RoomConnection$/;"	s	namespace:mapgen
mapgen::RoomConnection::HACK	map/mapdata.h	/^		PATH, WARP, HACK$/;"	e	enum:mapgen::RoomConnection::Type
mapgen::RoomConnection::PATH	map/mapdata.h	/^		PATH, WARP, HACK$/;"	e	enum:mapgen::RoomConnection::Type
mapgen::RoomConnection::Type	map/mapdata.h	/^	enum Type {$/;"	g	struct:mapgen::RoomConnection	access:public
mapgen::RoomConnection::WARP	map/mapdata.h	/^		PATH, WARP, HACK$/;"	e	enum:mapgen::RoomConnection::Type
mapgen::RoomConnection::ids	map/mapdata.h	/^	Map::BlockType ids[2];$/;"	m	struct:mapgen::RoomConnection	access:public
mapgen::RoomConnection::operator ==	map/mapdata.h	/^	bool operator==( const RoomConnection& other )$/;"	f	struct:mapgen::RoomConnection	access:public	signature:( const RoomConnection& other )
mapgen::RoomConnection::type	map/mapdata.h	/^	} type;$/;"	m	struct:mapgen::RoomConnection	typeref:enum:mapgen::RoomConnection::Type	access:public
mapgen::RoomGenConfig	map/mapdata.h	/^struct RoomGenConfig$/;"	s	namespace:mapgen
mapgen::RoomGenConfig::RoomGenConfig	map/mapdata.h	/^	RoomGenConfig() :$/;"	f	struct:mapgen::RoomGenConfig	access:public	signature:()
mapgen::RoomGenConfig::map_height	map/mapdata.h	/^	int map_width, map_height;$/;"	m	struct:mapgen::RoomGenConfig	access:public
mapgen::RoomGenConfig::map_width	map/mapdata.h	/^	int map_width, map_height;$/;"	m	struct:mapgen::RoomGenConfig	access:public
mapgen::RoomGenConfig::num_rooms	map/mapdata.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::RoomGenConfig	access:public
mapgen::RoomGenConfig::overlap_control	map/mapdata.h	/^	bool overlap_control;$/;"	m	struct:mapgen::RoomGenConfig	access:public
mapgen::RoomGenConfig::room_max_height	map/mapdata.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::RoomGenConfig	access:public
mapgen::RoomGenConfig::room_max_width	map/mapdata.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::RoomGenConfig	access:public
mapgen::RoomGenConfig::room_min_height	map/mapdata.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::RoomGenConfig	access:public
mapgen::RoomGenConfig::room_min_width	map/mapdata.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::RoomGenConfig	access:public
mapgen::VCorridor	map/mapgen.cpp	/^void VCorridor( Map& map, int y0, int y1, int x, int block_type )$/;"	f	namespace:mapgen	signature:( Map& map, int y0, int y1, int x, int block_type )
mapgen::VCorridor	map/mapgen.h	/^void VCorridor( Map& map, int y0, int y1, int x, Map::BlockType block_type = Map::BLOCK_FREE );$/;"	p	namespace:mapgen	signature:( Map& map, int y0, int y1, int x, Map::BlockType block_type = Map::BLOCK_FREE )
mapgen::sign	map/mapgen.cpp	/^int sign( int x )$/;"	f	namespace:mapgen	signature:( int x )
mapgen::sign	map/mapgen.h	/^int sign( int x );$/;"	p	namespace:mapgen	signature:( int x )
marker	render/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon15	access:public
max_x	render/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon25	access:public
max_y	render/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon25	access:public
maxcode	render/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon18	access:public
maxcode	render/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon14	access:public
milis	core/fpscounter.h	/^	T milis;$/;"	m	class:FPSCounter	access:private
model_list	map/map.h	/^	DynamicArray<cml::matrix44f_c> model_list;$/;"	m	class:Map	access:private
move_direction	entity/actor.h	/^	cml::vector2f rotation_offset, move_direction;$/;"	m	class:Actor	access:public
nearClip	render/camera.h	/^	float nearClip;	\/\/ Near clipping plane distance$/;"	m	class:Camera	access:private
next_frame	render/animation.h	/^		uint32_t next_frame;$/;"	m	struct:Animation::Data	access:public
noise	texgen/texgen.cpp	/^void noise( Canvas& c, uint8_t r, uint8_t g, uint8_t b )$/;"	f	namespace:rzfx	signature:( Canvas& c, uint8_t r, uint8_t g, uint8_t b )
noise	texgen/texgen.h	/^void noise( Canvas& c, uint8_t r=255, uint8_t g=255, uint8_t b=255 );$/;"	p	namespace:rzfx	signature:( Canvas& c, uint8_t r=255, uint8_t g=255, uint8_t b=255 )
nomore	render/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon15	access:public
norm	render/block.h	/^	static const GLfloat norm[];$/;"	m	class:Block	access:public
normals	render/mesh.h	/^	GLfloat* normals;$/;"	m	class:Mesh	access:protected
num	render/animation.h	/^		int num;$/;"	m	struct:Animation::Frame	access:public
numElements	render/mesh.h	/^	size_t numElements;$/;"	m	class:Mesh	access:protected
num_bits	render/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon19	access:public
num_frames	render/sprite3d.h	/^	cml::vector2f \/* i? *\/ current_frame, num_frames;$/;"	m	class:Sprite3D	access:private
num_plays	render/animation.h	/^		int num_plays;$/;"	m	struct:Animation::Data	access:public
num_rooms	map/mapdata.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::RoomGenConfig	access:public
numbodies	physics/physics.cpp	/^		static int numbodies;$/;"	m	class:MyQueryCallback	file:	access:public
numbodies	physics/physics.cpp	/^int MyQueryCallback::numbodies = 0;$/;"	m	class:MyQueryCallback	file:
numvbo	render/mesh.h	/^	GLsizei numvbo;$/;"	m	class:Mesh	access:protected
object	render/Texture.cpp	/^GLuint Texture::object() const$/;"	f	class:Texture	signature:() const
object	render/Texture.h	/^        GLuint object() const;$/;"	p	class:tdogl::Texture	access:public	signature:() const
operator ()	ailib/stlastar.h	/^			bool operator() ( const Node *x, const Node *y ) const$/;"	f	class:AStarSearch::HeapCompare_f	access:public	signature:( const Node *x, const Node *y ) const
operator +	texgen/color.h	/^	Color operator+( Color& other )$/;"	f	class:Color	access:public	signature:( Color& other )
operator =	core/matrix2d.h	/^	Matrix2D& operator=( const Matrix2D& other )$/;"	f	class:Matrix2D	access:public	signature:( const Matrix2D& other )
operator =	map/map.h	/^	Map& operator=( const Map& other )$/;"	f	class:Map	access:public	signature:( const Map& other )
operator =	render/Bitmap.cpp	/^Bitmap& Bitmap::operator = (const Bitmap& other) {$/;"	f	class:Bitmap	signature:(const Bitmap& other)
operator =	render/Bitmap.h	/^        Bitmap& operator = (const Bitmap& other);$/;"	p	class:tdogl::Bitmap	access:public	signature:(const Bitmap& other)
operator =	render/Texture.h	/^        const Texture& operator=(const Texture&);$/;"	p	class:tdogl::Texture	access:private	signature:(const Texture&)
operator =	texgen/canvas.h	/^	Canvas& operator=( const Canvas& other )$/;"	f	class:Canvas	access:public	signature:( const Canvas& other )
operator ==	map/mapdata.h	/^	bool operator==( const RoomConnection& other )$/;"	f	struct:mapgen::RoomConnection	access:public	signature:( const RoomConnection& other )
operator []	core/dynamicarray.h	/^	T& operator[]( size_t index )$/;"	f	class:DynamicArray	access:public	signature:( size_t index )
operator []	texgen/color.h	/^	uint8_t& operator[](size_t index)$/;"	f	class:Color	access:public	signature:(size_t index)
order	render/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon15	access:public
originalHeight	render/Texture.cpp	/^GLfloat Texture::originalHeight() const$/;"	f	class:Texture	signature:() const
originalHeight	render/Texture.h	/^        GLfloat originalHeight() const;$/;"	p	class:tdogl::Texture	access:public	signature:() const
originalWidth	render/Texture.cpp	/^GLfloat Texture::originalWidth() const$/;"	f	class:Texture	signature:() const
originalWidth	render/Texture.h	/^        GLfloat originalWidth() const;$/;"	p	class:tdogl::Texture	access:public	signature:() const
out	render/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon21	access:public
out	render/stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon25	access:public
overlap_control	map/mapdata.h	/^	bool overlap_control;$/;"	m	struct:mapgen::RoomGenConfig	access:public
owner	entity/bullet.h	/^	Actor* owner;$/;"	m	class:Bullet	access:public
pNext	ailib/fsa.h	/^		FSA_ELEMENT *pNext;$/;"	m	struct:FixedSizeAllocator::FSA_ELEMENT	access:public
pPrev	ailib/fsa.h	/^		FSA_ELEMENT *pPrev;$/;"	m	struct:FixedSizeAllocator::FSA_ELEMENT	access:public
pal	render/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon25	access:public
parent	ailib/stlastar.h	/^			Node *parent; \/\/ used during the search to record the parent of successor nodes$/;"	m	class:AStarSearch::Node	access:public
parse	render/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon25	access:public
physics	app/app.h	/^	Physics physics;$/;"	m	class:App	access:private
physics	entity/entityfactory.h	/^	Physics* physics;$/;"	m	class:EntityFactory	access:private
pixelBuffer	render/Bitmap.cpp	/^unsigned char* Bitmap::pixelBuffer() const {$/;"	f	class:Bitmap	signature:() const
pixelBuffer	render/Bitmap.h	/^        unsigned char* pixelBuffer() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
plane	app/app.h	/^	Plane plane;$/;"	m	class:App	access:private
planeprog	render/renderer.h	/^	Program quadprog, blockprog, planeprog, postprog, fontprog;$/;"	m	class:Renderer	access:private
player	ailib/blackboard.h	/^	Player* player;$/;"	m	class:Blackboard	access:public
player	app/app.h	/^	Player* player;								\/\/ player entity$/;"	m	class:App	access:private
player	entity/controller/entitycontroller.cpp	/^Player* EntityController::player = NULL;$/;"	m	class:EntityController	file:
player	entity/controller/entitycontroller.h	/^	static Player* player;$/;"	m	class:EntityController	access:protected
player	entity/entityfactory.h	/^	Player* player;$/;"	m	class:EntityFactory	access:private
player_distance	entity/mob.h	/^	float player_distance;$/;"	m	class:Mob	access:public
player_visible	entity/mob.h	/^	bool player_visible;$/;"	m	class:Mob	access:public
playercontroller	app/app.h	/^	PlayerHumanController* playercontroller;	\/\/ player controller for input stuff$/;"	m	class:App	access:private
position	core/transform.h	/^	cml::vector3f position;$/;"	m	class:Transform	access:public
position	render/camera.h	/^	cml::vector3f position;$/;"	m	class:Camera	access:private
positionIterations	physics/physics.h	/^	const int32 positionIterations = 2;$/;"	m	class:Physics	access:private
postprog	render/renderer.h	/^	Program quadprog, blockprog, planeprog, postprog, fontprog;$/;"	m	class:Renderer	access:private
postvao	render/renderer.h	/^	GLuint frameBuffer, texColorBuffer, rboDepthStencil, postvao, postvbo;$/;"	m	class:Renderer	access:private
postvbo	render/renderer.h	/^	GLuint frameBuffer, texColorBuffer, rboDepthStencil, postvao, postvbo;$/;"	m	class:Renderer	access:private
prefix	render/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon24	access:public
profile	render/context.h	/^  const Profile profile;$/;"	m	class:Render::Context	access:public
projection	render/camera.h	/^	cml::matrix44f_c view, projection;$/;"	m	class:Camera	access:private
projection	render/renderer.h	/^	cml::matrix44f_c projection;$/;"	m	class:Renderer	access:private
psi	entity/actor.h	/^	struct { float pwr, def, psi, dkm, agi; } stats;$/;"	m	struct:Actor::__anon2	access:public
pwr	entity/actor.h	/^	struct { float pwr, def, psi, dkm, agi; } stats;$/;"	m	struct:Actor::__anon2	access:public
quad	render/sprite3d.h	/^	Quad quad;$/;"	m	class:Sprite3D	access:private
quadprog	render/renderer.h	/^	Program quadprog, blockprog, planeprog, postprog, fontprog;$/;"	m	class:Renderer	access:private
quantity	entity/pickup.h	/^	int quantity=20;$/;"	m	class:Pickup	access:public
rate	entity/script/weapon.h	/^	uint32_t rate=1;$/;"	m	class:Weapon	access:public
ratio	render/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon25	access:public
raw_data	render/stb_image.h	/^      void *raw_data;$/;"	m	struct:__anon15::__anon16	access:public
rboDepthStencil	render/renderer.h	/^	GLuint frameBuffer, texColorBuffer, rboDepthStencil, postvao, postvbo;$/;"	m	class:Renderer	access:private
read	render/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read $/;"	m	struct:__anon11	access:public
read_from_callbacks	render/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon12	access:public
renderer	app/app.h	/^	Renderer renderer;$/;"	m	class:App	access:private
resample	render/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon17	access:public
resample_row_1	render/stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
resample_row_func	render/stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
rest	entity/entityfactory.h	/^	DynamicArray<Entity*> rest;$/;"	m	class:EntityFactory	access:private
restart_interval	render/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon15	access:public
right	entity/controller/playerhumancontroller.h	/^	bool forward, back, left, right;$/;"	m	class:PlayerHumanController	access:private
rng	app/app.h	/^	RNG rng;$/;"	m	class:App	access:private
rng	entity/controller/mobaicontroller.cpp	/^RNG MobAIController::rng;$/;"	m	class:MobAIController	file:
rng	entity/controller/mobaicontroller.h	/^	static RNG rng; \/\/ hacerlo puntero y pasarselo desde el main$/;"	m	class:MobAIController	access:private
rng	physics/physics.h	/^	RNG rng;$/;"	m	class:Physics	access:private
rng	render/renderer.h	/^	RNG rng;$/;"	m	class:Renderer	access:private
rng	texgen/texgen.cpp	/^RNG rng;$/;"	m	namespace:rzfx	file:
room_max_height	map/mapdata.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::RoomGenConfig	access:public
room_max_width	map/mapdata.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::RoomGenConfig	access:public
room_min_height	map/mapdata.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::RoomGenConfig	access:public
room_min_width	map/mapdata.h	/^	int num_rooms, room_max_width, room_max_height, room_min_width, room_min_height;$/;"	m	struct:mapgen::RoomGenConfig	access:public
rooms	map/mapdata.h	/^	DynamicArray<Room> rooms;$/;"	m	struct:mapgen::MapData	access:public
rotate90CounterClockwise	render/Bitmap.cpp	/^void Bitmap::rotate90CounterClockwise() {$/;"	f	class:Bitmap	signature:()
rotate90CounterClockwise	render/Bitmap.h	/^        void rotate90CounterClockwise();$/;"	p	class:tdogl::Bitmap	access:public	signature:()
rotation	core/transform.h	/^	cml::vector3f rotation;$/;"	m	class:Transform	access:public
rotation_offset	entity/actor.h	/^	cml::vector2f rotation_offset, move_direction;$/;"	m	class:Actor	access:public
rotation_offset	entity/controller/playerhumancontroller.h	/^	cml::vector2f axis, rotation_offset;$/;"	m	class:PlayerHumanController	access:private
rows	core/matrix2d.h	/^	int rows, cols;$/;"	m	class:Matrix2D	access:private
run_speed	entity/player.h	/^	float run_speed = 16.f;$/;"	m	class:Player	access:public
running	app/sdlglapp.h	/^	bool running;$/;"	m	class:SDLGLApp	access:private
rzfx	texgen/texgen.cpp	/^namespace rzfx$/;"	n	file:
rzfx	texgen/texgen.h	/^namespace rzfx$/;"	n
rzfx::noise	texgen/texgen.cpp	/^void noise( Canvas& c, uint8_t r, uint8_t g, uint8_t b )$/;"	f	namespace:rzfx	signature:( Canvas& c, uint8_t r, uint8_t g, uint8_t b )
rzfx::noise	texgen/texgen.h	/^void noise( Canvas& c, uint8_t r=255, uint8_t g=255, uint8_t b=255 );$/;"	p	namespace:rzfx	signature:( Canvas& c, uint8_t r=255, uint8_t g=255, uint8_t b=255 )
rzfx::rng	texgen/texgen.cpp	/^RNG rng;$/;"	m	namespace:rzfx	file:
rzfx::smooth	texgen/texgen.cpp	/^Color smooth( Canvas& c, double x, double y )$/;"	f	namespace:rzfx	signature:( Canvas& c, double x, double y )
rzfx::turbulence	texgen/texgen.cpp	/^Canvas turbulence( Canvas& in, Canvas& out )$/;"	f	namespace:rzfx	signature:( Canvas& in, Canvas& out )
rzfx::turbulence	texgen/texgen.h	/^void turbulence( Canvas& c );$/;"	p	namespace:rzfx	signature:( Canvas& c )
s	render/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon15	access:public
s	render/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon21	access:public
scan_n	render/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon15	access:public
sceneRoot	app/app.h	/^	Transform sceneRoot;$/;"	m	class:App	access:private
sceneTree	entity/entityfactory.h	/^	Transform* sceneTree;$/;"	m	class:EntityFactory	access:private
sdlwinflags	app/sdlglapp.h	/^	uint32_t sdlwinflags;$/;"	m	class:SDLGLApp	access:protected
seed	core/random.h	/^	void seed( uint32_t seed )$/;"	f	class:RNG	access:public	signature:( uint32_t seed )
sensitivity	entity/controller/playerhumancontroller.h	/^	float sensitivity = 0.1;$/;"	m	class:PlayerHumanController	access:private
setPixel	render/Bitmap.cpp	/^void Bitmap::setPixel(unsigned int column, unsigned int row, const unsigned char* pixel) {$/;"	f	class:Bitmap	signature:(unsigned int column, unsigned int row, const unsigned char* pixel)
setPixel	render/Bitmap.h	/^        void setPixel(unsigned int column, unsigned int row, const unsigned char* pixel);$/;"	p	class:tdogl::Bitmap	access:public	signature:(unsigned int column, unsigned int row, const unsigned char* pixel)
sharedmap	ailib/blackboard.h	/^	Matrix2D<float> sharedmap;$/;"	m	class:Blackboard	access:public
shift	entity/controller/playerhumancontroller.h	/^	bool shift, shoot;$/;"	m	class:PlayerHumanController	access:private
shoot	entity/controller/playerhumancontroller.h	/^	bool shift, shoot;$/;"	m	class:PlayerHumanController	access:private
sign	map/mapgen.cpp	/^int sign( int x )$/;"	f	namespace:mapgen	signature:( int x )
sign	map/mapgen.h	/^int sign( int x );$/;"	p	namespace:mapgen	signature:( int x )
size	core/dynamicarray.h	/^	size_t size = 0;$/;"	m	class:DynamicArray	access:private
size	render/sprite3d.h	/^	cml::vector2f size;$/;"	m	class:Sprite3D	access:private
size	render/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon14	access:public
size	render/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon18	access:public
size	render/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon23	access:public
skip	render/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon11	access:public
slow	entity/actor.h	/^	struct { uint32_t slow, freeze, confuse; } effect;$/;"	m	struct:Actor::__anon5	access:public
smooth	texgen/texgen.cpp	/^Color smooth( Canvas& c, double x, double y )$/;"	f	namespace:rzfx	signature:( Canvas& c, double x, double y )
space	entity/script/inventory.h	/^	int space;$/;"	m	struct:__anon6	access:public
space	entity/script/inventory.h	/^	} space;$/;"	m	class:Inventory	typeref:struct:Inventory::__anon7	access:private
sprite	entity/entity.h	/^	Sprite3D* sprite;$/;"	m	class:Entity	access:protected
sprite3d_fog_range	render/renderer.h	/^	float sprite3d_fog_range;$/;"	m	class:Renderer	access:private
sprites	render/assets.h	/^	Sprite3D sprites[S3D_MAX];$/;"	m	class:Assets	access:private
start_x	render/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon25	access:public
start_y	render/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon25	access:public
stats	entity/actor.h	/^	struct { float pwr, def, psi, dkm, agi; } stats;$/;"	m	class:Actor	typeref:struct:Actor::__anon2	access:public
stbi_YCbCr_to_RGB_run	render/stb_image.h	/^typedef void (*stbi_YCbCr_to_RGB_run)(stbi_uc *output, stbi_uc const  *y, stbi_uc const *cb, stbi_uc const *cr, int count, int step);$/;"	t
stbi__DNL	render/stb_image.h	1632;"	d
stbi__EOI	render/stb_image.h	1634;"	d
stbi__SOF	render/stb_image.h	1635;"	d
stbi__SOI	render/stb_image.h	1633;"	d
stbi__SOS	render/stb_image.h	1636;"	d
stbi__YCbCr_installed	render/stb_image.h	/^static stbi_YCbCr_to_RGB_run stbi__YCbCr_installed = stbi__YCbCr_to_RGB_row;$/;"	v
stbi__YCbCr_to_RGB_row	render/stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f	signature:(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)
stbi__at_eof	render/stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__bit_reverse	render/stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f	signature:(int v, int bits)
stbi__bitcount	render/stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f	signature:(unsigned int a)
stbi__bitreverse16	render/stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f	signature:(int n)
stbi__bmask	render/stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_info	render/stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__bmp_load	render/stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__bmp_load	render/stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__bmp_test	render/stb_image.h	/^static int      stbi__bmp_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__bmp_test	render/stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__bmp_test_raw	render/stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__build_huffman	render/stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f	signature:(stbi__huffman *h, int *count)
stbi__check_png_header	render/stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__clamp	render/stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f	signature:(int x)
stbi__cleanup_jpeg	render/stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__compute_huffman_codes	render/stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__compute_transparency	render/stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f	signature:(stbi__png *z, stbi_uc tc[3], int out_n)
stbi__compute_y	render/stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f	signature:(int r, int g, int b)
stbi__context	render/stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon12
stbi__convert_format	render/stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f	signature:(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)
stbi__copyval	render/stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f	signature:(int channel,stbi_uc *dest,const stbi_uc *src)
stbi__create_png_image	render/stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, int interlaced)$/;"	f	signature:(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, int interlaced)
stbi__create_png_image_raw	render/stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y)$/;"	f	signature:(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y)
stbi__de_iphone	render/stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f	signature:(stbi__png *z)
stbi__de_iphone_flag	render/stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__div16	render/stb_image.h	1744;"	d
stbi__div4	render/stb_image.h	1695;"	d
stbi__do_png	render/stb_image.h	/^static unsigned char *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp)$/;"	f	signature:(stbi__png *p, int *x, int *y, int *n, int req_comp)
stbi__do_zlib	render/stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f	signature:(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)
stbi__err	render/stb_image.h	/^static int stbi__err(const char *str)$/;"	f	signature:(const char *str)
stbi__err	render/stb_image.h	535;"	d
stbi__err	render/stb_image.h	537;"	d
stbi__err	render/stb_image.h	539;"	d
stbi__errpf	render/stb_image.h	542;"	d
stbi__errpuc	render/stb_image.h	543;"	d
stbi__expand_png_palette	render/stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f	signature:(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)
stbi__extend_receive	render/stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f	signature:(stbi__jpeg *j, int n)
stbi__f2f	render/stb_image.h	1242;"	d
stbi__fill_bits	render/stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f	signature:(stbi__zbuf *z)
stbi__fill_gif_background	render/stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g)$/;"	f	signature:(stbi__gif *g)
stbi__float2int	render/stb_image.h	934;"	d
stbi__fopen	render/stb_image.h	/^FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f	signature:(char const *filename, char const *mode)
stbi__fsh	render/stb_image.h	1243;"	d
stbi__g_failure_reason	render/stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	render/stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get16le	render/stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get32be	render/stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get32le	render/stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get8	render/stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get_chunk_header	render/stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__get_marker	render/stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__getn	render/stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f	signature:(stbi__context *s, stbi_uc *buffer, int n)
stbi__gif	render/stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon25
stbi__gif_header	render/stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f	signature:(stbi__context *s, stbi__gif *g, int *comp, int is_info)
stbi__gif_info	render/stb_image.h	/^static int      stbi__gif_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__gif_info	render/stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__gif_info_raw	render/stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__gif_load	render/stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__gif_load	render/stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__gif_load_next	render/stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, stbi__gif *g, int *comp, int req_comp)
stbi__gif_lzw	render/stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon24
stbi__gif_parse_colortable	render/stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f	signature:(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)
stbi__gif_test	render/stb_image.h	/^static int      stbi__gif_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__gif_test	render/stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__gif_test_raw	render/stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__grow_buffer_unsafe	render/stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__h2l_gamma_i	render/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	render/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	render/stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f	signature:(float *output, stbi_uc *input, int req_comp)
stbi__hdr_gettoken	render/stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f	signature:(stbi__context *z, char *buffer)
stbi__hdr_info	render/stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__hdr_load	render/stb_image.h	/^static float   *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__hdr_load	render/stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__hdr_test	render/stb_image.h	/^static int      stbi__hdr_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__hdr_test	render/stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f	signature:(stbi__context* s)
stbi__hdr_test_core	render/stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__hdr_to_ldr	render/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f	signature:(float *data, int x, int y, int comp)
stbi__hdr_to_ldr	render/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp);$/;"	p	signature:(float *data, int x, int y, int comp)
stbi__high_bit	render/stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f	signature:(unsigned int z)
stbi__huffman	render/stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon14
stbi__idct_block	render/stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64], stbi_dequantize_t *dequantize)$/;"	f	signature:(stbi_uc *out, int out_stride, short data[64], stbi_dequantize_t *dequantize)
stbi__idct_installed	render/stb_image.h	/^static stbi_idct_8x8 stbi__idct_installed = stbi__idct_block;$/;"	v
stbi__info_main	render/stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__init_zdefaults	render/stb_image.h	/^static void stbi__init_zdefaults(void)$/;"	f	signature:(void)
stbi__int16	render/stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	render/stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	render/stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	render/stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__jpeg	render/stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon15
stbi__jpeg_decode_block	render/stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, int b)$/;"	f	signature:(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, int b)
stbi__jpeg_dezigzag	render/stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_huff_decode	render/stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f	signature:(stbi__jpeg *j, stbi__huffman *h)
stbi__jpeg_info	render/stb_image.h	/^static int      stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__jpeg_info	render/stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__jpeg_info_raw	render/stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f	signature:(stbi__jpeg *j, int *x, int *y, int *comp)
stbi__jpeg_load	render/stb_image.h	/^static stbi_uc *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__jpeg_load	render/stb_image.h	/^static unsigned char *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__jpeg_reset	render/stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f	signature:(stbi__jpeg *j)
stbi__jpeg_test	render/stb_image.h	/^static int      stbi__jpeg_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__jpeg_test	render/stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__l2h_gamma	render/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	render/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	render/stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f	signature:(stbi_uc *data, int x, int y, int comp)
stbi__ldr_to_hdr	render/stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp);$/;"	p	signature:(stbi_uc *data, int x, int y, int comp)
stbi__out_gif_code	render/stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f	signature:(stbi__gif *g, stbi__uint16 code)
stbi__paeth	render/stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f	signature:(int a, int b, int c)
stbi__parse_entropy_coded_data	render/stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f	signature:(stbi__jpeg *z)
stbi__parse_huffman_block	render/stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__parse_png_file	render/stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f	signature:(stbi__png *z, int scan, int req_comp)
stbi__parse_uncomperssed_block	render/stb_image.h	/^static int stbi__parse_uncomperssed_block(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__parse_zlib	render/stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f	signature:(stbi__zbuf *a, int parse_header)
stbi__parse_zlib_header	render/stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f	signature:(stbi__zbuf *a)
stbi__pic_info	render/stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__pic_is4	render/stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f	signature:(stbi__context *s,const char *str)
stbi__pic_load	render/stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__pic_load	render/stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp)$/;"	f	signature:(stbi__context *s,int *px,int *py,int *comp,int req_comp)
stbi__pic_load_core	render/stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f	signature:(stbi__context *s,int width,int height,int *comp, stbi_uc *result)
stbi__pic_packet	render/stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon23
stbi__pic_test	render/stb_image.h	/^static int      stbi__pic_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__pic_test	render/stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__pic_test_core	render/stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__png	render/stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon21
stbi__png_info	render/stb_image.h	/^static int      stbi__png_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__png_info	render/stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__png_info_raw	render/stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f	signature:(stbi__png *p, int *x, int *y, int *comp)
stbi__png_load	render/stb_image.h	/^static stbi_uc *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__png_load	render/stb_image.h	/^static unsigned char *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__png_test	render/stb_image.h	/^static int      stbi__png_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__png_test	render/stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__pngchunk	render/stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon20
stbi__process_frame_header	render/stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f	signature:(stbi__jpeg *z, int scan)
stbi__process_gif_raster	render/stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f	signature:(stbi__context *s, stbi__gif *g)
stbi__process_marker	render/stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f	signature:(stbi__jpeg *z, int m)
stbi__process_scan_header	render/stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f	signature:(stbi__jpeg *z)
stbi__psd_info	render/stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__psd_load	render/stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__psd_load	render/stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__psd_test	render/stb_image.h	/^static int      stbi__psd_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__psd_test	render/stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__readval	render/stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f	signature:(stbi__context *s, int channel, stbi_uc *dest)
stbi__refill_buffer	render/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__refill_buffer	render/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__resample	render/stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon17
stbi__resample_row_generic	render/stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__resample_row_h_2	render/stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__resample_row_hv_2	render/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__resample_row_v_2	render/stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	signature:(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
stbi__rewind	render/stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__shiftsigned	render/stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f	signature:(int v, int shift, int bits)
stbi__skip	render/stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f	signature:(stbi__context *s, int n)
stbi__start_callbacks	render/stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f	signature:(stbi__context *s, stbi_io_callbacks *c, void *user)
stbi__start_file	render/stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f	signature:(stbi__context *s, FILE *f)
stbi__start_mem	render/stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f	signature:(stbi__context *s, stbi_uc const *buffer, int len)
stbi__stdio_callbacks	render/stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	render/stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f	signature:(void *user)
stbi__stdio_read	render/stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f	signature:(void *user, char *data, int size)
stbi__stdio_skip	render/stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f	signature:(void *user, int n)
stbi__tga_info	render/stb_image.h	/^static int      stbi__tga_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__tga_info	render/stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp)
stbi__tga_load	render/stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__tga_load	render/stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi__tga_test	render/stb_image.h	/^static int      stbi__tga_test(stbi__context *s);$/;"	p	signature:(stbi__context *s)
stbi__tga_test	render/stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f	signature:(stbi__context *s)
stbi__uint16	render/stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	render/stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	render/stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	render/stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	render/stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__zbuf	render/stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon19
stbi__zbuild_huffman	render/stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, stbi_uc *sizelist, int num)$/;"	f	signature:(stbi__zhuffman *z, stbi_uc *sizelist, int num)
stbi__zdefault_distance	render/stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdefault_length	render/stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdist_base	render/stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	render/stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	render/stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, int n)  \/\/ need to make room for n bytes$/;"	f	signature:(stbi__zbuf *z, int n)
stbi__zget8	render/stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f	signature:(stbi__zbuf *z)
stbi__zhuffman	render/stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon18
stbi__zhuffman_decode	render/stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f	signature:(stbi__zbuf *a, stbi__zhuffman *z)
stbi__zlength_base	render/stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	render/stb_image.h	/^static int stbi__zlength_extra[31]= $/;"	v
stbi__zreceive	render/stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f	signature:(stbi__zbuf *z, int n)
stbi_convert_iphone_png_to_rgb	render/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f	signature:(int flag_true_if_should_convert)
stbi_convert_iphone_png_to_rgb	render/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert);$/;"	p	signature:(int flag_true_if_should_convert)
stbi_dequantize_t	render/stb_image.h	/^typedef stbi_uc stbi_dequantize_t;$/;"	t
stbi_dequantize_t	render/stb_image.h	/^typedef unsigned short stbi_dequantize_t;$/;"	t
stbi_failure_reason	render/stb_image.h	/^STBIDEF const char *stbi_failure_reason  (void); $/;"	p	signature:(void)
stbi_failure_reason	render/stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f	signature:(void)
stbi_hdr_to_ldr_gamma	render/stb_image.h	/^   STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma);$/;"	p	signature:(float gamma)
stbi_hdr_to_ldr_gamma	render/stb_image.h	/^void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f	signature:(float gamma)
stbi_hdr_to_ldr_scale	render/stb_image.h	/^   STBIDEF void   stbi_hdr_to_ldr_scale(float scale);$/;"	p	signature:(float scale)
stbi_hdr_to_ldr_scale	render/stb_image.h	/^void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f	signature:(float scale)
stbi_idct_8x8	render/stb_image.h	/^typedef void (*stbi_idct_8x8)(stbi_uc *out, int out_stride, short data[64], unsigned short *dequantize);$/;"	t
stbi_image_free	render/stb_image.h	/^STBIDEF void     stbi_image_free      (void *retval_from_stbi_load);$/;"	p	signature:(void *retval_from_stbi_load)
stbi_image_free	render/stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f	signature:(void *retval_from_stbi_load)
stbi_info	render/stb_image.h	/^STBIDEF int      stbi_info            (char const *filename,     int *x, int *y, int *comp);$/;"	p	signature:(char const *filename, int *x, int *y, int *comp)
stbi_info	render/stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp)
stbi_info_from_callbacks	render/stb_image.h	/^STBIDEF int      stbi_info_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp);$/;"	p	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp)
stbi_info_from_callbacks	render/stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f	signature:(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)
stbi_info_from_file	render/stb_image.h	/^STBIDEF int      stbi_info_from_file  (FILE *f,                  int *x, int *y, int *comp);$/;"	p	signature:(FILE *f, int *x, int *y, int *comp)
stbi_info_from_file	render/stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp)
stbi_info_from_memory	render/stb_image.h	/^STBIDEF int      stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp);$/;"	p	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp)
stbi_info_from_memory	render/stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp)
stbi_inline	render/stb_image.h	365;"	d
stbi_inline	render/stb_image.h	367;"	d
stbi_inline	render/stb_image.h	370;"	d
stbi_install_YCbCr_to_RGB	render/stb_image.h	/^STBIDEF void stbi_install_YCbCr_to_RGB(stbi_YCbCr_to_RGB_run func)$/;"	f	signature:(stbi_YCbCr_to_RGB_run func)
stbi_install_YCbCr_to_RGB	render/stb_image.h	/^STBIDEF void stbi_install_YCbCr_to_RGB(stbi_YCbCr_to_RGB_run func);$/;"	p	signature:(stbi_YCbCr_to_RGB_run func)
stbi_install_idct	render/stb_image.h	/^STBIDEF void stbi_install_idct(stbi_idct_8x8 func)$/;"	f	signature:(stbi_idct_8x8 func)
stbi_install_idct	render/stb_image.h	/^STBIDEF void stbi_install_idct(stbi_idct_8x8 func);$/;"	p	signature:(stbi_idct_8x8 func)
stbi_io_callbacks	render/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon11
stbi_is_hdr	render/stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f	signature:(char const *filename)
stbi_is_hdr	render/stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename);$/;"	p	signature:(char const *filename)
stbi_is_hdr_from_callbacks	render/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user)
stbi_is_hdr_from_callbacks	render/stb_image.h	/^STBIDEF int    stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user);$/;"	p	signature:(stbi_io_callbacks const *clbk, void *user)
stbi_is_hdr_from_file	render/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f	signature:(FILE *f)
stbi_is_hdr_from_file	render/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f);$/;"	p	signature:(FILE *f)
stbi_is_hdr_from_memory	render/stb_image.h	/^STBIDEF int    stbi_is_hdr_from_memory(stbi_uc const *buffer, int len);$/;"	p	signature:(stbi_uc const *buffer, int len)
stbi_is_hdr_from_memory	render/stb_image.h	/^int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f	signature:(stbi_uc const *buffer, int len)
stbi_ldr_to_hdr_gamma	render/stb_image.h	/^   STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma);$/;"	p	signature:(float gamma)
stbi_ldr_to_hdr_gamma	render/stb_image.h	/^void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f	signature:(float gamma)
stbi_ldr_to_hdr_scale	render/stb_image.h	/^   STBIDEF void   stbi_ldr_to_hdr_scale(float scale);$/;"	p	signature:(float scale)
stbi_ldr_to_hdr_scale	render/stb_image.h	/^void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f	signature:(float scale)
stbi_load	render/stb_image.h	/^STBIDEF stbi_uc *stbi_load            (char const *filename,     int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_load	render/stb_image.h	/^STBIDEF unsigned char *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_load_from_callbacks	render/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks  (stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_load_from_callbacks	render/stb_image.h	/^unsigned char *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_load_from_file	render/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file  (FILE *f,                  int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_load_from_file	render/stb_image.h	/^STBIDEF unsigned char *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_load_from_memory	render/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_load_from_memory	render/stb_image.h	/^STBIDEF unsigned char *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_load_main	render/stb_image.h	/^static unsigned char *stbi_load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi_loadf	render/stb_image.h	/^   STBIDEF float *stbi_loadf            (char const *filename,   int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_loadf	render/stb_image.h	/^float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(char const *filename, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_callbacks	render/stb_image.h	/^   STBIDEF float *stbi_loadf_from_callbacks  (stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_callbacks	render/stb_image.h	/^float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_file	render/stb_image.h	/^   STBIDEF float *stbi_loadf_from_file  (FILE *f,                int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_file	render/stb_image.h	/^float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(FILE *f, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_memory	render/stb_image.h	/^   STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp);$/;"	p	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_loadf_from_memory	render/stb_image.h	/^float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
stbi_loadf_main	render/stb_image.h	/^float *stbi_loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	signature:(stbi__context *s, int *x, int *y, int *comp, int req_comp)
stbi_lrot	render/stb_image.h	401;"	d
stbi_lrot	render/stb_image.h	403;"	d
stbi_set_unpremultiply_on_load	render/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f	signature:(int flag_true_if_should_unpremultiply)
stbi_set_unpremultiply_on_load	render/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply);$/;"	p	signature:(int flag_true_if_should_unpremultiply)
stbi_uc	render/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_zlib_decode_buffer	render/stb_image.h	/^STBIDEF int   stbi_zlib_decode_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);$/;"	p	signature:(char *obuffer, int olen, const char *ibuffer, int ilen)
stbi_zlib_decode_buffer	render/stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f	signature:(char *obuffer, int olen, char const *ibuffer, int ilen)
stbi_zlib_decode_malloc	render/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f	signature:(char const *buffer, int len, int *outlen)
stbi_zlib_decode_malloc	render/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(const char *buffer, int len, int *outlen);$/;"	p	signature:(const char *buffer, int len, int *outlen)
stbi_zlib_decode_malloc_guesssize	render/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f	signature:(const char *buffer, int len, int initial_size, int *outlen)
stbi_zlib_decode_malloc_guesssize	render/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen);$/;"	p	signature:(const char *buffer, int len, int initial_size, int *outlen)
stbi_zlib_decode_malloc_guesssize_headerflag	render/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f	signature:(const char *buffer, int len, int initial_size, int *outlen, int parse_header)
stbi_zlib_decode_malloc_guesssize_headerflag	render/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header);$/;"	p	signature:(const char *buffer, int len, int initial_size, int *outlen, int parse_header)
stbi_zlib_decode_noheader_buffer	render/stb_image.h	/^STBIDEF int   stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);$/;"	p	signature:(char *obuffer, int olen, const char *ibuffer, int ilen)
stbi_zlib_decode_noheader_buffer	render/stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f	signature:(char *obuffer, int olen, const char *ibuffer, int ilen)
stbi_zlib_decode_noheader_malloc	render/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f	signature:(char const *buffer, int len, int *outlen)
stbi_zlib_decode_noheader_malloc	render/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(const char *buffer, int len, int *outlen);$/;"	p	signature:(const char *buffer, int len, int *outlen)
step	render/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon25	access:public
suffix	render/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon24	access:public
tdogl	render/Bitmap.h	/^namespace tdogl {$/;"	n
tdogl	render/Texture.h	/^namespace tdogl {$/;"	n
tdogl::Bitmap	render/Bitmap.h	/^    class Bitmap {$/;"	c	namespace:tdogl
tdogl::Bitmap::Bitmap	render/Bitmap.h	/^        Bitmap(const Bitmap& other);$/;"	p	class:tdogl::Bitmap	access:public	signature:(const Bitmap& other)
tdogl::Bitmap::Bitmap	render/Bitmap.h	/^        Bitmap(unsigned width, $/;"	p	class:tdogl::Bitmap	access:public	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels = NULL)
tdogl::Bitmap::Format	render/Bitmap.h	/^        enum Format {$/;"	g	class:tdogl::Bitmap	access:public
tdogl::Bitmap::Format_Grayscale	render/Bitmap.h	/^            Format_Grayscale = 1, \/**< one channel: grayscale *\/$/;"	e	enum:tdogl::Bitmap::Format
tdogl::Bitmap::Format_GrayscaleAlpha	render/Bitmap.h	/^            Format_GrayscaleAlpha = 2, \/**< two channels: grayscale and alpha *\/$/;"	e	enum:tdogl::Bitmap::Format
tdogl::Bitmap::Format_RGB	render/Bitmap.h	/^            Format_RGB = 3, \/**< three channels: red, green, blue *\/$/;"	e	enum:tdogl::Bitmap::Format
tdogl::Bitmap::Format_RGBA	render/Bitmap.h	/^            Format_RGBA = 4 \/**< four channels: red, green, blue, alpha *\/$/;"	e	enum:tdogl::Bitmap::Format
tdogl::Bitmap::_format	render/Bitmap.h	/^        Format _format;$/;"	m	class:tdogl::Bitmap	access:private
tdogl::Bitmap::_getPixelOffset	render/Bitmap.h	/^        static void _getPixelOffset(unsigned col, unsigned row, unsigned width, unsigned height, Format format);$/;"	p	class:tdogl::Bitmap	access:private	signature:(unsigned col, unsigned row, unsigned width, unsigned height, Format format)
tdogl::Bitmap::_height	render/Bitmap.h	/^        unsigned _height;$/;"	m	class:tdogl::Bitmap	access:private
tdogl::Bitmap::_pixels	render/Bitmap.h	/^        unsigned char* _pixels;$/;"	m	class:tdogl::Bitmap	access:private
tdogl::Bitmap::_set	render/Bitmap.h	/^        void _set(unsigned width, unsigned height, Format format, const unsigned char* pixels);$/;"	p	class:tdogl::Bitmap	access:private	signature:(unsigned width, unsigned height, Format format, const unsigned char* pixels)
tdogl::Bitmap::_width	render/Bitmap.h	/^        unsigned _width;$/;"	m	class:tdogl::Bitmap	access:private
tdogl::Bitmap::bitmapFromFile	render/Bitmap.h	/^        static Bitmap bitmapFromFile(std::string filePath);$/;"	p	class:tdogl::Bitmap	access:public	signature:(std::string filePath)
tdogl::Bitmap::copyRectFromBitmap	render/Bitmap.h	/^        void copyRectFromBitmap(const Bitmap& src, $/;"	p	class:tdogl::Bitmap	access:public	signature:(const Bitmap& src, unsigned srcCol, unsigned srcRow, unsigned destCol, unsigned destRow, unsigned width, unsigned height)
tdogl::Bitmap::flipVertically	render/Bitmap.h	/^        void flipVertically();$/;"	p	class:tdogl::Bitmap	access:public	signature:()
tdogl::Bitmap::format	render/Bitmap.h	/^        Format format() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
tdogl::Bitmap::getPixel	render/Bitmap.h	/^        unsigned char* getPixel(unsigned int column, unsigned int row) const;$/;"	p	class:tdogl::Bitmap	access:public	signature:(unsigned int column, unsigned int row) const
tdogl::Bitmap::height	render/Bitmap.h	/^        unsigned height() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
tdogl::Bitmap::operator =	render/Bitmap.h	/^        Bitmap& operator = (const Bitmap& other);$/;"	p	class:tdogl::Bitmap	access:public	signature:(const Bitmap& other)
tdogl::Bitmap::pixelBuffer	render/Bitmap.h	/^        unsigned char* pixelBuffer() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
tdogl::Bitmap::rotate90CounterClockwise	render/Bitmap.h	/^        void rotate90CounterClockwise();$/;"	p	class:tdogl::Bitmap	access:public	signature:()
tdogl::Bitmap::setPixel	render/Bitmap.h	/^        void setPixel(unsigned int column, unsigned int row, const unsigned char* pixel);$/;"	p	class:tdogl::Bitmap	access:public	signature:(unsigned int column, unsigned int row, const unsigned char* pixel)
tdogl::Bitmap::width	render/Bitmap.h	/^        unsigned width() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
tdogl::Bitmap::~Bitmap	render/Bitmap.h	/^        ~Bitmap();$/;"	p	class:tdogl::Bitmap	access:public	signature:()
tdogl::Texture	render/Texture.h	/^    class Texture {$/;"	c	namespace:tdogl
tdogl::Texture::Context	render/Texture.h	/^    	typedef Render::Context Context;$/;"	t	class:tdogl::Texture	access:private
tdogl::Texture::Texture	render/Texture.h	/^        Texture(Context* gl, const Bitmap& bitmap,$/;"	p	class:tdogl::Texture	access:public	signature:(Context* gl, const Bitmap& bitmap, GLint minMagFiler = GL_NEAREST, GLint wrapMode = GL_CLAMP_TO_EDGE)
tdogl::Texture::Texture	render/Texture.h	/^        Texture(const Texture&);$/;"	p	class:tdogl::Texture	access:private	signature:(const Texture&)
tdogl::Texture::_object	render/Texture.h	/^        GLuint _object;$/;"	m	class:tdogl::Texture	access:private
tdogl::Texture::_originalHeight	render/Texture.h	/^        GLfloat _originalHeight;$/;"	m	class:tdogl::Texture	access:private
tdogl::Texture::_originalWidth	render/Texture.h	/^        GLfloat _originalWidth;$/;"	m	class:tdogl::Texture	access:private
tdogl::Texture::gl	render/Texture.h	/^    	Context *gl;$/;"	m	class:tdogl::Texture	access:private
tdogl::Texture::object	render/Texture.h	/^        GLuint object() const;$/;"	p	class:tdogl::Texture	access:public	signature:() const
tdogl::Texture::operator =	render/Texture.h	/^        const Texture& operator=(const Texture&);$/;"	p	class:tdogl::Texture	access:private	signature:(const Texture&)
tdogl::Texture::originalHeight	render/Texture.h	/^        GLfloat originalHeight() const;$/;"	p	class:tdogl::Texture	access:public	signature:() const
tdogl::Texture::originalWidth	render/Texture.h	/^        GLfloat originalWidth() const;$/;"	p	class:tdogl::Texture	access:public	signature:() const
tdogl::Texture::~Texture	render/Texture.h	/^        ~Texture();$/;"	p	class:tdogl::Texture	access:public	signature:()
tex	render/font.h	/^	GLuint tex;$/;"	m	class:Font	access:private
tex	render/sprite3d.h	/^	tdogl::Texture* tex;$/;"	m	class:Sprite3D	access:private
texColorBuffer	render/renderer.h	/^	GLuint frameBuffer, texColorBuffer, rboDepthStencil, postvao, postvbo;$/;"	m	class:Renderer	access:private
textures	render/assets.h	/^	tdogl::Texture* textures[TEX_MAX];$/;"	m	class:Assets	access:private
time	entity/controller/debugtransformcontroller.h	/^	uint32_t time = 0;$/;"	m	class:DebugTransformController	access:public
time	render/animation.h	/^		int time;$/;"	m	struct:Animation::Frame	access:public
timeStep	physics/physics.h	/^	const float32 timeStep = 1.0f \/ 60.0f;$/;"	m	class:Physics	access:private
timer	entity/bullet.h	/^	uint32_t timer = 5;$/;"	m	class:Bullet	access:public
timer	render/renderer.h	/^	uint32_t timer = 0;$/;"	m	class:Renderer	access:public
todo	render/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon15	access:public
total	entity/actor.h	/^	struct { int current, total; } hp;$/;"	m	struct:Actor::__anon3	access:public
total	entity/script/inventory.h	/^		int total;$/;"	m	struct:Inventory::__anon7	access:public
tq	render/stb_image.h	/^      int tq;$/;"	m	struct:__anon15::__anon16	access:public
transform	entity/entity.h	/^	Transform transform;$/;"	m	class:Entity	access:public
transparent	render/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon25	access:public
turbulence	texgen/texgen.cpp	/^Canvas turbulence( Canvas& in, Canvas& out )$/;"	f	namespace:rzfx	signature:( Canvas& in, Canvas& out )
turbulence	texgen/texgen.h	/^void turbulence( Canvas& c );$/;"	p	namespace:rzfx	signature:( Canvas& c )
tx	render/font.h	/^		float tx; \/\/ x offset of glyph in texture coordinates$/;"	m	struct:Font::character_info	access:public
ty	render/font.h	/^		float ty; \/\/ y offset of glyph in texture coordinates$/;"	m	struct:Font::character_info	access:public
type	entity/entity.h	/^	Entity::Type type;$/;"	m	class:Entity	access:protected
type	entity/pickup.h	/^	Type type;$/;"	m	class:Pickup	access:public
type	map/mapdata.h	/^	} type;$/;"	m	struct:mapgen::RoomConnection	typeref:enum:mapgen::RoomConnection::Type	access:public
type	render/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon20	access:public
type	render/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon23	access:public
uint64_t	render/glcorearb.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	render/glcorearb.h	/^typedef unsigned long int uint64_t;$/;"	t
uint64_t	render/glcorearb.h	/^typedef unsigned long long int uint64_t;$/;"	t
uniform	core/random.h	/^	float uniform( )$/;"	f	class:RNG	access:public	signature:( )
uniform	core/random.h	/^	int uniform( int low, int high )$/;"	f	class:RNG	access:public	signature:( int low, int high )
uniform_color	render/renderer.h	/^	GLuint attribute_coord, uniform_tex, uniform_color;$/;"	m	class:Renderer	access:private
uniform_tex	render/font.h	/^	GLuint attribute_coord, uniform_tex;$/;"	m	class:Font	access:private
uniform_tex	render/renderer.h	/^	GLuint attribute_coord, uniform_tex, uniform_color;$/;"	m	class:Renderer	access:private
used	entity/script/inventory.h	/^		int used;$/;"	m	struct:Inventory::__anon7	access:public
uvs	render/mesh.h	/^	GLfloat* uvs;$/;"	m	class:Mesh	access:protected
v	render/stb_image.h	/^      int h,v;$/;"	m	struct:__anon15::__anon16	access:public
validate_uint32	render/stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
value	render/stb_image.h	/^   stbi__uint16 value[288]; $/;"	m	struct:__anon18	access:public
values	render/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon14	access:public
vao	render/mesh.h	/^	GLuint vao;$/;"	m	class:Mesh	access:protected
vbo	render/mesh.h	/^	GLuint* vbo;$/;"	m	class:Mesh	access:protected
velocityIterations	physics/physics.h	/^	const int32 velocityIterations = 6;$/;"	m	class:Physics	access:private
vert	render/block.h	/^	static const GLfloat vert[];$/;"	m	class:Block	access:public
vert	render/program.h	/^	Shader vert;$/;"	m	class:Program	access:private
verticalAngle	render/camera.h	/^	float verticalAngle;$/;"	m	class:Camera	access:private
vertices	render/mesh.h	/^	GLfloat* vertices;$/;"	m	class:Mesh	access:protected
view	render/camera.h	/^	cml::matrix44f_c view, projection;$/;"	m	class:Camera	access:private
view	render/renderer.h	/^	cml::matrix44f_c view;$/;"	m	class:Renderer	access:private
viewerPos	render/renderer.h	/^	cml::vector3f viewerPos;$/;"	m	class:Renderer	access:public
vision	entity/mob.h	/^	} vision;$/;"	m	class:Mob	typeref:struct:Mob::__anon1	access:public
vs	render/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon17	access:public
w	map/mapdata.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
w	render/font.h	/^	int w, h;$/;"	m	class:Font	access:private
w	render/stb_image.h	/^   int w,h;$/;"	m	struct:__anon25	access:public
w2	render/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon15::__anon16	access:public
w_lores	render/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion $/;"	m	struct:__anon17	access:public
walk_speed	entity/player.h	/^	float walk_speed = 8.f;$/;"	m	class:Player	access:public
weapon	entity/player.h	/^	PlayerWeapon weapon; \/\/ ES UN PUNTERO!! CAMBIADO PARA TESTEAR!!$/;"	m	class:Player	access:public
wep	entity/actor.h	/^	Weapon wep; \/\/ PUESTO AQUI PARA DEPURAR$/;"	m	class:Actor	access:public
wh	render/renderer.h	/^	int ww, wh;$/;"	m	class:Renderer	access:private
width	render/Bitmap.cpp	/^unsigned int Bitmap::width() const {$/;"	f	class:Bitmap	signature:() const
width	render/Bitmap.h	/^        unsigned width() const;$/;"	p	class:tdogl::Bitmap	access:public	signature:() const
width	render/quad.h	/^	int width, height;$/;"	m	class:Quad	access:private
winHeight	app/sdlglapp.h	/^	int winWidth, winHeight;$/;"	m	class:SDLGLApp	access:protected
winWidth	app/sdlglapp.h	/^	int winWidth, winHeight;$/;"	m	class:SDLGLApp	access:protected
world	core/transform.h	/^	cml::matrix44f_c world;$/;"	m	class:Transform	access:public
world	physics/physics.h	/^	b2World* world;$/;"	m	class:Physics	access:private
ww	render/renderer.h	/^	int ww, wh;$/;"	m	class:Renderer	access:private
x	ailib/mapsearchnode.h	/^	int x,y;$/;"	m	class:MapSearchNode	access:public
x	map/map.h	/^		int x, y;$/;"	m	struct:Map::BlockData	access:public
x	map/mapdata.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
x	map/mapdata.h	/^	int x, y;$/;"	m	struct:mapgen::Intersection	access:public
x	render/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon15::__anon16	access:public
y	ailib/mapsearchnode.h	/^	int x,y;$/;"	m	class:MapSearchNode	access:public
y	map/map.h	/^		int x, y;$/;"	m	struct:Map::BlockData	access:public
y	map/mapdata.h	/^	int x, y, w, h;$/;"	m	struct:mapgen::Room	access:public
y	map/mapdata.h	/^	int x, y;$/;"	m	struct:mapgen::Intersection	access:public
y	render/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon15::__anon16	access:public
ypos	render/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon17	access:public
ystep	render/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon17	access:public
z_distance	render/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon19	access:public
z_expandable	render/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon19	access:public
z_length	render/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon19	access:public
zbuffer	render/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon19	access:public
zbuffer_end	render/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon19	access:public
zout	render/stb_image.h	/^   char *zout;$/;"	m	struct:__anon19	access:public
zout_end	render/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon19	access:public
zout_start	render/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon19	access:public
~AStarState	ailib/stlastar.h	/^	virtual ~AStarState() {}$/;"	f	class:AStarState	access:public	signature:()
~Animation	render/animation.h	/^	virtual ~Animation () {}$/;"	f	class:Animation	access:public	signature:()
~Assets	render/assets.h	/^	~Assets(){$/;"	f	class:Assets	access:public	signature:()
~Bitmap	render/Bitmap.cpp	/^Bitmap::~Bitmap() {$/;"	f	class:Bitmap	signature:()
~Bitmap	render/Bitmap.h	/^        ~Bitmap();$/;"	p	class:tdogl::Bitmap	access:public	signature:()
~Context	render/context.h	/^  virtual ~Context(){}$/;"	f	class:Render::Context	access:public	signature:()
~Context	render/sdlcontext.cpp	/^Context::~Context()$/;"	f	class:Render::SDL::Context	signature:()
~Context	render/sdlcontext.h	/^  virtual ~Context();$/;"	p	class:Render::SDL::Context	access:public	signature:()
~DynamicArray	core/dynamicarray.h	/^	~DynamicArray( )$/;"	f	class:DynamicArray	access:public	signature:( )
~EntityFactory	entity/entityfactory.cpp	/^EntityFactory::~EntityFactory ()$/;"	f	class:EntityFactory	signature:()
~EntityFactory	entity/entityfactory.h	/^	virtual ~EntityFactory ();$/;"	p	class:EntityFactory	access:public	signature:()
~FixedSizeAllocator	ailib/fsa.h	/^	~FixedSizeAllocator()$/;"	f	class:FixedSizeAllocator	access:public	signature:()
~Inventory	entity/script/inventory.cpp	/^Inventory::~Inventory ()$/;"	f	class:Inventory	signature:()
~Inventory	entity/script/inventory.h	/^	virtual ~Inventory ();$/;"	p	class:Inventory	access:public	signature:()
~Matrix2D	core/matrix2d.h	/^	~Matrix2D()$/;"	f	class:Matrix2D	access:public	signature:()
~Mesh	render/mesh.h	/^	virtual ~Mesh()$/;"	f	class:Mesh	access:public	signature:()
~PlayerHumanController	entity/controller/playerhumancontroller.cpp	/^PlayerHumanController::~PlayerHumanController ()$/;"	f	class:PlayerHumanController	signature:()
~PlayerHumanController	entity/controller/playerhumancontroller.h	/^	virtual ~PlayerHumanController ();$/;"	p	class:PlayerHumanController	access:public	signature:()
~SDLGLApp	app/sdlglapp.cpp	/^SDLGLApp::~SDLGLApp()$/;"	f	class:SDLGLApp	signature:()
~SDLGLApp	app/sdlglapp.h	/^	virtual ~SDLGLApp ();$/;"	p	class:SDLGLApp	access:public	signature:()
~Texture	render/Texture.cpp	/^Texture::~Texture()$/;"	f	class:Texture	signature:()
~Texture	render/Texture.h	/^        ~Texture();$/;"	p	class:tdogl::Texture	access:public	signature:()
